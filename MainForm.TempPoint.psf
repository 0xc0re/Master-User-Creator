<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$gettingStartedToolStripMenuItem_Click={
	Show-GettingStarted_psf
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>