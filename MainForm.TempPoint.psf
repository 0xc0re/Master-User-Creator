<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>YxUp124HzqYEACODCAAAAAAABADsvVuTqkrWLnxfEfUfjHnxxd6vq5eCivh+3SsiOXhWPJ9uOhAR8QCKKOqv
35lgVVlVipxUak7p7tmFwnDkyCdHPpk5cuS/ueFUFPT1P68vkci/rZuIvl+K//nV3K91cfF3V1ZG
qrH+O6tqC+vfvyLnvvor0hG1tawq/0n+HUf/+StCb+b6RhP/o4gbXePnf0Vqm+FcFkrivqXOROU/
w3SaTwkpAsskkmKczPyKKPwC/nKFlxUk81dEmMjzkQYf/UWriq6p8/UvU1Ooa01Tl6Km74/vgI2u
NgV+LjLyQlSQHvBRLIP/FYH//Dv29vS1tyvqSPz1D7OUnb0iH+DTLW0jOn7c+oGcphpAGTUnmqzM
rr5L8cKMVueq9uufoxmuvkLPZVHRLf2wOJGGZsDT5NXXkNUpVRuJWlPfz+G7WXknjpqyIs2vF7Eg
qMpb9cBvKVnhtf0/AAAKgD5g4b8AsKAAKBX9OZDA20UBGoBkQwCgkmThvVFBn9aBBErSHAB6m4e3
BfjM64slgVbRY514wfr4KKEEJArUMk10W3+TQE/QA0rXYOH3li7wMn8bSqsD6UMJKNtYwz8qZeDh
QroFd12RVstJoFA2FIM20qUKyJ98VWXq8cK0sK8sZvvKtNSswL9fX9Yt+Mm6fagcavVKi93Fp+yu
Isx2lVYuhZ5Q0PeLFpTIAJJnQSzGyYA2PsQy6HkJvR97fanA/4/B/1VipPnJ1/tqq75bs4V0WV1m
a/JuTxZJYMRyE1CLGYoEMIJXAVOLjmFFHJA0rnNNonlPdvNM/rBT60zM0tGU+Oke2s36pIZKWWoh
CbPLEs37KAFVOpA8xCCyK8ds4ftJJPH1JRajJ4Dr7aC+UppggW5ZA1q2kEESjJaNzqad4X3KfH76
+mLaoWZqfVAlsLapYVgzbBxJ2H6RmEJ1O1/DWqgdSNZCAz0GFcayA1EAV+HLQInpwonO7A7Wwrig
l5vxxsljUCI1RnaQaqU5oOr2Eg9rqHOeRH9Bu32xtCxdftnmQgju2eAtqroWabUsJGHInK07+JvO
HcCXdookYhfwButtZVwQc17ax4VXp30B1X7mG95Qu227k/b5Muuujyw9Qn9ppifoe5Xm8HIijYnF
oL1iUbM3YL5/Dx07/D5JV5C0GjWFD0lj9EmeBICjYp/ua0zsTaLcobiGES/lJBM91WZ7wrYRPk2A
o1ZPA1R+ShBWkwX6jFoUy414HcQMKKUWlba82DI16FGFbg/pt0b3ZRb2MoulgV7u5eNztt5pJF9f
8E1iJKaawgib5UkudjhUdosqiS9a7WVxtquv0o3BZC0o3La4reZWLOzejbaslpf1ocGyoDcryHRB
LMtCYdfJvr5M9aHMdQ6lXWewacryPKFRWWK+kIhGER9opeVknm5R+nLd1NgJ3+LTQmItxqJSe5Zo
HBaDRHkYHWS2qcwhpbWKry/FaW2cIROVUSatpQ2hzjbc/6c4mna1jt56fVFb1To5m6ogzyYq0+K+
N12NEpvpJpfZZXIVupXI4/PVKsmuqTLAuzzenvfSB36/WKlRHu+yYBLvzSoFCtY1kXp9icbwFWSQ
ndE+M95uD9xeUIr8ZjJXM+k8WMgTrbNJLDdEJpNJlxtcIzuY9ul+gVtpC4VppnpCrLcGI4lL6p2V
/voyVnqJtB6PMeUEieV1SEjwkipPpoM1yZD5YmfcXADSKLMVwIxH27EWjyrxTmK4SdTmgKh16G2f
za7ZxrSPV6BH6pS2nVFSKcAqShYTTbGfltOJfV/Ok2mFPAg0WaWpVX6zA9Sqfej2t9liNiGTsgbG
zexBqfAVg94cuPEBS1ZhndYLugQG+0lrsMaVzkbvbMmmwQw6h36LixuTRGxHgvRebdNbsstJOpbd
DUFOmM4FOYNn4tEVsV1M1ocWk2jFYC0kMrEYNomnR1ODR09T8OlS9zBYLzpGv5uflCb5VGJEDbqb
SbSS0btlio/lWmphIojlVjwpL8g41+G3nSGxXcE+K15U+GH20Mi1hhulp+017rDOkFy+P6T7Ervu
LxqzQYkrxIriqiZ34vNpvwHKmWRsqyjMLpkUOEZThWqdqxqwpBzLthsCmSNLJDhIxGjZ5jZbUZZl
jEiPx1u8u5EkLK8IYDrJlZfjYZpLj9ki21GH1Xi8MqUkQ9gulvho28zGX19YTiWzM2a0U+NDLLkt
lPkVUVKaXcDw695w090Z9aYM2qCf35Fj6EIOzfI+U6UG9Umu0cPk2FjBdrFYOjNKDjlYC0t8qtar
cSlRSsXyLGiLkiD1F+lxIjUbcM1mnM2pwq44BiVuqu7J5mxEQtNUyxpFN3iSZozkokFkccA01vjr
i1LqrmLJ9GaznCklKp9a9XoatsWkkcLjOUYt652orBtMkxg3x2AoGaNCcpPh8tXFQUz0dwZDTEvF
cp9pxEc55fVFrsjD+mastlebFSauxhOQotKDcR+sph1+k8llMjEul9wPtv3UEIxzvT0o9zf5/FSc
dzItWI5Ee9ehCK1DTHX69SVFMHhzUaeW1dqyahT72ekyrx+4AxbvNHRmF2cWq/GO6oDxGHobPnvI
gGInX28ZBJE9tGvrmSYxm000Gk0Z1f7rS/awzGsH+tBJjrk6h7c2oGhkMmRF4XO9FaexqPOioJR2
Hr5ZZ9qHbLLPzZq1WXeFRdebSR2j0sWSCgRNEV5fFqWVmEMSE/lENtlDEhsryPlJdjMBsaaa2mdT
6VSHbVbrsZWmb5klPskSyioJK4XIM2q+2iDkpgo6o3gb4m3GbfuKkmvjhVK/yi1aosCI+bKaLydK
B4ZnDzNan6ckWqiJYyRpTsxX/dmoLGs1NsvSekdbq6NCXxwl8irsZUzZM8B2ZkMouZaMrcqqUG9L
5Y2px47AC+pKVoqz7jwe1yuAn6zGUalSEUAa4JVFpd6T0hulnustR9D3LqvFDCU3hQEUuaGHenye
n+5ScIQ8qPSlJeiMlcWwUyCULl/czXYyrVJDUMGmQGjU+qjvKgtgMa+v5kMJore/7++oJpDHtQpe
GnRKQn0tDSbFFmCnyTILocZVVHLA9cGGWhrcoLPCul3ohmYryHVTC7y5Ugoj61fo4euLRiamnLqH
KKgD3aD5DrHtbEBqWpzNskYuui2qswK9pxbsvAL71zZoidwSq6GfyxsgOzwcCgetkus32wYD65Tq
SiLEulyMH9/esv16zZgtJSpJr/RUAnQLCllvg7xUX+cUgerLY5wZE6hdj3EtE912kQcdgx7VfX0h
mH2mxbZKfEbcaEKaO+jJssHWFFUcFAnA6PPKdt6TDbln8EY53+wuyvPlrq92yilCUEr7HDMrV2Ux
3jUgoXp9aeSj8/Z2tgU5MX+YFJk60WkSffGwTtfGTANnF5PasG9QByHBxcAsmcWmw01sqdVz/CS1
buIAghjvilJF4HnoLQvYBh9Ss4rS53g2s6ZZKssNMpjITcnYITbritheoHFqRIDdbh5fzTeFVLqX
M8pGxUhmO/JQaCQSW12CHkyuwl6mOTY2qipmowKdZJvdYRMaBoK2na/JPUCxI2q1K9epTq8ujwr1
/KJuiJKpFAACPYlLAFIFEdutaZKBeMvA9snmR4vMglGZalPAqT6Q8jpDJaV0JVoh0koOSgONqBir
57rlTRLSQQZiTJxbEkR+xOegK8RwsvL6siv3QXSrEUuJbtejYqGE9TKdjVTByod+ds20MUgFQDlV
xKPjRRzkVHHIwsETZWQS0Gs2c9yB24HaMqaUZ8CUFge6xBlxZi4T7FZaFOgdy63pEsWXo2RinYOe
Z1elFFRCTJ1gYNTI1PJNsKjMejLZW8bpnFrtQt9M67B31rY7BdR0OpWUyqNYNB2nFuoIfVvkWjOs
k4iltnWuW5brjXyqvpHqGAPtCJkhwW21KNEcHPpDLi5uhVi/BnnIuJxscpKItWToQ3LLFT9PsZq0
H6kpcYCPiOyk36lNhBSlDboFINHAEPIUbzBreoBPOxBNq1ZMXONCTSP2sKSLzqTG9Hi5R6cT9L5M
x5OFqrAdx8pUvbTd1Qkq3RH7GqSQJfhB1aCTZa3O9VbFhYCnoztYJuS7s3UKsDT2+tJV4hqopnOi
OmBTbLS8EwsZtVeti/vGKhuldpkOTml7jqJGUqGS3qS69D7Klg/ranogc4etsRKg29eJxGiD8aiX
mRzq+HjZ2aSj0KfFkhWaAglussaYdLFcACBHwa6XHxIZXscNRlrwucOIWh8WO7GRTTCtWoxoboGy
Bvlk+fXFyEJSUU2wh9xq2eHUzqRdmOQPqOcj5anBCkSmWC5jeGffbWzYQa4Rzy7gSLya7LSIcSw5
rtd56cDOIXenKMgc4rCL3dDZ+FRnhNhwk60v2PUIpFcK3dqC7Y7ddPZitVzlCWo/2bTW29lM7Wdh
beB4NBbj6cKYHsWnctrQR4B6fVmVq32Qb8vCoqYydG6A96O5iTrYMAOc4dR1tk0L0H8Qo0Kz0dl2
8+nMBi8mDKyUmwxAYtyKZ7LJWTRVl6jYsgBbPXLMo0MmHa8qdCVfyWyGh6ig1Dl+eoBNOd+FGIkW
SoN8nRipmWo706hJmTFR3IFCcrdMZsQkofKrEg7Wh/XrC0/zrWRbitGDNpfnmeGiOu+AKqGu1Hm/
ui/vCX6xXLVHdAqXB4ddUpxAptUf9w9EZZ8dSulOrk5vd2X+kDZWGciiCwk5uwZFed2Ta5Nscb8C
k1SvTsQ64qSebrQPrSTsFJornpcX3JYqgORUimanaqNDluB7coNr1UCxQaeiMhwZTaNpYTPmqDid
5ZvbfbNSymgGwfbGzXkfFLaFVKw2HsVErR4dqcVDNV0s1opjmopPl8NDvSYmJnltVNRY0FqVYq8v
21imBNspk8KlHtub17TaMMO3oSRa3PVJkWvA8UAZMge9Mtcn7fKEJbJMOy+tpSzXV5ZENA+NOWnE
h5D5115fkkxP0rkZpOnUci5s51hqO2DiZYWnOp1xbx1V0uQUIYaR9yBOTMclxchKRWKcFSDhT01r
qcN8xG3jLB1FHikLVtlSI78khNnuUDKkwoqsQq9O0MZWYlis1kqQOYPpToT9oTFrGwsyUyRrChkf
UcyqDH+hkqYmRpI/qPKUgAgpUL2JQOwbtL7SR8veOqOsD5AG1XU8S/UArxLcVIvLSjwB/S0jgq1O
pRYTekmssEY2i6fFcW1R5fOw9CMJ8pDBji0vBQiyzl6HA7cstJME3+jO6mBIb3r7xCjfHjdFcpzf
SSOaKtFG1wDz/WZ0yLYbrcwsORWKchEyytES9s5Ye0TVaErQ5mRnT/Rwg48yu1I5FqOwTWe3GTaJ
XjQlp8dGDGT5/GFUKBV6NJCx6ABKTGCbBqv2G8XdIbaB0hrZfLyYH8WW6U2s2en25FhrVmtgVXaQ
VSDPncirwnIEhyhqh05yvfqCUA+wxphktDZdtVdKvCVRW3bJwq7vAEtaxotCI5cuDTQuIa+naVrt
0WWeZdq99VyTAD7MEORyXlpuy1i7pOGTrZypFDGmoxg1Y9o18CgeB2Msuc5uyenry4gerKaQZxiI
K2arsCbU9B6aKw35IyjHdrBdwzcTEo+x7dZwm6aMTdaYjymjXZ0Wx/3srIItFGKxSkMmDdvpKtPG
2ge1xmAryEejszW2SBuM0SE0YtMzoj1jNpKXag8nYhTy9nnAbNlirrfLz1L1BJOgDEpQ2oSiZRaw
lxHwUYLhq7B9sQzLJchJO7VhotnOikzWtmO5KuvtfB8SIY1fZMTYOLpYLjJ1rJ2YkMnWCB/g3Wx3
2+Q7zU5iDJkDXiispcKQVSU6N0mOepnaOLE1hqALkcLDOiwW8EGnniWb7VZ0MwdqtlDK9etsfFkS
yoXCSl4axWQFNigwleDoYwRpGiR2LSPbS41rxJjtltuFxgDUE9q+wDEQvFJ3lIhqiyFW6XS4CZmh
dmWpanRb/DDRXMv5qLJNx2KVKRyVvr7kpfhIngx7FWwN2F2lRQwXqU0nusW6y207093F84p6KE4H
fdg7j0pYN0qiSdRDZtjLUEMJ6sity+aILt+dv760t/MMxNN0yqVLzZ1xWMG6nIrpqJ6EAOvourhn
u3WWI3SJyjVmfdTTJMBIXqzW0O8Que5CGSZWRj9PpUk4ouRa88FQnB3WBuDjSjvbZuBgOj7GyJhI
dg/53IEz8oVtqTGfp2oGKKrNstCW2AEkI2Ui2ttuEnuxsmjEcyQ7O7y+bPDlYrAZUsslUaFGdF0F
baPGHAQsExtv4xibkGbSodTk4F8lwMAB7CTKI78mxBVLehHQOQoWdC9DVrNPkwqkyZV+PqHO29Ro
Z1AkPsK3iDnoh3G8is0AIypqbTusx6v0HmFuDtuGnh1BvtKPxcr1JARiVq7sIO9t91qZ5QwfKpM2
0c7usJUE4gsSj4oKZZC5ZGPTWXZEIrlcNbPi9rBPZmpT5kAvF53F1hDrLbAnd+vRrpFVCH0Me5n2
TMdqfQ30uFSi1AY1OS4v4oVtmcari2YcbNgRm550G9FMIlPviWNqTE87NBwQ74t7usJMWnT/0Nmv
OtlZKgF75xjD7tgWsS+y0/Gos9KF2Cga09LR2LaigQxIbfMxeTblD9nSarUhNoVNQRZkAqSTIzGf
yDcxqVRQN9MqtCn05P2solJ8N3cYKmmFGDRX4xjqpxJqodfLjMa1WEeghBIvG9VlE9S602iKpMnq
ZpJN0d1UQcS6m0RqkxjqC2kGWfSkutJS9a4xEDZdY6ykog09myovJtlkkoc0osMOF0I+lprxuRk1
LeBVrbnvNKfiklCmUIvKPBrVaRWREchYX18q2BLPLii5D/vDzmqbKRlUNJrf9pTiPFPK1wvEctfN
9oHA9coz0qBFNrGieE4RYs21ObcMR50MtxLmG4NqwD6rHB8bFZ0uGwbWiDejI70w7inj5KLFpHM0
6NXT2DAtZ+GwkOylcu1sKpoj8olxHpqvXOmxhbRalpjRBM/McdifxhLDFtVCpHhVTm/TYryi5w+9
WkLhx0milaEHQnUay8SySiwj4Z1W49AR8ZrG62MjByCb7tfGRGKOT1vLWQL6EGyxwg6HYbpWrXf2
yPkPU61YfscQBaYNFnyqn4gNMDDuHZh0aZ/QpsYIi8kUzYjZorJqEAl52JqB1aRWTOGQcfHDZqvO
Ngk+WagRqjTPCnSOaWw5YSvG6B0udlcrrJ6oNlrYpAn4FmSUo71USfeTw32RHjWgdvvqtIXrtTny
b7v6Ot+b4dJE2kjt1VygebAd5alVuVUdQhLLjDophhow5VQz1cFGZCE/WPItrNNjpHiVHA71SW4e
p6NUhuAI7fWlXpKKK0zcMkqlk693DjsosDHPxxkAtswO7+OrkVCWomjuYTQSBkOQG+KNKJ0YE/t5
W55zelE1BlgdLA6j7etLb8Wt8tW4koL26644ZjQv1TiiQq+yvDY0mHymv86wzUXelDZSaRlCv4/z
W2iFNr7KdFck/v7d6wtbzJdFoVrrr/dZ5vhppWyOdJvcuoinM+kqmMn99m4AysvRkIima1DnJr6G
3lttcfUilthv1qDB1WEPWFgXW3USdusxkuU27a5UXGQKSgMQkykXX1ZBcQ8p7TC3o7EGVs7DzyWj
0YVjVamlbZegU9c6fWQRjpuNoEcSqWwdLGGHzbZmRch12E42Xe6oAFED2NPjJAH5Txv6nBJgu1od
lJa90hrrYrVEPUlMjEN3xxIg0RP3vT5k+Fy5Cvt8YzkCzGrLttEIewNtUuFmeocih/kdBsf7s9wo
069DH6vy3RW/UuN6qrJZ6stOebmEXF5l+gcSr0KmGoVPdcvz/aDBk5mW2GjQjTS5jBGxZItr7HGJ
U2rrcipjlIZ0gayuY2q7NatIEM7jZl4fNbb10moM8qC4UfQZ9G/VttJSYh22n8lAGtgUN9maUc+l
AD7LpPVhtEjsVViNURBlOuqo2mQL40UqKo63uXFN0ZOjHNfiJUOQNqshZDVadIuzWQJbbUabBRZb
F2hKkdr4Zm0IOfhXli+UhC6gVoM1N6ljbHKw5fNopj612/UAXZkWdqJWUsVca0rBOh33+u3GkBQ4
aYTtFDY7YwllM57XIEq0tY5Y65Cri1iiB3LJKNGdACybXG3VGajGKgOtGlv38tOdUoXj1DwOa2HM
xpNMlaaI8kYtLZcgH5VXiyinbqRcJb1eKu1kLxUdLjKbxGAdFdF0MT7UcR7XRtsENpMrGm2sGaoe
S687aB1wO0sve/N9ajxcL3rlbba+QpxnBv2w2Ij3c+xkXoEyjXWR3q+NGWJXvNblB9PCgOpTpWW3
tOxUtIpWXJZeX5bCKs9MMH7DiaIYX02w+FbI5wW+AvlP2ihLozoV5xbtA6TO0kpTK/mBquPr/Wql
rGbIV8dKqdEG73dj7Qr5+sKM5DqbFgCm9rkGg09aWDtdm3XIsbCV8xShDpeJ6VTK9XNdMqfykKSo
CY6fxRVBLJXSeVljD71SYrhNtTdNEY6dZX6uyBU5sd0f2DxFA366QkxeZtP5AyMDvr8RRHCQYGdi
fpbozEC5V5YnbTia0KUxN2k1VsjvdTXYyzD5LKzq/BrXelq/VU3PBvNdJ0kTnVWnSYwSw/lwW2GN
JJ1Vt9lEHciQRkDvIMZzVHYChq2CuhAoNH6MKUYU9gvxwmGz24Ga0oDfcMsS9JqNdiqV06h+uZYq
15bkuDqs6IBJLQdTspQfyAVqBIhBoj6ql7P9LY2PD7FYNF5l6rBljdt7sRAdxFprcJDntfxgBCtJ
AuVBcZMCmW0iTWSoDY1HpWojm2uDaVlJDyC/EwyAYzg5L3ZXQzUu1shVGo5Ps4uFCliiDYffGsgR
OqRRAO8e8LpEN+RcIzsALbCsgw1TxqUspR8W7X0O1q8en9epcmnQL3NJZg1ioLNLo/Ep9F3rQa/D
K51+pz/S4HjByE/0RLIIrT1vQaorQxKdWBYKIJ2oYWnAJcGaFketTWyw6dWUWJ1KluCARYfdIdRN
qx5SZJoBpeFqmiL7+Ul6000P1rjQRfMjTdgeWANWdaGRS1EVqhUfJaYHjGsduF2jM0yUEyKZEwpw
PJ/DFpCTE9tVYjwnFUkUOAJMYb3vM+O8ssVGsTwtltRNdxVVGokxpCW1RgLrT+lDoZFSCHo2h780
Nhh8JWpiOhFNbKC0lDbIo7VlI5pjlqN4vb6VOrVyKpZlwSa6qiVxtH7UM4hqbppFc1q8mIom26A8
aTZogyUx4QB/TuVJiMXXl9Z0Lg+kaAGOgsFWiknjSX4wwIeJJVZaRglIcXck2y9lmfimhHg5NxBE
Lt8n6UVpFlMQG5ILmepBTGDrQ/f1RRYm/AiD3HexFcZ9PK3tco0iJMtib7JubnYHI4tXWbTe12VB
DZppgvWwAkR5k62LwnYEO7IKyKy2Kwu94/0k3s3CUQKaBUgtBKVk0FE2nxHaaovd1ZZ16II0NBAl
1pSS0xcrgxYK+5IGirtMulKrUPMOFq/G84leHKLXAMtOrb4FXVEWWXkxwBt7wHXamf6CzzdgN8H2
Zm0jx8JhQ0uaFSQBjmzHi8ycYsfzHYQ5sasY4mIQHY+jaC663iKX20VxAAq4Oid7TEYQm9N+FA4w
0Sx/BZSBaCSqeE8mZdhID21ea1MdMZ6vcMxmXAd7wBTkmVJO6AUJtvqYlgFankjzWIflNylxtBVL
crEODuVtekyvOgtlnBARF0/AYUk1G+em8USFoQy9nCQbOWFG1nv10rzaasfQCntqVlMKOZVlUvVG
sSGVJXpKwV6FpYU+XWBVIytRDUljgUyVKlSbbvdpA6hSYwoaYJ4DG5CctWmm0W8SSncIGRcoSWI+
v2bGJaKoiLneFk0gZevb7JTI9JhhPDOD3HzTwKZkYStOyvEmnlhTJQxbCuRkXCHIGuSuhaQ2KXKw
X2An7let2+1alCH48iDe16MTYo7W84u9Rvb1pZuH48ReY84tqvtBNxsfQMtWGBYrt0C83GLjHYaF
tqrj3LRwgJ9h3BQY0VZzZqDoDroTb3Qm8UEOvtda6q8vkNstB8oMVKZgV23GjSod31Wz9V2VUePV
qbqv7OFnLdWoFCbLPIpUgFez3eEapRTdLxTMEAUzAiJ3jJowY92O1wz+r4XCtMzINZfX/SM6ntKe
0p7SPEjjiAEAsa1igHo6RQKWi44BxZj3MUI146AepttdpJElAKrb7/GeH/cASF9iDH9mSe0ucgUZ
Ts0m6tX8RL69bigGdTLDIDcw0NRsAzFHrA4JfUNGcY5DNGGbQNHCHByJo0/Q35UkC/+tJq0n4NM5
FINabVsS0NssipMdmL9wIV7U0u2SHdxa4XJJy824zkI+WGlXoE7FLdJxju6HKooPFVEsZvRLROr3
qFc/99Bu5m9AS+tJFJ2ZRvdzM7KbNOOJ3VjBGd468ALoF5U60qFh6jT9riPULaBS+rVbdf/VCq8v
XtHwdqEI+v6x1GjOIZhS3tZu1YTfNvEdIaidDs7HSF+9D9JuZnS6UEdtgEWfTJC3SaK9DFwO6Sij
vQl9Ab1HOrECHFG6RAN3pg2ctNOA0GFjN1hKzNQmv1frYGlG+dfQDo2DuY/g2z0sZW/8tV/4ZAfY
nyp2Ej7u54s6KJXl5Ob1hYZ1URmvg/JvbiVAK8yixARQ6W9len2x2xXi9v6s3Qy1TlnbPxi0lwbc
xb9dsttkAxkgzfgqpVe7Uca7FRb9O/m3809Mo86tcL5f8GO3NztATQwV7X1ZP6BfMNvEZyugXUvB
lNKJ3ajTsQfiSpt79Quf7Aa50cQFGs73C97tRH0dgdFWO93a7Q/z3y+cuVeiGwGABNSJHlhenpZA
8WCogBbe7qF/O36CRpPrK6WMj79LOL1/fTl+soM9B/Gt/5z2cQbtNhzWb9UvfL1/2yeFtffm6GNa
3pNblk5uytKa4KZqFY5bMPYgJKo7IYZ20TnlToGMAaGO1ZK1K3MXEDq8222HxhMza+7w1AqX+wUv
o8srdkP8rYV2zXErVHexK5zTZ39q/gIs9WqNFqCI77r5YdLBzBIgHfMW7x0g2+SxoPpTxN/a5r5g
1CYKNjpcs4LVL/ida3i7rtrNqDCgg+wyNdEhOe0XPj9hzj1MW1AadX7P5NcLWeH1JYi5BscldXah
NtOcWf1C0jkazDkbzb1uXtrEXWbMEBpSznqWr/0p13GrQ2jm304u1CaKCA1jw1u/kIEtyyjabO7+
rhu5jIMsYgV5VGoaWHvEoV0KzPG+ADgHO76DQ4jVn048zla8M8gTFheG+V5X0rbQow9RqVIuWcWX
/hTlGDj08erExaLCNd08X66lIRaRCWqchVgrGZxutldQ/QLic8KNxlnVUhAq3qdfgHXHtz31C7ZP
IO6k+NTN4+VBGrLCSPDWL1yxQnngUzebK3Bpph3O94++xlnmWpBP3QK8ro2z3HElx+MslEWo61M3
l5cPaYy5dumrX7jUJqy1y9CU1F4aY46CAukXPj2xKcvJq2i4olsAl0NpNLkt767P5bvuT5McIzV9
6ubwCkAaIyU5MPPfL3y9J15f0HxbAIU0rzvZDZVi5atf+PxENBmcbp4uT9Kg5pzqq184uUfzbefH
EyEoqb00VBYyiDaB7IbYud2sm0vdArucSbMiUDz2C+/3isuBZdgQUjuQMQoxygHrvl94z7N2Lp1e
2ErqWBriPntUqgWae8iYq6H4F55sbuJV0f3B+Lkl9SANlZjZq6uS9D2rnntpAaj0lPaU9pR2VVrs
eJl5I80L5ZE8/mkcvyeZ9++l2tv3URRLgJ6AxI9Jmk9Ys+G1j9nE2HsviL4/XrXzs41It49NH+CE
QHxMsp8kyKx8/Jl8/wXG/BPpiFYr0A0HvuiI/nwrRRLUotb3MQk+Y31PAurtewPkLSvAkkatYr9J
ONoJwIctO8Hb/PF7eDu2+x7tqLJ/4uR7yTS8mSP0rAYGLGn+ra7M16y6Mj+06upwWpc2dV2yauGY
bNq8TnJHozS8bnNH/6y28JR2epEEREQsJ4Mcs1MlSkLrXX0OF6E0Kv5g3b5f1prcuTguAHpuhdFx
vdxgrbiaBBoPdBCjS6DIfi6LmM7cjK0w71eIFWpo1pGQ3nnv1IwvR4ywuETvt1pt7PWl2lzPinTd
SmT+vpL4ZZ0ZUIKNZmhlu2WNs8Zmhuu4r5g8J/PkSTTz2Xhf/fy8KiyB7PeBzun8G5qNvZabPPC4
QaL1vmL7FQuvL3ZoeN/FEXw8EkEY412Fx1JCvlAVe9Se6c0NQUoMZiC/pSEW0t/jkcxoXDP3Pbef
AuqwVg0gWPco/i2O9qJwAdrteI+iwVFkNcoWFVC8ZYkFimzGpqFfOAQ6/xaHLYtpjE7yzvuPi0an
DkjvCE76mw85M080j52cQuA/TpUeg+Oq5fueHpG9qqPzcX0/Bq1ROFg6m3Y2s/Efy2CeKfA1njwa
nYDq+MIbLBBO3IYV3YFmoARbuzm+59G9YJ4hYK7oigghENNNNA/OXPQNTvuJU/9Wj1dZc9eGNRPg
YN7Ipp1CO5DWWQoozuHIpt31E477U3T2wtKcqbLZ73CmnUIdCVRXCRQVX6l9FWvXTwQUN4gieVqm
3TJ9G8uiuSszf5TNev4HFr76Nw+s4eT6VFIzGs3c52aHDvj9waxx1k4aikH+fjoI6iccq3tt/RS2
mmXcGYLNeKSGtxAaL7p9viy7Qk1Ip/4NzdBlzZnNW+v2/TLPlqm492/mboMb6/b5MvvTuuytR0al
/Dw6uPlYBiF26hCx3/0b8me30+3MZfXQUIeo/YrsWf5mjjBup9ulC1lp06rY9Qtn79HuqetBlzdA
CBqzuI8nh6Xs189IC1a375ePOK6qw5hWz7qduUw7XYm//O7fouiNnTd1fdWCOeZ+P6fKafyb4wXM
GyEE9W591MPql1lD8iOe97y6j5hHQnuhCmZWgTjqu8ZI56ZsRqA8XLenNK/S3maMjxdlThmPSUhX
8wh/lDmnP/4uzaS0JjjNuXvrDTSxTqEpamMcMygyHyPRvHXU/BEJmJPRtViMRDGN5nQ1/CeJPjl5
4nhvznxT7xq9X3v0u2+rCebMNSzpSRuhjrPYLdoje/0d6vQp7SntKe0p7SntKe0p7SntKe0p7Snt
Ke0p7SntKe0p7SntKe0p7SntKe0p7SntKe0p7SntKe0pzdFVK03QRiYVULHvmdPQauzXT67dC1ti
aR0G5Fu3K9dT2p8uDWUMJoLNs10CgL8Q/PT72O0p7fHSmJ1iMPGA8+HbbPn7Xez2lBYCabXcGNRa
7s+tsLuXQP5y1OlvYrentBBIIwckyFw9l8fdnkQA7ML9fw+7PaU9Xtp11uCB915JFPA72O0pLQTS
HLAG17zXljW40M3h9aOlrUqymkPnzeSsExvQ3uIU2pvSRPcdAe0DmaG9LAJj7mtLoH25XA49MUO7
glIoYxo3fc+kkS5YO6rRrjO0+yVtoP1cpkS9Bb/TPjJvwDpFnyzN3Bvce/4G81zOqo7u+2iPdraC
ciWwaBd4Fe1NadbNTBqm9ic5/B9RC05Yg1vea88anOvm9AqNNISWHcpYwkbNHf8thJCKYp67Y57B
qqHaF8z80ENzv72/cwQ87ZF1v4/y4n3G3L+K7jNtdJJOKxdFmF+is6j6KBd4dYfe6CDcM23zfJkg
a8EZa3DJex2kFwoN3hxKY/HqtC+gmqkjb7VoI39WQTWzNs++RR4zT/wAvPnLF2177zhfzcHMlYBa
OmGdvozs2jUzb/b1cjPecFinDlmDK957lTU41M3F5VMa6qEb6LznYsXqT8WpuRsZIZJ7P2XuT8bb
ffsFZHfNykuA/DfkRijvbOZrtTllDW5473XWEADevEpDVjD5HG/l2UZ2Wjzx9gP6heTXjMDOWYML
3uswKeFd0Mu0sWqjgvp4GrXjpEMP+sRbyNopOonxa926YA2Oea8j1mCDN4/XN2kWC4BlT/vLY/bE
2+PtZp5/+rXG3bAGp7zXGWs4izdf14c0lBGuZCLWe6bRJ97CZDdzRu9LfbtjDQ55r4tUxjdCLyxv
1cXZtk+8hb6dQtaw+JpVxiVrcMR7HbOGT3gL5DpKQ5n3lOQTb79PO0Ws4VteWbeswQnvdc4aTvAW
0GVJQ+Ue+pjbeuLNj0QWrVZcyDrsw26pryfeu2cNDnivywMQboBeNFIrP/F2l3YqWbOO5qpxrHYg
2dM6LaC17wpa+2bReeJS0sw2CT9bUXJ9VgQCOiOzWJaTG/qgEpwUR5m96yhHIoNGLIaKhNAXEOKB
NVzlva5Yw2lJg7mgNHQa6f76aaR/LN4CaqcHxsTjfer0zOWFNVzjve5Yw2XdvF5vvBdlzL9+vsKf
hbfA2qkZqXP3Ov10eWMNV3ivh2OTbsJ74fh0xzzxdot2mjK71hPw1kpjwGwhFqiD6b1qOQnWQr5l
ouHtEz/3ry/fnuCikDUons7AucB7o1BiueZaR8hDvJQK7ZQbf9/raaIX2pirPfEWeDtF4/7FV39x
rgf3eQ6U/32Uwe5rC3Kf0ad74cv0NZSGfC5Wf+LtFu30G809c2LSb403v/uMTu/pr8aE0tAaW9ac
LXvO9wbdTodfzX1h1PS74i3QdnrmIIwj750W9nsPcQ2/H96CbKdV5Rtr+LPwFmg7/brmfcp7q+kn
3oJspygOf+2INfy+eAuynX5nDW+8FxgV2v3pVr8b3gJtp7AvG32dxreZa/0d8RZoO71w2tdJnMPa
P4J/MN4CbqfctwM4/zC8BdpOz7GGD/Qiy/eevDegdmruq3TMGn5PvAXZTs+zhnf0vp/dmPKJ4J+K
t0DbKWQNs++RiX8U3gJtpzZnhH6K7038oXgLuJ1y3wJX/jC8BdpOL7GGE/TS6qokoV2otdWfiLfg
2imKk/66+G/PGn4/vAXZTi+zhk++1xq5LbzvCvqpeAu6nTpdofhd8RZoO71ysvgHejvwAmjEIXhf
c/uZeAuynTpfofhN8RZoO7VjDV98L7B2ZpbNmvDmg38i3oJrp4g1fN/P8GfhLbB2ap5EcAW8Z+It
UU0IHncJ/TS8BdovTAv7b463Rk9AOW/F1lqxZeb+hq/3ry/XnnBxHzzeolZ8ZRA6wnZ65Yk0wQJi
i87S+Dpx4wS9JoJhTageEPzD8Obj/ls73Vem5anJvq4b3WEteLkQFl5fvOyhsOsX3O+huHTdYReJ
ud/KzGj4O+PNl8Sz7RTtD9QCqwUPF/Pm34LlIR72UFy67pjHzMwCNTFrxtlI7sfhzfP9pXY6Q7uA
ZI6RkrSL7YoB1ek7DwmQ95r7PtztvLS77p2Fz8pdyu4qo8pvibcb9QsZZLcEyqg5TJp7LND3c7R/
sG9mxTafF9HzibVpt2oavTFGYz8V7RXgSuiJGdo7kEIRKNzAzC+Cvp99jV6zrlvwXnOf0V3xdiNp
0LaVuYpqpvtb4i3c/UIaYb6QuFw9H/suA5x/g5whVBl3A5BWQL1jC3mC/ZeR3RNvgbRTaNkY8rnE
DCF276hSTrI1BMZ7zWwNj8fbraQh29bMEx3MfBCZPxZvgbRTEq0VDcxc8xO3NXG61zMo3mvNNIQJ
bzeSZp56UkcnTUxLTasm/gS8+ZWYNPPHmSU9VGo+zP8pW0NAvPc40xBKvN1OGqohc3+9gOItM78X
3nz2C7Cv2iG2hTU6nU6bCagWvuR4CoT3vud4Cj3ebiTNipxAdWWeY1H4kXi7cO+oX0ClJtH9CiH2
8DUDf1C18DVDRBC892N94ufg7abSzNOszLPPHGbt+ZG8FyEWR/dzlLdMtk0A5cxuV67vOZ4C4L0n
6xM/Fm83koYQXH4/tamW+fG8FyHWPF1tMgVGhfoaqROU3c5eZzJD+ua9nzJD/ny83Uga8sF76X0u
P/Zz5t/M8wHz5nyWtI/rZfske0Hb7eS6RV6pz1ENvxHebiUNsYrNV1YRQt6bQnidTs1+Yff49dPz
mSF98t4vUQ0hQciPkGauS5tzFSA8vBfqtDrU41X6I9Q/FHa7kE/aF+/9lk86FCX9QdKsuQrznGJV
ehTvNde7UEzBt8MfAiypP2mX8kn74b3fYyHDUNIfJA2tNZmnxL6+YI/lvSje/AI9eLzdLueT9sF7
z8RCPr6kP0ga8z4XEQ7eCxF8bp724XazOYXCM+89ewrFw0v6M6TBkVu2Gfg4yz/vNRCCc1+q9dF2
szuFwivvPb+D4tElDbu0Il2fUQgtURAM3oKd70Uzet+iZh5rN/tTKLzyXuoQhG72128nDWKkqgeK
t6B47/t93KgwYOW7pBcvl9KOez1979u17qEXJ9E9Mzv7YyFASCilvcdBRM+ftxUK3mveoxN/Pw9n
fp9aeErzJO39NPrQxzm02F3GPM2PDIPdntIeLw3Npa6EW+EteB7yZe7hN6mFpzS30qz99tCfkVcy
RoSH95ojt095Gn58LTyleZHG1ONV9qftr0cniRY2ZTnZfZjdntIeKw2N27emz3WY4zo0vPdwHLmt
SfMU7Dvb7SntodLKzbjOIpbgcpdQqHjv2z2h3s1uT2khkIY4o/JAvAXMQ1CW4x9YC09pLqUhltD0
cXZ3eHjvyT0sU7rVxl5fqo3Kjez2lPZ4aQVU250Q4O1GPOT8ypR/uz2lPVYaqt2OxwzAoee91n0S
+t6DkMh6yHZ62W5BXU9pPqShPYpM6PB2Ax5SJa8axI3dArue0txfVaYef30pBHBmYah570e/kFGD
Ml1o6/SPkYaiFrYhx1vAPARlvwqG/Ya0Tv8UaeaOiHjo8RZovzAt7AfXDrVxeIWyTv8Yaagm8Vbo
8RZcv2DlG2wFYTt0hbFO/xhpqG4PIcdb8P0CEdhhDmGs0z9FGsp+Ol7/BLwF1S9M0W59PSDWgK7Q
1ekfI82M3Q473oLsF8xoybDVwlOapwvV7SzkeAu6X0glw1YLT2leLrRDQluHH2/B9QuQNQhGyGrh
Kc3ThVhD21yfSIYXb8H1C9Hktrwnh/7t9vV6SnuUNOSNCmbdhhBvQfCQXaWVI6qtNsaeRDWErRae
0rxfyAcTTGjwdvbeR79AfI+FDGMtPKV5ulBdz0OFt0B5yLl4hhDWwlOalwvN94psqPAWGA9Bs2Nn
U6CGrhae0jxd1nm8ocHbxXuP/ULqmR/pN5aG6poPFd4C5SHz0ObvfUrzP9+Lzo4XQoW3wHgIYg3N
G9ntKS0E0hBrwMJ9ToofHpK8vHkiTLXwlObpQnVdDxXeAuUhss2utRDVwlOalwuxBiEeKrwFxkMQ
ayjYFT40tfCU5ulCKxRGePB29d5Nv4BObreP3g1LLTylebpgLXOr8OAtUB6C9vzcym5PaY+XhlhD
vxAevDm4d9MvVK7udQ9FLTyleZKG6roVKrwFwkPQCYN0clOW1jey21NaCKShOMG6dZrkb8R74Uit
nL2p3Z7SwiIN1jiX+c14b+LcuYIB2+0p7fHSUAb0bPzxeAuCh6DMVSTqSXIu9lmGohae0jxJ+zgf
sP4IvAXKQ+D4k2/fyW5PaWGRhuaV+Okj8BYQD0E+N418bulCJM5t7PaU9nhpVKfTaZuZIvf3w1ug
PKSwr6jeUzKEoxae0ny8jFVbbQ1hgbwL3gLiIWhuocYxUpL24HMDsdtTWlikQURUrUid8OcxM3ff
wfEm5T+HU8hq4SnN+xWvMo0+wsbrSzSE+XvRzqWC2S9UAku5G8JaeErzfiEEs5Z/S4WJ9+ZQVux8
PbR2e0oLizR0kk6r3UKzEUsTP87OxAyU96KZBAxpIKIj6Osfe9lDbLentJBJqzDAKKNx/WptrQbc
mvcaCLEy/NUKdX729mfY7SktVNLQrNqujs4FMHP1oZxnlejMD++dor10KLKYExFiW3R9VgRnt63f
t6RPaX+GNEZIVHeCyZQRT+6hXH4LFeKxmkT4lNC9UjfzkxcX6IkO8uJTCZ1zXb6xbk9pT2lPaU9p
T2lPaU9pT2lPaU9pT2lPaU9pT2lPaU9pT2lPaU9pT2lPaU9pT2lPaU9pT2lPaU9pN5IW83G9vvh5
+97SjHOFJQGoff8UAOacND8STt+3pJnmpz5JeM+bw3xIiJ5U1vhNwmlKSVinwlHCp5rNWxKinz6k
jhI+g+D4vvQFIUcJyXMSohclnL4PpX2VUAfMdwkfVjgp2fjdjuR7SeGVO9Xv7WLef5k6kfDxuyfB
Jxz4kJb/UPhEwom6H3+K3yXA999/DJX0Q8JJAqQPCeOzEj6+P3n/9eXEOicSPsp2IuHjx04knFRF
8qROxx8Pn0iInbz3gceT3z1B9AlCqBNMf0r59I7oUzyMzyL69eW9VZ2IGH+0iY8ij09a1cmHH62S
/NDtU7tMvn942i6l9w9P2nX0/UMS1el7y06+ffypZUtvH556BvLtw0+ewcJb7asE42jGTxLMH6t9
kWCKZd7ff/dv7xV0KkGyqvXz9VGGk8sq8ElJT8V+9WHG+499E3v6qKkbCc793BvgPl3SuUeP9V77
4snJD+h9E/tFM+ncj72+nKDh43rD5GczHCV8NsPp+ye6eZRw+v4RvQ4knLfCZzu+65Y8p1j0nNjz
NZG0EOJXwun7lm5+JJy+/7Wvt5PwBbxnIIKkGefMex7R0hnFjj+Wj33lIefEnm+XsXPavqH3G+H4
jvOjvt8+REV7+/CTbsa3H3N5/RQ2SJo7q8zNrFZ2YwrQxwYJ/4RXi4Y2Yo3LeeB+FsN/SntKe0p7
SntKe0p7SrMuZqfWaY0sksCo0WNQYQzFYMDX+zSBpI1szu+4hW4/X1o6hUbisVpuApkqtDQTI3kW
Etxv92NQdpYRJ6wlfYg0LjoGtYOdXc17xaCTYSxpSVZX1FRIvL5UdwLKiWPuwEG7x6sM2kNWLaE9
Oh0zV6SEdqUN0X23VdhX5v1dpZWtoufr1o4dM6cOevf1Jd9UVyXJb2NltrDlk68vdpY17wck2DiU
6dtuRoUBHVRKbooyV1S66HRbLovssGxB65BmLvkhuiddZrVwn3clin7RyoFYRrv71mj/YAqgmtpY
eQmaTB+vylkzY9fXoiDf4NQzBIhepoB2e8kVtCdMRlovkNaked7fNhT5atxKgHY2M5hk+qgNWLA/
eobXFye+wanpLtcC0qE9/XxuYujtZnN/IQ8GREvDtK/lG5x6Bu/oRRqUmM+ZEX6g3RzdQy8+s8D7
5hmg3QJiDRfQa2YRNH643b7fn82DgbyyldzCBWu4YDdnF16d9oUfZzfIK3JblM+haE4MsrHagWTh
/2I0Q8ZqBurtKlnrXkpyYGben0Dq3TOgmcZgWINNLZgn3H/Pox0CvJ27T5b35Jbl9lPYxneqBBLI
ClwNtmNmCvEGkuj+9eXrJ6f3jlhDNDoBlbH5PORvZ37jwr2hSAAzp8utDIcIC6kQ2M0RB3h92VuQ
MNQ6lbnaN125d8B7Xdyf8pDSxFz3B1bvJjIPtdvBcX+atpwnKoNkg7/b2c3RG9D7UB+eoTl7vN2u
36PTJfG3FU9YigJzf7vZ3n/wEOR9TpOfIka4v/k4yz8PMUyaZM51gUfYzdEbUchL2NO+DY3z1Yfa
7fo9OvX1bXx6zTfcyG5X7t95yIdvMK+PPNqYCwTfmb+ZPbBTz3Ajuzl646tneEfwDM3Q1KKh5L3Q
e+mSxS2v+4bb2M0pD0Gs4fxhgqhUE4cIvi9/g7WvW5Mr6RUA5S0tgfzBUAFFkiUAxrXP968vXz85
3m+hHa7yuTTBAvzkF6DdzvzG+Xtls6iD2vlxB7pYMz9SibuX3dz2p0NrpHa5ADbX1/HERf7maq7h
7XIxdkaz3OzMzLF+L7u5eCNu9RMQ0es2/Isjke/YoN5vmEQZD1nLv+nmLM5piK27uQYPdnNwfZGG
+ry4inqW6M3t5q8/RZY156iFg0pw0tf85d9nIS/wN5dzDRfs5vZi2li1ZZ5SJ1l2i3oY692Ah5AC
WjvqoTmcNz50vqRuVigCtNuXy4E0K8sdGkeZWe7SrZvY7VJ/mkEI1RhzFc55sc54hvP8zc0KhUu7
uZdGmyuLaC7V9IiEx8zxdjwE+tQx+oXSpNpqY0UHJj1XUncrFNekeb88Svuws+mjM4x//gbxqSEu
/pFP33tJz3mGs7zXE2vwp5tLaWieqONuDeTMeUaa83M7HejmkTVcKWkwujm9rFy6yEpL//wNrfh3
A9LtvGc4w3s9sgY/urmQhvhbNyj+hlZRhCTHSEX/uiHfQDgZ4Za+t5kQoBfZpo2s8pWt+ee9g5OQ
nBCU9CHSzJMXbfiZV96L5iErl1RwqJvf65HSUCwZgxCbYYPnve85/Tnj8SV9iDTE7lf9YMYLl5+I
zhLVg9B7aEnvKw2xr7bk124u5ntV6bewm7PLsls+qBGvE/4Wh2OWwvTuJb23NCtaN0C7OUfw68v4
N4/DR6XuB2u3g/M4B2enJIbRbg6lmWc+OI+ZCjLOoTz4wXZzdqE5m1Sgdjs45G8tdhd36BlCaDeH
0swY5Mes16fIH2w3FxeaWaDvt16PouYRAzyNIr1TSR8iDSF45HAlyDfvNddTH1XSB0gz+zZw1ziH
vUs2Fkq7OZUGy1vV78V7rdiyB5X0AdLe5sbuxHvNuIXHlPQh0pDPxZyfsOqfv52uHvxguzm70Lg/
cT/eC33DwH3EUwjt5lAaKjVlzpsDX3Zzel/9FA/3c+3m4jJX1O7Ae5fmvm8Py+IhtZtDaeap6CaC
697s5uh+GIKSPkwa2hHfyk5uwHuPkdJvicK8XCG2m6s4VfMEVcSdiGB47xrNZhjqxR/8TezmShry
FWg+qzJ0dvryl/uxlQej7y306Ipuv5M0tB+18H4mMDew9lHq6JP1cfcnbPlLhNAEipGqWFsQXNg1
LCV9SntKe0p7SntKe0r7DaWdOXjBTTZg6T07cvQj+XHyLR372Pze6vo5eHcMOi5Q76m+4ffGm260
mZ7+7Ym3/NzwiZNYZZNAsNbT6PrIQWztSDGskppPMB9PVD6eSL5LsJIpmN9bcxZjswzWD/VRGY52
Y8xSmh9Hj4n84cNWKYGZ+z9v/Um9WQEV3fo+idJSW99L8Ht0KgF6gvxIIW2856hGRnkz4UeOa/D+
KPlRX5L56EcOcOb9tc9PfPn+RILx7Rfec86PLz1x8Xvp/fv3MiBp5Edm8uRHJm7jI6W28S1n94Xr
fC7rf8coWeG1/T+vLxF4/TtW09SlqOnvH7zdRxR+If7nV4WXlYqobJq6Ji9/HR+CjzXEsaiJiiAe
n1vAZ9boGexXJOZcuCbJyq9/Mn9FyL8i6N+rr1Thv7/+QVplVW1x9fGmzmt6TV3LuqzCH6JFRRe1
pqCJonL13Za409FPreErkfYa/kNrIo8ERVqqOv/+PruF4o8vl1V+9KHnf9Htv2PmA29Pc8OpKOgR
fb9Eeu7hryz+7srKSDXWf6N31n8jBSh191fk3Ld/RTqitobK/Cf5dxz9568IvZnrG038jyJudI2f
/xWpbYZzWSiJ+5Y6E5X/DNNpPiWkCCyTSIpxMvPrqKugKmt1Lv6KCBN5PoK1+p9ftKromjpfn9T4
F+tQvDCj1bmq/fqnoPCCLm9FStVGovbNLt/fpTfaGr3IiGMe6uzgjSzUB5pTFjR1rY71SJNX1pGm
qMnjvyLpv1NLJzLKqsBbMMCJvyJYnEg6eOkNovCN43+dvAQLJc9lBSK1pW1EB29YsD5WhIPnGyI/
4pT53vEPQMyr8znFa7BKKVWfOHlFPkCdsDiWhNbCvzfNMy2GHxaUkbiDb+HnHj9tIAjc9IRXJHH0
XvD/nnz4pbXErObivPFQG11XlZu3naH5M+xO1t01nw8wElgc2Td+MzRa2PpQ1HnVE/hfkaSTnzip
eCfFsDzr/8cvlv+/Q4Wg+6XVxRKabDgX0esNEf6eJiuS4xYARXTk9YafN/X9XDxxX5feP0UrDbEw
OzXif81PfhRIzd5LRB2ZV6hiqfT9oPqhrmPA4pgHwCbcAdZSK+JQr1Dh9sOiwaAXGvGInpsjWOeH
gvVTmFfwok4/dWPknqjpBLTiHFpYHB2RGHfbJ8fj7qB+FumOqrnGS+I96ngJf6cp6jpsH2v7erar
aTiWSJ4zpseqtqnsU30dvWnVXyaDhjupc5TKbf1d8lWutHLrYhzBJqepm+U9hi8S+qGhurviGewx
kzJZGHEeNp6Bcwk67yo7fKvGj0Zmn+H69yzAJQnkL8hz3s8eck5/Br7R1NXlr3+y/Hx9HjKXkFpQ
xhAQZjU4fM9Dp+oQs2V+KN6+M5ujX4He+zpev5cdbHTVqlObktpyODwD3eO54dlVpMdN5F1qIpew
/lZax69ZxUtBF5m41D7sIJt2/o6JPwxVpuN3vGLvM7lyDkhZmd0JlPCXzKqiNH7U3fP6lQGtI5yR
57u42+DsWwFcIg5LEh4hd8mv2vhJV63XAioqV8RdwTyi9etcJrSsOWBAUzXfzfzfk+8/Dyl+HPZz
sp7fDKFNkG4+8Q/hjyWcI+MN/1jCbADm/3ltAZ+K4bYVpJMeW8F5ehp0K7DKFnFbuFu2hE/mvllr
uB81gRxjol6ZJDpvZf/sxFun4afRfJTYZUshMY8NxcU7JuQt7f43tBzlfsg8SnsYND3wZr/QPBbZ
JTYzXrHpXEcLm0f1HgHOcx+FcFoCzwI/ExNY6gHzElDne81MkAlvMxOp289McOOxLIiRBJGKmCu6
/8rygq5qEeSPYbcuC24mLVDIQEte/opA0QjxI/gRhPuvyFJTtzJsAf/5pcNHdBRB8U9zKQryeB+R
x5G9utEiJ5rk5uqQn0fAaCErEU1cbWRNXEcqWRApq7DqHz6F0uBHsnqndS0N/dZxTU7hYUkqTtqa
bWuDaMx4GrTag/9SgztXApeuHsehh0g619kTD/FB2K1yRdwU7LFtJcjBw3dBLifavdOyBzVERl4H
1hITj2mJH0W4W1N0Qbt8NMVjwZ5tMcC2+ENYKGCuB35caZAQ2xfns27EQy2t70pFzwYw2TdeF294
paLADLCMMLDRIAq6fzjNoyeiMLtLcCr6IQgFK3jFssObGX5WD2NXEpcdTdIMdLpxR2MC7xju9BV/
l+KfLohy04ccf5FXfP7oQzuKL/PGZmsRRx/xrjZQ+O/nhx3OIf+QbsgiBJAP+O2NzHiNe3dHn7S/
a+iGh17p0nLMTSZI3E6C7Bbz/10veQF+toQ8UNS2okPvoCpjWYIQRA7ihF6iGnl9+fO6RcG0hwpN
sHHUosLYIX4ug8uuMJFM37cr/AI6953gfbH/MzvGz5AIqEv8/kHogl+vxjCGJer1/Nyh184v0DBZ
Z0Y4P6663KTvEjP7kIh6VOSjurJ4Nez6WgdydueXDxTa4PCs/k7J1fXYextgpjMQmI5L+gHNS91U
+BxRTlRE+Jo/QnHZJfkCxBXXdFTd8cvOGfpFPBAQ+OTZ/aTXEOGWhLgtnMc++joea7xyh6iPJfoV
B4H954p+Uli0g53iL3O1My+be5lNo8GRkbwTRwnGxetfSLUNq/bVDi61BMtsLl474jgBWyx+cTHe
Hsm2WoZns/uCX0MmqcNfgzRzya/XBqxpZwCzq+YEGqZn7CxnHyKEJvRsu0+76j5bJldyjjH3qP4T
7jQ4WU6+7MvOvQg9k1XVtaPCkN1f80umnIu7yM+a4fKe8hOR55ZYHeL2vlt45yLvaJBvD1YSIQ2/
vFHCDqyOvNIloJ6UwgM8MbQEdXZ7rxN4Zty9Zw35XWvqeXB9QZiHztuUdHkTMCrSuf2/Jy/7aA53
DAZ9a+HmXIG2WIjrNWR/XluHw/jQc6+e9AJoVho/myvj8uuuIkXPCbDalo1NPLQ1VA6XLea9peGX
poPPv+ijyfhB6r0Ix7E/oq0aqQXLOLALsyNOsOaLcpwv1f05hx3JteMK5/W/NVm4o3cMCG8+3CIs
lnjsr7KyJg41s8vx5FcxDAVBe2fXft2qf5jjcfv9rOfePPGol/dWnX3RJC//c9Q68qb25SD9c0Ie
5Jbvyqet2RRdDM4rI6Qm3OEsQGb9tTxegJpK+iDZ7sYUp1NauhjxpHXoCffXOrkd974zo3krECxg
QGzGZrvsubeDJjMnBXIl5GoyvsuvHmM8EnEfHMh2bvFnkJXfiKXE3VVjkCzFh9fHcNwHPcG8zK38
T1hoyaWPQ9VCuqK5/OdtJcRx87Bfxkhn3KxEuES2Da6PZXe9nIFh6SugtoG0HZM5D2ioZgStP9rh
ObhYnJ8AWrbCy46WkG8HWVtKcTvImiV3DVgUVuAVr26a5nFj3r+Qkk+0vqG1Jc7F5URVxOpmMXQW
S3kz3BJpOxpxO9x+sYFrBF+f5rCBsN208XkIv6sbsfQNOZjvPEDzxRlOhmZ4GvX9bhDlemRmOy7z
2v+nMteGVTZgtAnm+Sn1zy48d79fa992Seu2tW+W4r51b5PJ6qfU/btnDKT+CcIr8/df/+8luS8G
bDL9/AQyY20PeByHSaEAE7tVi9txGKvo7sl3wjtzcfXaydapkPOVO+KVEdeCJi91h9m9bka8cdso
ttuB9qT87uc5cB+k242+xywSH6qGHL937nNVHz735JyCTAb5zsfRbdWb/ySwa4Ecl1F4eeT3Yyrf
twP7ioC4mxnIYBHgxxn5gcEtxlx37MOysrbWTUM+lHY9ZsbzvfAeuq+U9+7Lde9l6hlBit6l8zof
GfDZYnYRAT/H/8nr5Zzfe4f/F/+HJb2OHgLwfx9luav/sy3xtVDGE6WvhzH+GFj59KlfQfW4aSzv
/jFBeEeUrTO/hqgPB3VDPN1zjOnXRXnuoV0GmdgPUTHb6LwbDlF9eEWMsD9VwA7D7lc2/+eo6v26
+R/jTwuKrMv83ME2f3sgplFuhvu60wq/K4uKpE/cQeKTF34rvodYkoz3uWQ/TvhN49/EB5f5Rw+R
zK36D3Ggb2X3MELyPjftflEdqfkTPOcdUevPawaAWiJjzk0/BLaefaaPcCY3Y7+3YwQtLUMO2jt3
9/7c7ZfRE/m4OWnPrtPPcNz2rWv99pvGHvttr1nf75wmCAiCulF8HpX2mDRBR9Udv+w71Y/zs4Pe
cpO5U/B3SPWD//RUP3jKSyftN9WPG//2luoH7fBP34BThjBJ6rElFdbHAxAC2OeJ9stgtvshfNb2
pfq+WCZXso4n2JGEbe5UexR42fRz1DoiryMjL3qHYrenn011d8f+2y6rqrgVNXa3RMduBAT/xAPh
f65Yd28BLt8zW8Cb4hEFaR4RPaj+bARuGwFKEUrziqIemTiqhGAaQfqBbeBcqe7eBrzs+EeKRwRT
c1gJSPWIp6x1z4bgpSFUNusTwBhqQL3BgxvC11LdvSG4TJnx0RAWUPOvzSDC67CD2OmRuSrZBmH9
rEbxY+bNmvzCxdSGXdtIxdOwcaS9BmX5XSnD3U/6fjOB68FlEiNCFQN4Z/C0a1VGXfCyx0DQk1Z2
fKksSxPd/MfTvAQKD78zAj8h6d0eLgQ4zqlyAYGJxA2isH7EWhXqU8qo10B1sNRE9GOPC3eh5rzH
UBcTtQ/avn/Ohu7jtjLEHde/TCphsgXz48j/gWr/6wi0CB6Px/9vyFfG4O8N1btwYfRDKGDS9Eke
13QZeMuohnKcNn67LctrNz4aFY3XdWhW65TkkY8lYpNoXDwo3q69+Jh9/mJLj0zBW8L5W+zQvDdT
OPUzvtdoSY/1H1Avf1qWu3bYvuKrPqn9mwRZfSoTZF8/NdoV9xNjGCADgCZ0DWjcR8Sr+z2Z//Ol
+//fyP+BSv/fh/X4PyV8YQQbhbOp4NCFL1iqO375oaccXW4GF5YJXRbuZqEPd3TaHk85CiC48F9Y
AsIh9aCUU+6PKSJ8pElz71pdK/l7h8IO5GVNXev8nFZHj4vixmHnmoo/JlXDJwu4j+VOe9/tahdx
cR68UNeYpWwEaRvyKYA7j74O8lLwDOLTDEkQS8nM47brH8vh3o/Gcc9jLpsDl39K9cNWoQdU+Q/c
V2qW4q5VfxnoP6IDayKDLdHx2soDE2ShDiz5oFQNnyzgvgNLeadf7rdymrrG3pQNef91RxQLsr5/
KHgTtoEStwMvKrhrzKbuuX+OhhqGHKh37mm9g/VLR5tIuqmOYDtaT8Dz08/+BpEQNQ7+WCA1j3ue
nfAbQWMzt3cFMWbp7wqZHx664AMuAfVq3mHmr1fzBhUs7n0uwRXArMj1v7m/I1DNZ9926uKauiaK
vqMErd7trou3FVhueS4r7pvMJydnld8NdAVonDnFa9BAsDJ0WeDdp/c2nSTuqryOViN+gpf0g7ig
yP9jZl7dY83KQ+DdS7pfLrB0fJyP/CErrzlN3Sx/5MKrpfn91k5dvGMC0KV+v8PSaW0u8rARod0g
YD53Dq2b+EeUgzXxmLmRc3Zw37Umrh0F6DES6zypNFWOmDt5Ivx8HpFMrSN7dRMxeEVHf2iRDYpu
0dXIUIzwkYWIjvqJqONw81CzGsQRigi92w4vcTSHPwdZmZ82YCrOKcdUte5jvwKLaDUPcHvAsto5
U7puRpkEOjcn4SaQu6lqugeDeWMrfyTr4DSJV+QD7zRLe9i4x6n+92MgNtn5z/p0T1rejIfceT7A
bFSK/+nuOPJdmUdNetrg5Mp8wLH8Hkb03hNs3uL4iDvSV1+QCYCxolRAWOYxlNUrXDB02LZHlupq
u4m1pGdp+Zz5PPV0jLjkNX0h+t8jbTk7zycvBXHgyVtR7uq3fvhyjV8ABOW6XJ19HOSRXZ5Bg/kY
Y7tfuPlQ9OnATh3YVB3qsj73HwMYT7jcxBis93orx1191w9fRCmqw5b3ug/Ic7kKLQjOcb2V3cN6
c/yOKylQzYip53Mx5cq0BizSWHaG5bDNaBxVv99khg3nOj9B7VLBm81jmPOQ9+gdzRl42K14zMV7
Mn+bRqfReZnC8JGR4F17F2+62Rt5EZJY3G2+Eo/rJvywqavLX/9k+fna1Tyxiee8uhAjWXUOneK9
DsALVcfPaPJWLIu6LmpeE9857v2vLRPazrL5ZgD2g5cPM7gS8TZ+uTb7Yod2L5nyTH0jlsJ2uA0W
uT5SO955LDOBzXoka1ApVXM4k2jLTjO4L3g6GtRcGdZ8KpIHkCbJa4G03uaU/eHijq6u5Tm1ZyAe
LoHOdSXc5YcN0sW1vOQATfpxbHaLvZccW0v9Ee7s/tm5/PfT3nJ0BRHT8F1GAdrsrNLwUfTdZ9s3
dVShf0UWa0HV5vIwCPv+8+8Y+qGHqsD8bwiUYMOgRDYMSuTCoEQ+DEoUwqBEMQxKlMKgRDkMSlTC
oEQ1DEpwYVCiFgYl6mFQohEGJZphUKIVBiXaYVCiEwYlumFQohcGJfphUGJwWQmvk5YEGtK7Gx4H
c9LH91Ghl2lLNC1lO0XvOfAi6PMu7r7ag7ZYLJ2vI15b93EVVRDgss9JMR6yAOQqjNLj6ri/BSAz
U+xxVTM8K0B3ni43M+WuBU1eOoxds8M7nsygmW53E5VBz5aflMiDZyTQXK3nuXLbTS4/Zw3l6Dcg
xCcBgSL52BWUkwLdHRMeesuwrZ+Y+b+bvpxEYEvFGO7tfLUgFlJO7OCFdPlaUnH5ntnDmfpGLIV/
xOLKPbdKWy6h5sPHBYbplPce0y+kT8zgBdL4tRSIXrnelSi0CHLlj4b0T46U5HU40B5udGdnIIct
WPJD+/vFSzpX9Zi6372Ov0UKCk3d7Y/HFjg9YPtGUeW4m2jCAJNPfLKA+9jytPe0su6iLt8c6om2
z30xX8ZBuz3v/GgU+0AyzMcZPo9MbHZqBddoTqETNXCP0cA2SSOc9r3fPvr+Qej6Zm48lgUxQaSu
Yc5Lt+yxS7btjt8VdvSq0znGCz14BpYtkzrfkNwOn867RKs4EVieCJojdPSm+647jHPfVRWMmntF
uO7sbAY05hbmSw3eMyO0n+1+U9zhy86nuS+AMI1oZNzpS9cnCD1NbZ9Hb1WNAMaFLTx2487c5hE8
9/CcgvVTjjbr2KPXJmnZLQY0b4o7H8qIc2h5cXR1GH0BvEnoQdMpF+MZJyeNhq8Xhf47JyoifNUv
d7Mf5N5kGe97Ie69iod25qfjd1jFs5I1ui6kt8GyI6RSG11XlZsDdWj+DASkAvVpqY5p3yWLuDxu
1HbRBh2he7ETDwD1l3B/ySYeJifxtPupVYcH5F1C8f8cFUcpGj9Y5L2mKYNrI5HPxwUfMyBeqpv/
mt+fPyb4x6wHIE8LW81aN3H40BWBxJWJgtuuCHwyhKc1gWtZpu2and3JfpdanaltBKn76BWBMPYu
yz2n1DRxgYay/lfzU2hi9aE9w2l5PMAzkYr76RW8LMMinSMfywGRrKYu4Bjt8uTCDQB7r77htHZu
1y/cfRMecopl2Nspjtc0vhs8TLvwTpheypyg9bYCHUgo66ltPUXnJH3Esrrcqaqq85a8/BWBbQ81
vRH8CJr+V2SJzuWDTRGOPuEjurzEULM/wwXR3UheL+f8PjI/FvrvSFeezyOqMt9/+y5iyPokwusR
lB5cj2ARfsvLc1TtSBK/XsvS5dSyZhFOG+unmQN6wisSQs+5ivjvuUdv0ZTvvKQTCM370np8kLUg
gtv8EjarAXkNb7viOE7Rh6r6HXTnlP/vyRO3wFqNV+4wnFiiX0l4xdZJR1wRlQ3Fu6MIlKpBN3Ts
YrLyThwlGB/jkITtBNCNOgbLgB6QTKJkHTjptS+48l54fNmCX8/E0bEFqbAFLWFHYMCadwo624Vq
tGJre4i3XcW7cGqXqv9i6VxKOy5A49dSO9qDwh7/dh7uYjmcuDkbRxe+QSZy4jQkKI7Hl3b4S6MB
Gm7f/H07HvtB5nt5PCEOQyGdSbe/7+RY8QtvWoNMD/r6Gk8GOaK0G1O+V4b9cNJvg7njVGMwHtvF
XKP9TD/qM68E1Qcw42g75+jbyyOXYT91aLusaT9FH/REjC+c3nm8hGpGUJWxrC0CJxnYhSgeZ6jz
yTIul+8hNOMqeK8NpM4U5B48484rNGhXa2Bw9OVBXS+2Xl3yuZJl8NY++IJ5PbUGPE5eXQOydchu
6d/H8ivSPVI7Km+/HhQqv353wp4TlSA9OkKfZxYRGGs/KZQ34KaSvri7WyJxGvyii++4/V15/En1
3JbNP4AlvRVMEh2dqHfe9F8Y0pVlmXsRpJOiuRTVEPkRp8z3nnB4XLDNXN99bdckr8xA/jT289vR
nrgfjAdHe3x1Gxh+7Rijc++ehBW4HrtafCdcPOcHRXodlzkfHueF256Le/tAr6MdPKy1ZK4j3obf
u0uGfcxmYOnqLsbL1Yo9d5sV+OAa309qYXxIQikz3rK0BdbCeB+RlAk/CUO8JGFH2v6cSMoHxI74
hfWX0BHy8aEjPgDqL3LkCrCdRI686X7rwJEHAI2xuqEAsXZtuv0GYDs5SBu32XDmCKcnBrk7VK+8
5wSqJ+rfGq137ukDQKqPzj7ATU/WLPxj6YI/lGNE0g9jcBk4ZY1BjxqHgjX4yCxy/82pQBDUjf8z
wx+7OfVYCBciHr451VVqHSuVk+tC3nBz6t33PlSy4HfY8hCCg4eOyRweng/dsl2wGdETSTPr8wM2
hp3g1FOX6ScVun1io5/B4cw0UVkenS4IedgEslHZQQKY85YJZtYGZZG+EoFsg6S4iSTPLOycOTzg
Cif9UDGX08JWN2Vq/i9L9ci77qZRH03MwtmzmYRbXfCy8ptt6kvFkS91l3gg8D19R8t6aDuJjPst
fU1V0z1ZzSEx/Bm+HMxlfs1WeHnuMgXnDV15wuVqT5BD6jP28OLLk2k/vtzlrJM15ECKR9h/IdUj
jtJzhsaNPyL25iRFpXfEfyGzCfzuhxY4z9jpJGrnk1E8wD5FmM3PXTfibDvdD8IX6srYxYcHCQhd
+P1n479NqZ8Wyys+bnJWShDr+JD8ilqEj2z5+UaMyOPIXt1EDF7RI7IeGcnjsaihWfsxSsYBqXKk
Xav+/P7f7OpQ8QvjvrrpwtIWHnxkRwaFBT9uTv2cQTxAPe3n6I4rO5POEwCzbXqMddkt5v+7XvIC
/GwJ27aobUUPDYf9F1LhTPtBrQWFzK2hDHnBa/AV61FdjQzFk7alT3gFPS1rkeNhW7IiyEt+bi4W
vL78BDbzkEGpOd2s7QV15HlJ7WTO2dLYlbHDNKwNwcQtYEIwawvYMCiRDYMSuTAoUQiDEuUwKFEJ
gxJcGJSoh0GJRhiUaIZBiVYYlGiHQYluGJTohUGJQQiUoEAYlKDCoEQYmBUVBmZFhYFZUWFgVlQ+
DEqEgd5RxTAoEQaOSYWBY1LVMCgRBqJLhYHoUmEgulQYiC4VBqJLdcKgRBiILtUPgxJhILp0GIgu
TYdBiTAQXToMHJMOA8ekw8Ax6TBwTLoUBiXCwDHpMHBMOgwckw4Dx6TDQO/o/9fetfa0rWzRvzLi
41VvmwcQuKqQIIFAiYMvDlSnXyrjDOBbx45sh8L59WeP7QBJbMczdpIVbqWjHvIYz94z+7H2mkcQ
2Ls2ArJqIyCrNgKF2EaAd20EeNdBIM46CCRJByGLdhASWAchd3QQvOMUoe44RXDRUwTIf4oA+U8R
QM0pAmd1isBZnSFUYGcICewMIYGdISSwM4QEdoYQJ7oI7F0XYZm6i8DedRFSeReBQuwi4IkuAp7o
IiSwLgJ710XIHV0E9q6rIwiBsELchciiCGi7i4C2uwhkaheBx+wiUIjnCJD/HCFsnyOE7XOEYHWO
ECfOEeLEBQLkv0CA/BcI8O4CIU5cIMSJCwR+4gIB3l0gRMwLBHh3gRC2vyEEq28IceIbgot+QygD
LxFs4hKBLrpEoIsuEeiiSwQXvURI5ZcQLoqQRS8RqvJLhKr8EmHrQg9h5aeHsPLTQ9jE0UMI2z0E
uqiHEKx6CJC/hwD5ewhMTQ9he2wPIXdoCGFbQ4iYGgJ7pyEUPxrCgr2GUIFpCBWYhpBFNQRGV0Mo
AzWEMlBDoIs0hFpUQ6CVNQSMqSFgTA0BY2oIGFNDwJgaAkmiIRzB0iDQNgJT00eA/H0EyN9HQNt9
BLTdR0DbfQTOqo8AdPsI8K6PAO/6CMiqj4An+gi54wqhAtMREpiOkDt0hNyhI+QOHYGp0RGYGh0h
gekQcQKBqdEREpiOQA3oCNSAjlAQ6wi16H8Rsug1Qha9RkDb1wgueo0AdK8RXNRA8A4DYTuLgcDU
GAiLswZCsDIQ0LaBgLYNBLrIQLiJw0CoOwyEusNAqDsMhLrDQAA1BkLxYyAgKwOh+DEQliQNhNVA
A6ECMxAY3QECvBsgwLsBApk6QIB3AwR4N0BAVgMEZDVAQFYDBGQ1QEBWAwRkNUBAVgMEUDNAADUD
BM5qgIAnbhCIsxuELHqDEDFvEIqfGwS0fYPgHbcI3nGLAPlvEcjUW4Q4cYvAY94iIKtbhOWn7whl
4HeEsP0Xgov+hYAxfyCE7R8IeOJHNtD9+kX3vTH3w5e0D6efMdcckYw9zzJDkmXnqLlLgtSbDanm
muk/2NR4/xNL/pNq3qd/d44sb3Tn3XnPV839PcubuKH/YnlDLvUkw/6bnlTfb3xizV25lp4f8iGh
dn8i1+XAvLtwh/x552jJmJ0+cTec9sYdblF/Ucv2o+k+iL4zRuBn2re/fomet9DR1y9Xd/+jby9+
EL8/a5TfbXfo/Q4+n3n+KPjcM+84WV3aZ1VYa6K7I3ppx+q1Sb0dZj3aztCnJjttj971nGCnwMAf
T0Ivnm/pOSOVeNtzPH/n6Mz2+Z1vW78U/aV+KNxlT8ld6s1PLPI2+p+Cw8wPpLKn1FUNviXXkD+H
O0f/SiRmQuT/SD3gJqBZG41p5O8cLp52zUkQEVaX2kAZt9BNdw1uMRa97Ko6w4lp/UosWuPu5MT0
pUb2xPNpII3wxeHCJZ75sNlRdQiy5t2WnGVUkj/iAVRwgsNa6xNr1OSavnnBEt9fbl/tR279OvGe
V25iluiI8suJ45G1+JRyClpb3nw3GiKC5U9Y6RnPxAzzGkk+JTaAg9Ye2eyBZNs3C5BuGQXCYyvK
8cwO2NAOTAppstKXiIcZj7u1g4npRHHgXURZnl+zoium/Qt8pZtB8JuiXp8/cf/0eUwwIKjKHVob
9oYs/TbiHPmZIMs5puIzV8jPuJICf/xDzT88sp9JwP3RJAitqNwYJ9NRWcLYsIdka7gRH5FVJvYR
skefCQ1YrAKb6sBMqjPpK8zxHjz3wzlNGSwvFFqHK4XUTxKJb/S+KqqfLTP31UC1AOT1Rlxm1mV5
necedx/CR3pKvamAyWeHQQGb7zbJ1yXZqDe/WlJVv2dkhGG8EjGzYv9899mW0y6RRhQ2dPJnyx6b
TjRN203AkFk35Gq3KvmX1BFVMPSG8HB1JkayeI2ZmAW5N03HZL1dIK6bd7r5wFcf1827MfUjZv14
SC4TFCwasu33gJBDnvWVQkIZUXlBCYlHJJxJU9Q5tTzIo0aUZ9TK0mKq4g6seF2vbSA4v4Pq+wLW
bo7crsu1TDhtAcbVI6kk1ojM84c9/qJ7QWg628NqrxkJi4rrb3tcHgk3WzVhlGoLlCWw8AygTbRR
sM69xkEJQJuHwbfMGMhbQmXoOW8ONblAsQpziPRZu0HkptLtqEnq9c3nuJpccVtpjpPLVEmO2ytT
LdQPFXKcIez7y9j3nqhg2I4Ut04jbmzciJsNOXuo1Ijl4lcS+ZplbDifbU234bYdvmyF5W4gH1s0
NhWl46bk5KwiHQt11p6N84x5i8zhKoIzPudhRQaxt3a0rtEI2I7tqoTVBeo6Hgs5a7JoqJwT06fh
oukJbct0VM2xIal7Mf57WxKr8paoyhJrCestnVdV9jOV4j8kl3mm2FA4yKYz61axx13fm4y3nDyO
dVgvd5zLgKQap2baDpMWdeB5zkDwVfQMYZhDeouscodFFRAZKs0mfSW0x3WyV48FnDPTmXbELM91
I6Pz2NX9vW1xRuPFbJeFj5x1ucvJbBgN5edpAztgrhcy84mkFXvB2L3ns+POv40XqraGjLtPtu+5
I+6GClrEAwEr5Qq5+nUhp9e1QBm/XhyJmX24fc9VTVvSW2hL7sAtD7fmBlBlG6/ItPuS6WvlUCna
vMWHPTtYix1acXcOdUfgtXNhDK6vRDn0UMosIyWu3DZJ8EtttX9khiGl9lM32udaCpKRcbY2VF/m
j66qze4dyqlTwVElSXS4lbnwD+R8BzkDbk18O3zZdtg5q8d6oaeM0EldlEgrDz8/CiQyFOxudbCo
XttOXGQUtfp8bKTKCXxIbCSwZjXWCYWOhIm3NrQ5YtkAf1iA9H8MLKKtD49m4cOEiKDiTYf1Aoo8
cjcDUERSMkFpkYflHohaI6KIvHsdETyqs0jxZgUHKiiutNR2NpY6pfyqglRb3RwOo2ii2Pf0oDM1
PFRlSKTbGaE33jk6M51AMgon2DnKiWur8NAWvsTy1cgcj4XsyqfuJNbA8pxlr9VYEpzT2r/zl1pk
s7IPeIeA342G5EOSDVO7B0sXxfKMPz9SZNnwO6nzF8eqtuRy503FNTRrAeTJfTdx7h3FSc2Mx0zd
5jv0suP9dpNycfpSVBmSc6CCzBefIu5nyhCdre8y0kjuzPuq1idIkg6yb85SjVEtgcSasqfNqzpX
nGPJavGqwBVWqtAytaUMxfsurLHftuOwWNNok4vzwgirRNRuMgzMi5lecd46YFeT0PG8X8y+F2++
sEfziUcfk435IjCRVCM7EGb2IUMc/f2m4Z8gV21smZAtHltWdFIMINYZ5EnsGEgW8sQT/mg696sI
wPW9GlAAnvEzpRC8K6i0EiE4v14qGYL1V93Yizdhv003FH/4LLoUIvTiuJpEXgnWIBKs+E2F6cMt
dWFh2VC+xpJMryBwV1SRCZ52V9bCqizI9HLOVY9OLKjXY/n0dFY99iY0Rjm2DXvCo9mewbXFL8pa
WMd7Yx1jcaXIncpWAZvbuQo4NwmqBOCe5K2dH3sZsCLLxloDFAt4B+qnwSpcBKzIZncPJW8C+LMC
uN67UEKqWe4mYVEHQlwFnNVjvSuBefRyBrWsIunHuBTlnIqhM98bdR3vznTiq2E2e0hI/sxglYeE
0sZDIdA2a8uXSHKqXZW7wIXk7J5EZ7HsLLnnhy3lsVYffzF5RBGkxKiJQese91TNXpU+XAVuyaEO
QVZHMNZGVLfLix/0aMjd+FD573m8M1mFyNTYO5D+PY9SZUvq2ylvpr0FuF3muCN2zi+PFUsqiqwM
p2w9+TtkYqkLNi2+QSYDvbVIw8wiQ75KUNoOk4H0ZMZBMQ8i3kJ9PXE7ti90P74PuS+I7XaRfJeD
08SaanY4KBEFc0rhDE0KP2paXRzm3jCtEv7SzY2EZYm0LBI3XlJo+zwaxeJPk19Rni4g+ySCye6j
1bzI+D+TRPEvJIh145E3nDh8ekro3pvEK1vhI70TxLZZWEpl3FhNaTWz1JLwYG+LLDnm83P2y2mL
K0Xy1dwb8y+XRwXxYzMCC41XHhZG1FMgelpyXdgCvBxRbW+QYdGcJoVOI6NcW4pMU4DgHPVCFh0N
hxgX8eXVDcvsXF/ze04DYvFE9HubzHlemB32ZcYY5oDm9mjHh3Yop12B2X7LE7X0Yjw9yL/ZZYEm
rzAl+pWkqPRPg7UZa2a1/RZ9v0iD/I1A6YE/R5GZuDD7ogAduT6ryTX+qS4ZpfCcs4M6w4IrDO0g
OV8rKKD4fC0VXLneMe8bhVU1+Nj0zdDzN6OrwAuRhQZTOeqVqLXZGQzMJ97zHo6D1czZZpXzecBD
0dNHVI4/L0lDM3otRtXUfJIavJa2jTPEvrhRcbFKSY/3Z9TR3FfxQ3v6kOcOaGqTggO6WxN3aS2W
Xekjeko9LX51BuLH68OpIv2MPnyP5LdgOlKB2MfMtJY3fjl2HArVA4+manznmf7wI4Y1y+GmH6lZ
cWhLtZaioW1fIrSdDhccUcWXBmsoa185kGRsId28oOnnTn6xZxS0huZeQyIut6lrRh2LfbGvXRcK
1MWE3sbIne3k+bOY1Ww1Eyd6EzNXbLKyZNvG+ckBzrkTlN1uJZDnWnTHRH+Fpihbum2co8K1d+6M
FX3KSuav89p5vA/j7YKuQvNZVPYKZ3cNHEQO3ZA7kykNCk9aY3F5Cd8BcqiLDHUjNv7YsR/cnSPN
Hg4d3uP3KUVT6vhmd7cS3zDEERoBG0SlHJ3jKuAR2TLm+sD0z+DoH4Au3znOpgQA</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text

						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}



]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>