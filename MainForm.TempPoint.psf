<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
TkSuQmCC</Preview>
  <Form>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
hUWHP7Vf/w/PEI5qPL0CAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 30
						Add-Logs -text 'LOG: 30 seconds reamining'
						Start-Sleep -Seconds 25
						Add-Logs -text 'LOG: 10 seconds reamining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
								Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
								Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 30
						Add-Logs -text 'LOG: 30 seconds reamining'
						Start-Sleep -Seconds 25
						Add-Logs -text 'LOG: 10 seconds reamining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
								Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
								Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>