<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAMTxSURBVHhe7P13VFXbmu6N1ndbu63de8/Xzv2+
P+rWOXVOnapdVXvXrr3PWnuFvfbKQdcy54AIiGRBUFFBATMqqKCYxQyCIjnnnHPOOecMEyaZ5/Y+
5pyKMF1LEJDw/myPjNHnCH2M2cd4n97fMef8O4IgCIIgCIIgCIIgCIIgCIIgCIIgCIIgiAWM6Z/+
9Eevy1Y2Xrfv3PeyuXmPRCKRlrVuzIPmaz9c87Gve7aPvIyNj3v9l//y//GSxhZiofOHP/whzMU7
BHk1Xcir7kRuVQeJRCItW+XVdCK7sh2ZZa3ILG+bA7Uiq6IN+eyem8vuuXxe/nKzIHYM/Jj4vrIr
5vaYcth+Cmo7cfrcBUjDC7HQuWx1zaugtgfRWZWIzqxgf0kkEml5Kia7EsGJhXAPToFXWDo8Q+dC
acL2A+Py4BOZBY+QNDnLzJbS4BWegaD4AmGf8pd5f/FzxbcfllqGlLwKMgCLhXu2D72K6nsRm12F
uByJEvJrkVbagtSSZsTnVr8qJ5FIpKWsRHbv843KRmhiAeJyq9h9sXJOFJVWAregVPhGZiJhDveT
mF8Df3Y8roEpCE8uQhy7z8cyozNRMXL06nXWKZy4rExTlmf7ikwpYecuF2kFVWQAFgu379gKBiAu
p1oI9kmF9YjJLMdjJx84eoWwBlSHhLwa4TUSiURaykoqqIN/TK4kWObWsMDGg/NsqxrRGeVCz9k/
Oke4v8pf7v3FDU1QbJ4wyhCZWiKUCaO9UsXIlPl6+tXr0rKJy7/x2oR1uKLSyhAQm49UGgFYPEw0
AIl5tUKD0dxngP/4w+/xpz/9J8yv3ER6Wavci+W15BmExWwaWN0XhOmR1kOmaZzTBOl7Ke81Eokk
XzIDEJFczHrmtazHXD0HqkFMRoVgAALYvpJYJys+h13bcpSYxzpguXUscHOTMFXx7DW+jLx1uZIL
6hEUlwd3ZgCi00oFs8Hv9a/F5yVlifms88e3y+aTChrYtvnfesSydWLY6wmsnhOXj5dK2A5blpsa
MgCLDG4AihtEwpudWtzEGmQmvvr6a3z88Uf443/8AQq7VZBc1PhqJECuWKCRTLNGwi4iWfCZspwc
8YsukTUyWbCSt8y8SFrvpELe8KvYRVopzMtd9lckHAM7V4kFbF02zbc10+OKz6kU6sHXj+PTTPKW
myJ2LmMzi5njZzexd3wfSCQSC5iF9SyIzZMBCMv4VQOQwAJ7JOtVO3uFw9kzFC7eYW+Klb30DENY
UtFbTQA3AMFx+fBgZuPXDAC/T7gFxMHdJwIv3ALxzD0cqSUtcPKNgaNLANx8wuHiF/Nq+bcZgMC4
AqTlV5IBWCxMNAAZrKf/wjsUn/zlL/jss0/x8Uf/G7+sXoOo9FKkFDW8caFw8WAZFh0Dh5fezCVK
gjgPfkl55Xjp4gp/1vD4BcUbFzcQE02BbJ477sjkHESxCyKJB03htTcNhGxeVsbTFJHxKfAMShDq
INQjJh7eYSnCtGx/svWn7F+6rVfzQhmrd341AsIi4ezhBydXL3iGJCFBak4mLjv5WF5tn7/Gjicm
vQDhKcVIKW5AUFQsguLzBSctMUaTz4OsLm8arKTCOgRHxOKluzeeO7nihas33APZBcgudL6PN/bP
JNsGz/klsfcqNDIarr7RSCpufGM5Eon0di0kA5DMeuGugUlISc3E+PgYpsDKiotK4OQTg5TCprds
490MAO+EPXjmhbqaWr5hhITFwNz6Ebz9wjE2OoKO9nZcv/sMUZm8Q8LOC1uXDMASYPIIgH9MBn74
8Sf85S8f489/+k8oqaoLwTGdBaSComokswDDh6N5Q0oqakRIeAQe3H8Iv9g8dvHwYNyIiNgEPHz0
BH6scfMgGJ9Tgej0EraOJNjxoB+bWQL+8AgPuu4eHvCOyGD7kZiKuKwyRGeWCY2SjyoIw99sG/xB
E2G/bJnw6Dg4e0cJdeAKDg+Hm38skplrTWA9Zb4/3jiF0QW2jej0YrYdtm+2f0mPvJrVofz1sbDj
8w8MhotPFGKyWa+d7S8qja0j7b3HZZULjZwvF5PBc2mVwnHw4P/q+Nh54ubELzBAcMv8tbjsCnaB
VEnqwY6P1yOW1UswBMIIgeTYojP48b5pAoR955bD3dMbwUmSi5dvPzarVLo8Pz+SMqG+wjmuQ0pJ
I0KjYuDG6kAGgER6d0kMQB4iU0rZ9cquKxbs5EkYImednreJv84NhLx149k1GptVKRiAQLavFOFe
wAz9JPGgzp+sT07JEIJ9ano2omOTEBOXgoSkdAwNDaGgoBgvfWPZvbv5LdtoQHB8gcQApLN7hnD/
4/eWieLHU49QZnruPHRGQ0OT4C+KikqFv93dPbC+/hAvWIeC3+Mlx8HOl1TCNLu38vs5GYBFBjcA
JY19wpvIDUBZ2whOW1wVngHgJsDBIwgVjSI8S63HNv9WeGQwM1Ag6XEms+WDw1lP08sfrj5hiC9o
Yo25Cl6+gawX7csMADMF+RXwCQqFBytz948WetTBEWwdD394BMUyp50DR8dncHT1QyRzkBGJKWx7
AXD19oNfdBaS8yrg5uULZ3dfZk6ykcx6tzwlER4bD1c/1iBZHbhCI6LgEZyE+OwiuHuz9dk2ghOL
kJRXBk+/QLj5sDLmZuPZRc337+TmBTffCMTxoM0vwMx8vHTzQWxeI2vkvCddx/bThJjUbLZvb7h4
BCA8rQRBbD+uXoFwYfsIZTeJJBagZcfnERjLLuwyuLi8hN1zN3ZB5cM/OAKB7AJMyiuFh48f3LwD
2X78hICelFcCF1dPuAeEw9nNHZ6hSSyYNwjnVtajTy6ohqevP8LSqtj7U4+g8Ci4ePqx+vjCPSiR
BfhmRLGbgaunLztPAXjpFYqYPGaQYuKYAeCGqGnC9kgk0q+Jj3QKBiC1TBLEWbCeLN7J8Y/KYvco
1unwjWSKekMuXuHwDk1hBl3++gnsHsSfxvcKz5QYAHbNy1supaiZBe5UxMWnoLuzA7ZP3eEfV4ig
xBLceeqJutpa5OTkw9kvThiul78N1jli9x9uNiQGgJdzE8IC9ysxs8CUyu53URmVsLnjgJaWFiH4
9/T0wMrmIZwDE5BW2iwsK1teJj7Pt8tNTWB8IYsPZAAWDTIDkFbSjEgW4Cyu3cXa9ZuE4P/Jp59i
j6oaQry8YZ3QiL973AeHtAZUllWzQM9cIzcAoRHwCU+BT0AwgpJZzz0xWQiE/iHh8InKYY2qDuEJ
mSxwxsLRyQURaWVwc3eFT3SOMFSdWtwAbz9/BLBGncKCpJOLG2tE+YhOTofjSy/Wqy2C00tXhKSU
Ce6cX6Q8MIfHxrGAHvPKAISxoO7JLjpe/twtQAjsqaVNrDfOgjW7KOOymRHw8oJ3JKtLaAicfVnv
mG2Hb48H3diUTHZBhyKRXXR8lEBS3oiY5DQ4OHkiNr8J0QnJeO7qIxiV4PAIvHAPFnrfr4/PGRFZ
zElHRMIjLBUZFS3wZsYjgF2AQaGhrH7JrE5tbJvpeOkZwi6YImF4PyKb7Su7EC9dvRCdww2JZIh/
ogEIz2AXGusBvHT3Y8fGzltRDdyZMQpOyIOHtw87P6XCRzcDQ8OEm0ZkXCIZABJpmnoXA5BY0Cjk
xRvr69DW2srU8obamZzdAxGVyT9SzUfpJm2DG4Cs1waA96qnLMOUwsy9R2gaIiLj2Hab8cjeDS+8
IvHSJxq2T1xRU1ONtLQMZgDiZ8UA8BjAUw6P7Z1RWlLCDEYNKisrYO/gAgfPCHbv+g0DkEkGYNHB
DUBl2xAC47KxZv0G/OHf/w0ff/QR/vrXv+Lzj/4TWwzN8Te7Inzk2oq/e9aLLz3bscGvDe4Z9cgq
ZY0rNBxerHHFpGTA1UfSEw5Pq0BAcAj8YlkgT2A9ep9whCVmwcXdA6GsJ5uYXSzplftHs4ZTzwyA
HzMP5UjKzIPji5fwCollvepI+IQlITajgAVmFiyFYTXJRcqH/CPjk9h2I5FS1oY0ppBwFnRDWIAt
YXWKjIezJ+s1JxexAOyNl2x935BoeAVGCr14bk74k74pxfzhRrbNAmYssotYz9wbUTn1wkgIH2VI
YRdVdFIaMxpRSC1vZ4E9Ao7OnvANjYV3EOvZx2YjPC75jeMLz6xly4XDMzydGYBW+LDzERifB192
vMHMxKSXtjLzVMZ67EGISsuDq0cg4pjR4CMdHt7+iOJmQJ4ByKxDFA/q/jFCXdLLW9k5Dmd1SYC7
dxDbRjMzAG2svilwD4hDBBkAEmna4gaAf0EPf/ju7SMATbB77oPiwkIhQFZUlL+hmqoKPHNiZj6L
PxD8FgMwaQSAP8Q3WXxY3yMkFaFhUejsaENlRQWKCguYClFeVob2tlYksk7JS984Frxb5G9DZgBC
2T2adVz4aKdgAiaIz6eye6F7UBK7/7qjubEeuTl5uGJ9B8nJqczQNMPZ1RvPmflIYfdGvvxECalP
tt04GgFYfPDv/28QAcdPX8A//Y//LjwA+OmnnzB9is//9HsoXXqGfw4C/uuLbmYAevB/Pe/G/8+p
C47pjcivaEZQSCjcg5OQyXq7rs7P8cwtBOkV7fDx94NfXAFCwkLhyoJWLAt2ji+cEMqCYHRqPmLY
/Etnd0RmVsOPLSsMZ+eWsyDoyxx4DqLT+IN0RUjMKYazB+vR5zWwC0XSO+bBOTm3lDVKV/hGpSMi
KUsY0g9jxiM+qxhR6cXwDwqGe2AiC9DxLGhGIjqjFOGJ2Uhg6/sFMUMQncMumiZhe1ypbDqYmQgn
tq+wxByhVx/CetfcALgwo5Fa2o64tGy4eLBgnFosPLjIvzUsMCTk9fE9f4HwrHqER7HtsB4+f17A
x8cfAXGFzLDEs20HCaMs/sFhcAuMR2JuEZycfVnwbhI+OuPq4cMMCHPt7IYgqRfr6Rfynr43wjLY
zSmvhB2zp3B+IhMzhNEA/vEcX/8AeAQlMIdfKIwKBCYWITI2jtU7GqllLa+OkUQi/bp4IOQP7f6a
AeAjkPbOAQgMCEZYWCRCQ99UGOsU2T33Qlzu1HUFSQ2Ad0QWguLy324A2H749wQ8d/JAVFQMIiKi
EREpFZuOjIyBi/CwcgrSit9uAEISClgnLVN48FAyivqmkph479/2qRuCAoPZtqNgYXUHto5+uPXw
BYLZ/SoiIhLX79ghnpkkHuz5g4v8fEkeSObTEgMQlFCE9EL6IqBFw+17973qe8dhcfUOfvxpBb7+
+ht8/vnn+OSTT/Dxxx/j51WroaOuBtUHIfi758N4lNaM/LJG1mAakcGCS2xKFutpFyKzsoMFwVxE
ppcii/V8IxPTEckaXHpRFQu4YfAPT0RwTAq7AGoQGh0DT/9QhCbmIoP1ZhMz8+HlFyIEs9S8UvgG
hsEzIAKhrAefXlyLkLgMwXmms33y/Ur2zdxvZoGQenD3Y9tKLmYmpAPxGTnw8g9mPeM4oWefWdaE
sKg4YX++4UnCdqKTs5hJKGfbYL3mV9tsQmZ5i5BP5+t7+oewbRaynnkpu4ByWM+9hdWVHW9yJns9
FF5B0cJnZtNYY399fMnsAmlgDrgCvgEhzCgUIioxU/iEQxYzSBExifBkdfWLSEIyc/dphZUIjk5D
Crv40ovrEBqXisTCRnacTa/qlFHSwExMKviDRZnsvEqOme8/km2XHQMzW2mF1cyIRLI6hyE4gZ1T
VhafnovQ+Fykszq/PkYSifRr4veAkERm2FNL32oAeLnw8Tz/eEEu/glviPfIQ5OK3ro+NwCxWVXC
Nw4GM7PxNgPAxYOzT0QGnNk2XYR9vRbP/XuGpAoP+yWx+4O89SUGoJBtI1sYAXibAeB14B8nfO4Z
CTvXEPhEZbB7ejuiMsuF4X97t1D4hKexTg2rKzdLcgwAfwYgNKkEWcU1ZAAWC3wEoLpjGNlV7UIP
O4T1fj1D4ljjCmeNLJL1zFnvNj4N95Ia8Hu3HrjntqKkqkW4ULiyWCPJrmxjgbb51TQPrNlVHchm
ASuzog051Z1MHYK4OeCvCWVsn5nlkvX4PH8ti60vWb6TLSf5kQleN9n+Jkq2nrxtcfHtCT9SIVuG
71+6XnYlf23qNl/VjUnYP6v/xP1PfF3Y/pTjY8vxMv7jG+xY+LqyfWVL13u1nPQHNCZum9dPNv9G
ubD8m8csnHd2zK/rwCTdnnCMbzlvJBJJvnKr21mHhn+HxtsNAM9789d43v1t4s8PSXLkctZnAZcb
AJ6GDGa9818zAFw8FcCH+OWKvSYEcjnrcXEDEMoMjV90jvAxPf68gTwDwAM6T31mlPH7dys7BrZd
Ftz5Q9c8bcnL+CiBkC79FQMQnlKGnNI6MgCLBW4AartGhWCRX9uFwoZeFDf1o6RZLKi4qQ+F9T1C
0MrgwZAHaLYsiUQiLTUV1HUhggX/mIxKIcCmFDXNvnjQZuaAP2zIe93pZXO0H6YM1smISC4RzEZC
To0wzwM5f6JfImYi3piWGgvZNC9/tfyb5elsuXTpa9wkJDHDEZFWjtyyejIAiwXhGYDeceEnMH9N
+UxFtZK/8l4nkUikxa6ihh7WU65ARFIJUllvOZn1jmdbKQUNiGX7CEkoQigT/x4AecvNhvgxhCYU
CvuKYsbm7cfEevtvnefT8l5/Xc6PKZoF/+iMKuRXNJIBWCxIDACQV9uD/AUoXi/SQlM3abqqIS0G
8XtOdmUn68lWCMPZEanls67wFK4yZFV0IKmgEWHJpXKXmw3xbfPfC8ipen1M4ax8WhLq+1ti22XK
relFblkDGYDFwk1mAHqGgPq2HtS1vrvq50ttvUtCDfOldtGcq3EpqaNvXtQ0H+rsXzJqng91ieWq
pVuMdtHQLGn4rWrtHkBb7yDa++S/Pltq6x1ixzQg97XpqIPV87fU2T+KggoyAIsGm9u2XqMA+kQ9
6O3pfmeJenvmRX2i3iWh/j7RvEjc3zfnGhT3LxkNDYrnRcNDA3OukeGhJaPRkeE5F/+O+7nW+Njo
khH777fFKK2iFMCigRuAYfam9bJg293d/c7iXxE5H+rt7V0SEolE86K+vr45V39//5KRWCyeFw0M
DMy5BgcHl4z499zPtYaHh+dcIyMjS0ajo6O/KU4JGYDFAxmA+ZG8YD0XkhewZ1vyAulilbxgPReS
F7BnW/IC6WKVvIA925IXsGdb8gLpYpW8gD9ZZAAWGdMzAK8DskjU+ypA879idtHy4WG+3MQAPh1N
DJSy7cr21yvqw9DwEESyZWTli0Sy45pryQvYsy15gXSxSl6wngvJC9izLXmBdLFKXsCebckL2LMt
eYF0sUpewJ8sMgCLjOkYgN5eFmRYMOvo6EBnZ9erwN3XJ0I5/17s2iZhWlY+XfWxGzLffmdnJ7rY
/niZEEBZYOvtakdRQRE6eiR16OXLiwcwykwBn54ccBea5AXruZC8gD3bkhdIF6vkBeu5kLyAPduS
F0gXq+QF7NmWvIA925IXSBer5AX8ySIDsMh4VwMwMDyKgjgPrF+/GiqqqtijeRSFdeW4c8MSJW3d
uKqvA5tnEWxLI2xbIuHmKhsleBfxxhNgb4VVGzZij4oyDpvfRlffEPpZwBkcGoWoKQ86SjqoYdu1
u2eJ0PRK9LdVIz4tC+IBZgLkBN2FJHnBei4kL2DPtiYH0cUsecF6LiQvYM+25AXSxSp5AXu2JS9g
z7bkBdLFqsnBXp7IACwy3tUADI0B0S+uQfPwKbSw3n9NbR06uztRW1ODodFBXNLTxnUHbgCA4cF+
8J+q7OoTC09a8/XlBf2J4tw7cQgX73tiaLAPrS2t6OntE56kbWpoRmtNDg6o70dJRz9aGmrRIx5E
uOMlbNcxQlsvNxuStMFC1eRAPVeSF7BnW/IC6WKVvGA9F5IXsGdb8gLpYpW8gD3bkhewZ1vyAuli
lbyAP1kcMgCLiHc2AOy9jXG+CWPzG8KbPDA4hMHeaphpG6GkuxfXD+jhllM8RgaaYXHiIDQ1taBu
ZIryxm4M9P92WgAYx5MLRjA8bYPEhFhk5JVhdGwAT6+YYruyCvbra2DTZm20johhY2Qm/GbBaZ11
+NePvsB1O3f0Dw6zACg/+C4EyQvWcyF5AXu2JS+QLlbJC9ZzIXkBe7YlL5AuVskL2LMteQF7tiUv
kC5WyQv4k8UhA7CImM4IQJrfA3zy2afYq66Og2ZW6OisgcaaXchu78GNg/vx1Ccd3g9OYqeeGYqL
S3BWfzf0zj8VGoW8oD9RnGeWhvhm9SYcOWyIJ17xKIxzx9bdmmgbGEZFqi82rFZB21g/jLYrwiu1
ATlB97HnyDkMj2PBPxQoL1jPheQF7NmWvEC6WCUvWM+F5AXs2Za8QLpYJS9gz7bkBezZlrxAulgl
L+BPFocMwCJiOiMAca63sM/oNKobGlFZXQ9xdyW0N6ogt4MbAH0880vFDeNd2KKmhwvmZ2FqagJ7
nygMSh/Ukxf4ZeIjAA/OHsdT3zShEXF8brNtXLYXpsd6KqC/Zz8ah3phulsVvumNyAm0habJJeF1
/qVB8gLvQpG8YD0XkhewZ1vyAulilbxgPReSF7BnW/IC6WKVvIA925IXsGdb8gLpYpW8gD9ZHDIA
i4h3NQDDY0CEgxX0TS8LbzJ/8G6opwy7f9yKbGYArmip4a5rMqJcrKGub4ai8jLERoWjsIIZhf4+
uUF/ojj3TujD4PQN5OZmIruwHLkxzli/fjtiszLh9+ACPv5oIzowAMNN2+GRXI/CsEdYsUUFJTWN
ELHAJC/wLhTJC9ZzIXkBe7YlL5AuVskL1nMheQF7tiUvkC5WyQvYsy15AXu2JS+QLlbJC/iTxSED
sIh4VwMgHhxGTowvnjh5QTw0zJbvg7inHnctrqOiswe+jx7ALzoPY8MiPLM+Cw3d/TA0s0RBVSsG
xL9tAPjFEu35CLv3qEBLSwuHTC6jk12kwU53oKKuBqvbNrhz8ynaB0VwtLmJhPwGiLvrYW6gAct7
z4T60TMAZACmK3nBei4kL2DPtuQF0sUqeQF7tjU5WM+F5AXSxSp5AX+yyAAsMt7VAHR1dUHUP4Ch
wQFhWhK4ezEyNgoRmx4cHsEgD/S9IvBvhB5lDWZ8bJz1/kXC+pMD/mTxZQZYEOepAN6Q+PeB97Lt
j47zonGMsW2Nj48KZSNjY8KDhb19YvYiMDw0KNRfXuBdKJIXrOdC8gL2bEteIF2skhes50LyAvZs
S14gXaySF7BnW/IC9mxLXiBdrJoc7OWJQwZgEfGuBmCy5AXxuZC8YLoYJS9Yz4XkBezZlrxAulgl
L1jPheQF7NmWvEC6WCUvYM+25AXs2Za8QLpYJS/gTxYZgEUGGYD5kbxgPReSF7BnW/IC6WKVvGA9
F5IXsGdb8gLpYpW8gD3bkhewZ1vyAulilbyAP1lkABYZZADmR/KC9VxIXsCebckLpItV8oL1XEhe
wJ5tyQuki1XyAvZsS17Anm3JC6SLVfIC/mSRAVhk3Lh932uAvW/8N/7lBXrS7EieuSEtH8kzhSTS
YpK8DsdkDQwMoqiingzAYoEbAPEIGQASibS8xB9mJs2u+vrEZAAWE2QAlrfk9VaXk+SdExKJNDP1
95MBWFSQAVjeam9vR1tb27IV77XIOy8kEmn6IgOwyJiJAZDXkyItLvGcHg+A3ABMzvUtF/Hz0NLS
IvyV185JJNL0RAZgkTFdA9DZ2YmmpiY0Nzd/UPE6LIR6LFbxwFdfXy88cb2c4SZIXjsnkUjTFxmA
RcZ0DADvKfEbJg8efOiUm4EPIb5vXgceyD5kPRaz+Hnj549/RE0eTcwctHZ0S+ckDPQzAygaYFNj
wvnvYNsY4V/7OE0aG+ol3/D4ihE0NDZJp4GhARGaGhsEg9ItmlC/8VHh426yVcfHRoSnjmfK+Pg4
GQASaRZFBmCRMRMDwCUbNh0clnz2kzMo7p+yjkyy5fnfLvZ3eITdzPtFwvTkZX9Lsnq0tra+2i4P
aP0DQ0I9eictP1E9/C//iuHRMfRN47sPurp7XgUezhgLPsI56xFhbJR/HfLUdX5NvN5CXWagrq5u
jLB9CuePTfO68a9H7hf1vvP55Pvn52+yARhoq4Cxngo2bd2KLZvWwMzqMfg7PNhSgq1r1uKpbyQu
G2tC+4gZ7jy2Q1OfZL13YVTcgfMH9mL9+o3YqX4EVV3DGOuvh77yVqxbvR5qh66gj7WLqweVsWbT
DigqKuBZYLJ0bVaHxmzo6ZuhU2o6WgujccjwFLglmQlkAEik2RUZgEXGTA1AN5vmX6aRGe+H48ZG
OGFugfTKRgwPiicFoS709PYJ39fP5wf5l2OwHp6P2zPE51ZisL9vwrLvJnkGgAf/isxoXLttjy4x
/x2Byet1obtXxIzHCPrb6+HoaI/Shk70id7BBLAgL+5tw4t713D8mDGMjE7iuWsI+oaZiWipgL2j
A2paRcJPEstdf5J40B4YHBR+J4EbF3nLvF09LPB3IdDLAxnFtcIvLfazuvm5uaCgukUwAfLXe1Py
DcAQjqltgt6Fp+D96v7OWqiv/xq3PBMQbncBW/eeQH6qH1b8sAHZNc3o6ukSfveBjwgU5GWjtq1X
mOOUFmWjqLpBOidB1FiI27ceCtNXDijB1icb/vdNsMf0vlDm7OiIxp4W6O/YxYxGHGqbJL8SKWOg
LhUKinpokxqAppxg7NljIBiUvt4mZGVls7YnswPjKMzLQllDqzA30NeNtqZmVFc1SOtMBoBEmm2R
AVhkzNQADI2MITv8BX76eSMe2DvilvVJfPnjaiSVtAg9Yhk84LZXZsHquh27JQ/B1uYGShq7kZse
h4LKNwPE0EA/C4isNzuhqy3u6xV+6U+G7MeF3jQAPFCM4O4Jbfzf/+PPCM6qxtiQWNLTn7CtnoZC
XL32EN39/YiPjUJTFwt+Y8NCEB4YGsEQMy994tdDygMsuPLXekRiDLWXYP03X8PU8iaePLbF3u1r
oXPiBgugPYiNjUEL35YA64n39b0KMmMjQ+hm25h4DKwvDLen9xGUWIxxtn9ZFceG2bLsWGTr8iA2
KJwT1uNnPXx+Lrq6WZAd6YSuwjY8Dc5km2KGqq8B6hvXwDulSrqeBG5uekX90jn2XrDj42ZMRmd7
m3DByhhszsKalatQx9qDjKIwB+xQPoBjOpvwn598D12NnfiXf/1P3Lj7BIYmR1HT2YMrxkpYv30n
VqxYD//EXHg/vQQ1XV1oauzGLefQN0ZOOHEBDti0dhNy67twVV8RO/boYM+uPXAIzWWvirB780/Y
rqSKX75fDbdoXiZhoD4dyqoH0SE9QS15YdAzOIna8hwob16D/XpsO/uN0NrZhSdXj0NTTx979yqx
beQj+oU5Pvr0rzh/2Z61FAlkAEik2RUZgEXGTA0AD6zhz6/hb6uUkV0hyd8mhvsio7QJbTXZOGl6
AAbHWY+xsQt+tsfwD//4e1hcvYjf/+P/gP6lx4gI8UV2USV8nR/hksUpaGjrISK1nN2UB+F5/xJ0
NLVgbHoKyYV1KE4PxqED+jhoaILUgmoMDIjfMAC9/YPoqEjB4WNn4frsJnRNrYUgOjzQA5cnFtDQ
0IC9bzxCn13Af/vv/4K7bkEIDQ1CSIA3Hr/0E365MCHgJZwD4tFYmYHjRnowPHkOOdXNkl84ZAZA
3FyAPYoaKGyTho/uMmxcvx6hKXnw9fVFSVEurlmcxkkTKxRU1cDh3gXo798Ph8AYIQCW54ThoL46
Dp60RnFBBlb86Xf4m4IxukSdsLUyhYa6OhyCEzHc14p7187C3OQ8zE6dR3haMUZGh/Dy0S1Eppcy
Q8AC9nAnjmio4nl4DsaZwRjua4SBkgIi8pqRHecBA/39OGJ0CgU1nejrqISluRH2Gx5BeE4FehqL
cOX8KZw6dgkpRTUYGXltTAYa0rD259Voeu1AUBrpCAWtC0iNdIGJlRvbdxXUdU5gdLQL+w/sh+dL
e2zdri8s21CciQAvB3z9H3+EziFjGKhtx1++2ob2Cdvj+D27jd07N8I1LB6W2io4YmGHzJQ4rF25
AXFlXRhmRohTGPIQa7YcFHr4HD4CsFvxALqk8+2FEdDRPYGy3Hhs/H4Vrtx9AP+YeNTnReHP//Tv
OHjkGLR2rcNqxeOwv22C/ea3pGtKIANAIs2uyAAsMmb8DECviHU+B/HywSUo7FTC2l/WweK2A+vp
dmP/tl+gZGCKk4f24Nt1Ggj0fIyfft6C0JggrP9xJez9Y2GyXxFOwcnQ2fYldhy8hPtnDbFe7Tgi
feywZv1OeHm54ucv/oR77oHQWvk3qB86ixu3LsEzKh1DQ4NvGAAeIHxtz0L5gDnyUoPw47erUdIz
ikh7S3z/yza4urpgl+Ie3Lt3DWvWbEVUYhz2qCrBz88Lm7bsRs/QKIxZsLJ19oPetlXQNj6Lo9rb
8N16LbSKR4VvtxK3FEJFQRXJ5W3CyADvqRrt1cAje0eoamshipmfP//hn2DvFYWHF43x49ptsLY0
x6effgVX3yDs3bACF+4/x4WjejA6b4WDKjthdP05HlscYb1dfXg4O2LlTxvhFxqCnz7777hg6wl7
q2PYc9QaQ10VWL96LVIqOwVDguEOHNbYC6fIPMEAjPQ345CqCsKTU7Hlsz/D4ORlXL1hibi8Ylw5
oIx1ynqwOH0In363FSGBrvjoj/+Muw6BqGloEc7lK8b6oaewCqceBErmx/twRHEFLF5EIzfYHgfP
OzDjUwjlvUfZhd4K/YOs3k522LbzgLB4c1kO/NyfYuWXK/AyIAxBbo9hePwieqUGoKu2EC5ukm0X
+dtij44FHt88hsvPY4WyAwq78NQrAv4+wcJ8bvADbFU2fWUAxkRV2PDt94irkYxqRNhbYMveUxjs
60F+ZgYC/Z2xauUa3L9vi1Xfr4VvSCS8HG7jtNVTONw6hmPXngnrySADQCLNrsgALDJmagB47jkz
KRZ1XZLeWndDFbQ2r2M32xtY/7e/QmP/Qdbj1cU2hX2IiwmG1v7TbKkhGKhro6RZhAtGanAJScCx
A6qIrhiEuCwC23R0cfHYEVx8HC5s896FA7jpFoO8GG8cOnAAR4wPwS0wScifvzIAfEh7uBsHlFdh
xdqt2K20G5//8d9x2yMaNoc1ccUxXthWv6gHZRlh0NAxYQG9DWp7dqGouReXjfVhc/cuDhwwQ1lh
Iv7673/EvoOHYaCnzerO6toiwoB4gBkAPgKgjpxG6ZD5UAO2b9rIgkwodFndIoI9oaCuJbx0XHEN
ft6igkOGh6C0TQHnTplg567Dwms8RdDZ3YxLxw/DKzYdJ7RU4ZPZIrzy6LQeTM9aQENzN0p72JLt
+dDS3A+7+zew3/SqMKohpDvGenBIYRvsgqXD46Mt2LN2IyIKmpDg5wD9A4Y4bGKC8OhIbP/+b9il
rotDh/SxdcseONrdg7K2DriF6elon/IQYEdlBtR2bcKO3UrYuXUNtI0swJdI9riLI5bPWQWKsFfz
uGAAdNk5qurohuVRRWzYroCffloHv4QcuN8zx05mSJS2b8cFO69XKQBxeyV0Vddh+y4lrFy7GQFp
VehtyoXKurXYsmkT9hhdQXt7M0z1d2Ar2953v6xGUHqldG0Jno8vY+XKdVBSUsLPP61FDDvmlqJ4
KO1QgK6uHrbs1EBeZR0eWR6B4l51KGzZiqchKfB/fALG1+ylW5FABoBEml2RAVhkvE8KwP/BGXzy
/Xq4BkUgLjwQuzZuwDPvEBxV3YHzD9wQ9PIuNI+eR0lOFL77YjVSCnKxZ80q3HcJwzF9RbwIiMNB
zW3wzWpDU5oHflTUhLfjHazZpIYAvwD8/MN3uOMSCFe7pwiJiMXRvWuxUuE4+KB1u9QADI6MIyvo
Kdbt0BaCGqckyhErNqrA0fYKftmghMCgQKioqMMnwAvrfliLkKgoKO7ajPSGUZTFvMDf/7//C8yf
hmFU3ACldatx40UAPB5fEereKR6GqG8Ag21F2PjTStx54YvoqGAc0diFHbpnmfEpwA5lVYQGuGL1
5i0Qsf0/Y736HSxIJsZFQEt7H4Ijw6G46gfYOHrD5uQhnLtrjyuG2jh47iHunNHHbnUjhPp7YdWK
9XDz9mLB8CfW2+cP1I3h6cWD+F//8in8ksswPiwW3ocx9s/e4iC+26CM8KgY3D9niB83qKOqsR6P
b99DZEw0tLZ+D1XDy7h0bB8OmN9DbPBLqBuYICLghVDPRlZR/gyA/I8BDiErNRV5xeXSeRa8Rd1o
72QrjQ2hpbWdBc9RtLa0SHvnI8jOTENlk2xwHigtSEdWQY10bgLjg8hIS0VV++sH/Aa6W5GeniW8
rxJGkZWWhuqWNx8ClNFSWYJUVr+2ntfP/7c3VwplHRPKCnLSkF8qSU/1dbehvev1Q4ocMgAk0uyK
DMAi431SAMPiXviygK2iogxlJW089YgUent1xckwNNgDJRV91ssrwpC4AxcP6OOGnS/87W7hqLEl
7BwfIzm7CC/s7iK9ogNtZamwvPUA/YNiON2xYD3YU9i6/kfYesch2vshVFiQNTA0E558H2BBi9eB
G4Ch4WFEeDzDEzcWwEeHhRGBwd4m2Fy5hJzKerx8cBq7WW/x6lNviEQ9sDl2GBeu2OLRs8cobujF
SHcNzpgcR2pZC4aHR1GaFYH9Oruhon4YkbllGGT74tsc6G3GtZOG7FhVmDRhYfUITT2DELeU4e7D
x8jJTMb1O3fQ1jeEgZ4W3LxkxOqsBOunXhgcG0dxmh+0NRShedAMpY3tyAl1hcaewyiorMCN84ZQ
2r0b972iMNBVh+s2l1HS0C2cy9KoZ/hixWa0sDjd1yt9H0Qi9Pd04P6lM1BWVsE+vWPIKq7B6JAI
Lx5ehrKKqvA8RHF9F3pZ/U4c02bvjwacIjJY8MzA1Vu30dY7LJiot30PwHKADACJNLsiA7DImLEB
4Mv3sADKgpuMMRaA+RPv/ROepB8e4B8LlPS8hgcHMDw6JnyBy/DwCPr7RCyAjwiBrUf6tHphcjBs
rtsiJS4YG37+WRgmngjPgfO6yAwAn+YfARwZGpR+pI6pRyT8NnUfC5SyTwGMc3PA6s+H0Ud53pzt
V/jsPluWIzxhP+lp/SExfwJf8jE9/ln7N7+8hn/uvgdd/ByMDKOvr194mJAfPzcMskXHR1kZq5N4
kJ1kKfyjev3CfsbZOeh/tSz/xECP9DsKeIqlpb4Upw8qw+qpL8bGx4R6CBL2IXq1HufVpwUmVJIf
U2/f6wA/MjSAXlGfcG74+83PHxkAMgAk0myJDMAiYzoGgH9/uuzHY2TfpT6b4sGpvakWURHhiIyM
REpWIUSsQU1Zju1bZgDmoh4LQaK+PjRWFyMqOg5t3X3ClxbJW26m4ueNDIDEAMg7PyQS6bXkxQN5
IgOwyJiOAeDBv7GxUfgOfn7jnH21or2jE339/awh9bMePDMccpbj9eBfY8vrsWR/zY4F545OfkH1
o7OjHa3ylnkP8fPGz99y/y0AboK45J0jEmm5i18b/Gu/+deHy4sJk0UGYJHxrgaAD4XzBjHMv8lv
hH8H+4DgDGU9cP53Lqb5X3nTEzWxbLFN879vm5687FxM8xEALv5+cv3W9MTl53ua/53taZFIJJyL
6ZyzidP877tM87+LcZr/fZdp/ncxTvO/E6cnvv628sU0zf9OnJ74+tvKZdP82uD3e/6XGwH+mrzY
MFFkABYZ0zEAHR0d0n4TkJaWhuzsbOTl5b36y5WTk4P8/Hzk5uZOKed/efnEZX5rmv/lKigoeDUt
K+fLvcv0xP1z8Xq9rVw2/WvlfNt8/cV+fHwbfLmsrCzhr2xa9vrkcv5XVi5bRrbNt03zv+8yzdeZ
PM33w6dl+39b+eQ6/tY03wZfXzYtm+d/+TJ8WnZufmua/+WS9/5NLOfryMonT8v2/7ZyWR1l5+u3
yvk2+PryluflE5f5rWn+l2u5HB9/7bfKJ0/L9v+2clkdF9vxJSQkCM8L8a98JwOwRJmJAeC504yM
DGGaIAiCWHpww8Hv/WQAljAzNQDcKfK/BEEQxNKDjw7wVAAZgCXM+4wAkAEgCIJYmnADwPP/ZACW
MDM1ADx/SgaAIAhiacJTADQCsMSZqQHgD6iQASAIgliaFBYW0gjAUmc+UgD1BUlw9omWzrF9NVXg
3s3ruHz5Mu7edUR1q+Tb+Dit1dmwsb6Ma7dsUdH1+nvdCYIgiPmDngFYBsx9CmAcVgd24h/++CMq
OiRfOpPufQ+ffrUeNjY2uGJxGit+WY/E0g50VSZiw7pNsLp1F1aXTuLbXzYgs+a1OSAIgiDmB/5x
QDIAS5yZGoC3fQqAl00s765Kgqn5NTjcu4hz932EskQPWxwyfypMc6IdLaFqdgelCR74cvUeVLdJ
ftcvPcoX8SmpcHDyAP/R4cG2Snh6ByAzLR6Ozx7ipIkRfKLzhGWbyuNhamqEK7ZOEA+/3r+sPiQS
iUR6uyZDDwEuA2YzBSBbtq9P9sO8gNsNMxyzcUZVdhDWbNwLPgaQ7vMAuqa3JQswekpjsH3HAWHa
7dElKOxUwY5N23HT3ouViKG+fT3iageR6GQJw4tP4WB9AH9auRtP7t3E9z8rIDc/C7v4z+3et8NB
VQVcfBogbIs3XN5ouYslkUgkknzx+zv/ZsyJ8C8D4q+RAVjCzNZDgHyaN5A3GO2D5rbvWeDfih0K
O/DH3/0B/nmtKA5/Bv1T96ULAeVRz7BVwwQNtZWvftO/uawY+lvX4LpXBpLcb+DKvRe4bGaIhIou
PLc5ipu+mcJyqtpquH3DGur7LIR5TnNbu3SKIAiC+C1kX/k7EUoBLANm0wDwxjKRTF9b7NIxk84B
SS7W2KR5Cqkhz7FR0VAYRYiJ8Mf6H7+HY2QhcoLv428/b0VQYgbyczOhu2szbnlnsNbZiB3ffoat
mqeF7dw5rYmLz/lDhSJs2L4V/qEh2LzyFwTFJOP2OSNceRYoLEcQBEH8NtwATBy55dCnAJYBs5UC
kGcAAp7fhmt4lnSO0d8I66vXkZocC41dilBSUoK21mE4ByZKFxhB0Iu7UN6jDCVFddx5HiT8fj/n
lPovMLrrL0yHejyGb2IRmxqE9TUr1PUDebHPoaSsCJ3DZ1Ez4VMFBEEQxK8jzwBQCmAZMJcjALPD
ODIj3aCitAfFLcv3t+sJgiDmCnkGgL4IaBmw8A3AKB5cMYOdX7J0niAIgphNKAWwTJnLFABBEASx
8KEUwDJl4Y8AEARBEHMJpQCWKWQACIIgljeUAlimUAqAIAhieUMpgGXKTA3A5K8CfhcDwF/nw0p8
3beJN7rJDZEgCIKYOygFsEyZzxTA06dPoaCggDNnzrxVO3bsgIuLi3QNgiAIYq6hFMAyZT5TAHfu
3EFAgOR7+t+Gu7s7njx5Ip0DAu1vQ1tbC1paWtBQ14R7eIb0lXenrSwdB3S0hW3oGhxCaHK+UF6U
GgK3MNmXEEkY7mmF9bkjwrLm1+zQPSx94T0pjPXEWevXX3+M8SE8vHwM1naSH0h6V1pKM+DoFiKd
A4rjQuDsGiWdmxnpkV7Q09Zkx7wPPhGSH1eaKSE+jogvqJPOEQSxGKAUwDJlPkcA7t27B09PT+mc
fF68eAE7Ozvp3DiO7VXEubvOiImJQZi/I1Z9vQo5DdP7QqA0rwdYs0MP4eHhCHB/jnXffQOXiFz0
djShtqlNupQEM709MLZ5jqSEeBzTUoCG2T3pK+/DMGxOaeI/vvwJqZXdQklrbhjW/6iEgsoiWJpf
Rds7Go2i8OdQ0jWXzrGAe9scmjpW0rnpk+z7EF//sAkuvmEID/bEpm9/xLOwHOmr78oYbl+6jMza
XjQ3VKO1u19aThDEYoBSAMuUmRqArKyseTEAZw7sh2tMkdA4B0S1UN+5Bbm1XXB8cgsFLUNAVzku
3rZHWXEmzp4ywQF1NajtP4U20euImuL9GEcuyrYJFIQ+wm5jKxRkRMInNhMFiX7Q09eD5fWbOHxA
HQanbZBf1oiBvk4UFxQi1OUOnAKShHW9HB/BLTAC929ehJG+AXbs3Iusmh52BXXg4vED2LVzO26+
CMTo61OD9pIYnLnyANGeT3HmxkuhzOrAZvzuXz/DYUNt/ON/+yeccwhHY2UODupqQUPvAFLKm9FT
m4FjRw2gb3wCdT2jwnqlMW7QOfo64Ec+ssIRk0cQdTTgxNEDUFPdjWvP/NiZAyLcH0JTSwuGp6zR
0T+OOL+n0NXThcVt2bkYhrH6FvhkNEnngba6IqQVVSPE7QH26e3D9WceKEyLgLaGFrSPmKKqrR9t
tfkw0tURRkmsH/qitjQG//Y//yeUj9+El7cTUis60F6bi31qSti5Yze8E0ox1F6KM+z9OaSlCRVN
YzR0DUj3SBDEh4ZSAMuU+UwBTN8AABe0FfDlj6uxZcsWfPbJ17jnnsBKx2Ggo4joChZEmlLxs8oh
JMZ44OOvViImORMH1bbg7PPXw+KpPk9w4Mzr4feOwmioH7WGv9stnH3giYDHZ7CBBaXK2mb2aj/u
XTOHsqIC1m/fCf/4XDTlBEJR2wTDQ71QV1JBdkE+Vn7/BewD4vDcxgjq5vfw0toU2sbMOOSk4sDh
Iyht4z98LMHF2gi79p9DoMc9fP7TevDfTMzwvItNGw+guDgZCjs1kFFSjL0rfsQ+kwuwOKGLr9co
IdTfASs2bkdafhmGJPEfJdGu2Gd8TTLDiHlyDacuvkDU86v45oddeO7iDtfgKOTH+uBvH30LSysr
7N30HfTN7+OepQFUj1uhqk4W8DtweKcWiuT8eKLF4Z3QPv8QVblxWPnx1zh5wQrG2luwStmQma0U
XLxwDlZs2598+TXCc/JxWE0VfilluG6uj+chcTBV2YabrtHIjPfDlg17EBbmic+//gERCRkw01WA
ka2fdE8EQXxoaARgmTJTA8Cf2J97A8BHAPThnVotbD/C+Q4OX3kkvHLQYC8yeHX6irBF+xhiwt1w
2OKW8NojKzMY2/oK0xw+AmBk6SCdAxJdraB+xhYJgU9gYecDf4cruOERz14ZgI/H62cU2rNY0Fq3
RfhBoksnT+LB/ds4d4XVbagBWgcOCMuURDtD4+RFmGnqIDCrUygb6O9Cj1g6AjHSDZ1d66DOevX7
9Q3wzed/xYvEGvTmhUJ9ryVboBcHDpqjra0CK//8MUzNz+O8+Wno7D8GD+cHMJn43ACjKsEDe7XO
SOeA4LvnYXjSEcODPXj56A4usHVPnL4Hr0dW+Ou362Fubo6TxoY4f+0xblqfwIvoQumanDGY6WyB
fUSJdB4ozYxGTFYp7l4+Au+cdgwVheAvf/gC5ufNce6kCQ4eM4ev0zPsP3AY586dw9/+9j1Cc8tw
2eQ4Ktn948nVY3jq/BLa27Uh+0mmM4eUYXXjOo5bXhXmne+ZQ/+qZCSEIIgPDxmAZcpCTwEYqe+F
e1K1dL4bqtu3ori9HxcO7IGO2XVYGSviD6s0EB/uArWjZ4Wlrp7cjwO3vIRpTobPQ3z78y7hUwi2
1y9hzU9rEM+6vXHMCJy45wqvh2dx+hHrkY4P4pjaZmzTOCbU4dyRvdA6ZikMp+eF2OFPv/8MUaUs
yItKsGOPsqQn72uLrUetEP7iOjbv1MHTh7exYZcqytqHpPu+B0Vdyc8Yc0pCH2AN60XnxfhixxZT
VtKLHd+sxFOPKJxlgfLMTTs4P7HG0VN3kBTqAPXjFyUrShnpqcWeTd/C9NItdjx3sXLFFwjOrEJa
qDssrz/Gi2fX8dXX2xARHga1XZvg5OmD80f24al7PO5YGuCWlySVIaMwzhPffvMLrG8/ZnW/gZ//
9gPCs6tx86w2HoYWsP3VQEtxHe46uMP20nFcueuCO6d0sffwRfj7uuA///wX+OVU4vzenTC/6QFL
9ppTVBauH1WGuvEF2F49i+2KxkiK8cCeg8eEfT68dAQalo7CNEEQHx5KASxTZmoAMjMzZ2QAfH1f
98zlwT8CODEFEBcWirJGHmolJEX5I6u2C4ONJTh/8gQePLWDZ1gSGmpKEBon+cGgzMRIRGdXCNOc
7vpiXDY/CzMzM5y5cAmFdV1CeVVBChJZ77UiPxlJedLlR8RwvH9FWNbqgSP6h6TH2JTOApm0Vytu
R0BIMHiIb63MhWdEKi+Fn9MDYb1oFhBlpEf4ITqjTDrHGOmCq6sbCgoLEBzA0xmsF8/Wu+sQjtHh
Lly9cApm561Q3SVGT0MRQuIk256IqLkYV86eEPYVlFAglPV11uGW9XmcPHkK0VnlQllVbrSwjM1T
NwyOAVlJ4ciueJ3vl1FXlArzU2YwO3EGKQUNQllqXAhyq1qE6e6GfJxh2zl3/QG6B8cx1teAqxdP
4eKVa3jq6Iqa7mGUJPrD+podomMjUNLYi/HhHty2MofZyQsoaxvESHc1AiPjhO3lp8UiLI3/nDNB
EAsBGgFYpsxnCuDmzZu4e/cuamtr36pr167h0SPJMP9CoasuF7q7N+CWS7S0hCAIYulABmCZMp8p
gLCwMOjo6ODYsWNv1b59+xAXJ+kpLhQ66/Jg/8wN9Nw6QRBLEUoBLFPmMwVAEARBLDxoBGCZMp8p
AIIgCGLhIc8A0DcBLgNoBIAgCGJ5QymAZQoZAIIgiOUNpQCWKZQCIAiCWN5QCmCZQiMABEEQyxtK
ASxTyAAQBEEsb0ZGRigFsByZzRQAX4Y3JBKJRCItHonFYqG3PxFKASwDZmsEgMMdJG8wvCGRSCQS
aXGIB3ce6CdCKYBlwGwaAIIgCGJpQCmAZcBspQAIgiCIpUNBQQEZgKXOTA1ARkYGGQCCIIglCqUA
lgGUAiAIgiAmQymAZQClAAiCIIjJUApgGUApAIIgCGIy3ABQCmCJM1MDkJWV9dsGYKgFRjraiClq
E2b7mgpx49o9vPl1E/Jxu3kWRy/ZS+eA3AhXbNu+A7t27cI+nSPwi8uRvDAiguPdC9jJylW1dBCQ
USwpJwiCIGZMbm4ujQAsdeY0BSCuxl//2/+JLxWOYZTNispjsGv7XnRJXmXrj0mn3mRcVIv9u9bj
2/W7UdQyIJS52phhz2Er4csp4iK9serHHxCa34BE16tYudMQNfW1SE/wwcqVa5BV/+YXWrAtSv9O
nJIwPia/DgRBEMsZSgEsA2YzBcC/UWpwcFD4XmnOeEcRDu4/DMMDmrjmFAd0F0BjrwGGMAbXu6ew
fsMmbNurj/y6TmF5GUle93HPIxaxrjdw7r6fUOZ22xxn7voK05w4J2vonnuCojhvrFy/E3bO/iiv
bUJLSyMqc+Nw2PSiEOzzI1/C+u4zuDyxxh51NWxcuxrXn4WxV8Zhf8MIazduhqLOMZQ3S0zD6Oio
cAy80ZNIJNJy0dikzhAZgGXAbKUA+HRnZ6fwbYD8ayWFsvZCaGgZob6+FMrbdyMuOQ7Hj5xiPfUg
bFiriEoWsJ2tzaCoa84swWuMlNdi36nreGhxBJ9/ryCUed81x4kb7sI0pzDUEYrqZ4XpkswwmJua
YMeGDdhvbIHeoT7o7d6GrMYe3DTRwPOwbFge3g7dy66ozgjBL9vVEOzpiDXrVVFV34wnNhfhHJkt
bIs3dn4M/f39JBKJtCzE7/E83z8RSgEsA2ZqALKzs6cYAN5YJsINwB5lXfDSzGB7rFu1AvrHLiHI
ww46xneFZcQlodi+QwuyL6HsqkzG+nWrcPbMKZw6fRY/f/UVArIbEG5/BRcehUiXAu6d0oLRDWfE
Bzgjuer1fnU3/oz74WVI8riNU2cuwvDQMfQOAxbHNeGXw+o/UI5devtx99I57Dd9JFlpuBc1TZLn
FAiCIJYbfOSTfg1wGTJbKQC5BqAtD9u2qKJ2UDJvvPkT/I/PFNHZXAGVNT/A7PQF7Fy3Bhce+ksW
YNwx08CJu6/nU92ssXP/WfjZWePLXxRgaWkJUyND/LJJFXWiYWT63cNfv/kRphctYXH6NLbtVENu
fT9zFrX46nf/gIPWklGD47o74BhXyxxGHn7apoj8ggzsWP09zM5exJqff4FjeK6wHEEQxHJD3s8B
UwpgGTCbKYDJBgCD3UiIT0E/fwKQ0ddSiYCQWGG6q7EAt27egIt0XkZybBhq2iUpBIGBTkTHJaCq
vAiPHtzDjRs38PyFH7oHX++7tigNt1j5jXv2qGx9va6+8gb4ZTcL0zkZiahuY8ZguBsRsXFCyqGj
PhM32Xr+cZLhf4IgiOWIPANAXwS0DJjLFMAHY7QXV4yVoX7k0qvUAkEQBCEfeQaAUgDLgLlMAXww
xsQIDwpAQ7fk0wgEQRDE25FnAPhHrmkEYImzJEcACIIgiHdGngGgTwEsA8gAEARBLG8oBbBMWZIp
AIIgCOKdoRTAMmU5jADwuvEvJ1pomvzNWwRBEB8CeQaAPgWwDFgOBmBgYECov7wg/KHEz+nkC44g
COJDQCmAZcp8pAB4AOYNiK/f3t4+r+L7bGpqEr7ffyHBLzheL3l1nk99qPdlNiSr92I+hvcRP2Z+
7PJeW87i56WtrW1Bt4uJ986FAKUAlinzMQLAy1taWl5tZz7F98n3zXvdkxkfFqGwqFw6N7/wi+pD
nROZ+G83NDY2ftA6vI94vfnNlBupxXoM7yN+zDITKe/15Sp+XnjAWojtgtenublZ+OrdhQSlAJYp
82EA+DASd+S8AXWxbQ0Ns8bPlhfWHx+FqFdSLm+/MxWvb594ECPDg281AGned/B///3vkVTdIy2Z
G0Z6WxCXmCOdkzDxourq7sEYOxUjQ+JXNwlBbLpX1M+OYZjNS8r564NDwxjo73tz2RmIr89vRkId
2PTAEL8pjaOH7YvP9w9IvkZJ1MuWnbgue03UJ8aguB/97BwPDb6uN//bJ5b8hLOsfQyI37+u8sTr
zdskf39lx9DXP3Hf4xD3id5v32xdfqxDA5K0DW/jU5aZIP5eDo+O8QoIdRgfG/nNa2um4sfMj52f
Az7P9z008vraGhuVtJuBWWsv/NodkZ5TyXv9Rhvh50p6/vtFvZP2x9tyHwbZeRSxIDE8OCC8V/zv
+9Zrsvh54aZI1i542cS69fH7Dat/N3tN9n7yvz0TttHdK2LtepC9931vXH9v05T13yJeH37dLwYD
QCmAZcB8pABkBqCb3aBGx0aRFuEOLQ1V7FbcDYt7jujoYzcDdlHy/fBG9vpCYtN8flLDk5RNXmbi
az0YGBxGRqQH7r3wEm48A+zG8yZiXDx5HOZnTGBk+UBaBnQ3F8LpxQtkljUK8yN99XBxfoHojGJh
HqM98PV0gk9kgjDb2VCGwopaYbqsOB/t3SLUVBYjMyUKLz18MMBiQYLLZXz811+QVSn5WmLO64tK
hNGhblw0MoCtZxzGRvjNRnIsfeIh1OUn4Ordh+gQDbHz28NMwgDcn92Bd0w2hplhmHhu3jwvr8/F
2+b5eyozAMPDQ/B4aIk9+0+grW+YzY8gK9wZCop7kVfbyQKI6NX6YnZus2N98NgtCCkRnnjsHiKs
z4OleGgE7TV5MDU+iN27d8PA9AzyqptZAJX84tjE/Qvbk07zm/HE8levSzXxtYmvTzQA/AbfXluE
M6b6UFRUxOEzFiht7sYAC1iv1pVuZ/K2eDuaWC77y481P8Eft+1d0c+mJ74u0ettCkZubBiR3vbY
u0cZisoquOnoBdHgEETSfU3c9sTtvLnN12Vvlsu28fr11waghxnDAcQHvMBe1Z3YpaSC+17h7Hob
Y+3lttBeeNt5va3J25+67devMbHpkQERHB5dR2haCYYH+oSgEe/zBLv26KGiVTJfkxMJxZ07EZ1T
w5bpf7UdETOKVbkxuGPvgtyUcDx09kdatC8eugQKbe2t7ZZPTyh/Yxnp9Kt56ev872QDwN+7qsww
qGsdRmU7M67MoExcd+I0Nyjt1Xm4ef8xCnNScd32EbtHDbN75Os6yVt3Ytnkbcrm+d/FYgAoBbAM
mKkByMnJmbYBGBweQ06kE7786kc4eAUgMT4OBkqboW12S/jK3jF2UfCe+gj729/XK9zQx5lh4M8Q
jIywAMNuUsPstQG2jPCXBSVR/yBGR0aExjvMej+D7LUBFoQ4/o/OYPeRC8L8ZAPQmBUEfbOrwtcG
qyqooIZ1DrqrkrBp1bcwMDyCH1dtQVBsHA4qr4WmwWGs+Xk1nvmF49IhJezR3o/dW9finG0Agp+d
huap68I2jffvRlBKEQx3f4cVO7WgwZY5fNEOQQ4X8KePvkRQ+ut0g+yiErNzUpMVhhWf/W9s1DBC
xyA7X+y9GJQeQ3WyFzYoqaONd17GJZ8auHBUBRfsJb+MyHsnItZb4cc+8byIWdAZYr2rAdZDE3pb
rFfOR0PE7O8oC9ayXr7MALCzD8sDW/B3/4+/R1RBk7Bt68Pb8Hf/x39BZIHklxIl53ZYeC+aaitR
39oJp+tG0Dp9W3i9VyRGf1sZFNb8hMMWt5CYkIhHVmb4aZ0yytr6WPXHWRBiwZAZshEWmPh7zQ0h
vxnzkQSh18jeY/5+8zqNjI4Lx8B7nbwH++qY2F9+TLxdvjIA7BzwX3U8tGcL9p+7j/y8XFgeU8em
vUYQsVPJ29GrtsX3N8DbzRDb1iCr0yDrjYohFnrJzDCw/Qs3vpExdqMeQWtDNSrqWpAd4Qbjs3fA
v1+S92T5+ePrCyNYbD3e849yuYkvvlsDz+AwJERHQnXTKhy/6gRhPIIds3Ac7D3h+xZL69DL6s6f
UZGNNvAeNm/7Y0Kd2fvF2je/hoZZXYRzxt5rSQB7bQDEQ6OoTPPBV9+uQWB8OtISQ7H6x6/gHp0H
K5O9sHGLF94j/t4JppPVVdzfL4wYiFl74b1x4Tpi2x1k55uP6gh/2XH29PYJ7xO7WGCsuwN3fVLZ
pOSZGmebI+xm/3/gRWSeMO96w4jf/OEQni/MD7FzyY93hG27rakWlQ2tiHa+ir0m1vC1u4R95rbC
cjwg8vM4ODwqvMd839zgdvJRB/b+8PMwIO5n87xdTLxPiIQ2Ocjry4L8MPvL28VkA8Dr/sTSCP/6
+z/jjns0mx9HQ0EMDh61QP9wN04fMUJ8UQO/kQl16e1sQWlVPfKjXmKzqi762BvIy/m11c/qImur
vL4DrSU4eug48hu6Mc6W4W2T14n/5e8nP+ev3kd2jIvFAFAKYBkwfykAtu74AEzVtuKai+RmJDDW
h9ycAhbw+vHi/gUo71GFnul51HX2wcfOGuraGti8YS0u3nZnF80IvB2uQVlFFTpHzFDR0gM/Owvs
VlDCtRsOcLK7hb3Ke9g2dBCZXYdYNxtonbAWenGTDcCzS/r4j798g127FPHH//U/8Ci0EEF3T+OA
+Qvh9d62ejjdZAZC84IwP97fgUjPB9ix+6gwD3E51JR1cMvmFI5eltzEzI9pIzgpF0b6SkjkAwg1
sVitdgjN5ZnYZ2gpLCNDdlHxwHvf0gSu4Sm4clwHzyP4jXMc6aEvoLhpK7auX4sNGkfZMYhww1QH
O7cp4Zuv/gaHoGTY2xhBWUEVz72iEexl++q8lDR3IT/OBxrqiti+bQczLvGoL02Hvu4e7Nq+BZZ3
X6CP3ZT5sOZrAzAM69OG+HLFKlxzCGRvSy309ypg9foNiMuvh89TG+xlvUolFW0EJZWhMMkX950D
4fPkIg5ZPhTqzLwMQh5fwK59Z9g8OzJp8ygrLEB7ayMuHlfHHkUN+IQnw/HOSazfsBEqB0+inr3X
j66awD22ACPMQJhfskJhQR4O71fFHoWd2L5dGVlVbciN9YK6Gj+mnbDzjmI3raE3DcCICCfZOioG
JxCXlouWpnpk5+Sy4NYLh7vnhLalf/IiaruH0FwSD829m7Fu41Y4BqTAz/Ea7rmEsJt1D65euYDk
rBycNlSGhuph3L9/D8/cPGHBDNJ/+6ePceLcWdaT9RaOzeGGOZ54RgsBbnSgHfu2rcXzmDLhNQ5v
N8VlNchL8IbSrh04YnQNmTnx0N2zDes3bsJtFozaKlJhevo0uljQi2Jt7JFHOGK8H7P67sGOdWth
dukh63V24u7lY1BR3g013SMorO0QzITMAPQPjqA2KwI//bQK1+28UFJZi5qKQtQ2tuDWGR2s3srO
4+YNsLjnhb6eFlw7bQyVvars+jqKovoO+D2zZD333bh2zx0pid5QV1eGqq4eInKqMNLXhPMH9kBh
22787auv4BRVwM61ZDjd6c55fPH9Spyyecrm+nHioCZ+WvmDYDwS/RygoaQMZUU1OPiloLE4ETaP
nBDn8wj6524h2sMWP65eB7VdW6B7+Dy6h8aRGvwM27eswQYFZYTnViHN/ymMLR6ipTYH+vpGqO0Q
wfXRReG93M/uE7UdvUgJ5qMeu7Fj+y44BSUJ7WKiAejtY2axNguGRqeRnRqOPVqG4Pbl+RVd/P0/
/DOOnTqGf/mHf4Dmubt4dP0EVFh9b9+0xS07B+Qmh2Ht6p+gtkcJCgrqKGnogP3Nk3COyMZIVxWs
bK7Dxe4a/uHv/xtM7vugLDscWlrKUNHWRkBaMTrqCmF8UJ2991thZnkXnf2szbZRCoBYIMxbCqC9
E2MjLdi3fhv806qZUx5BuPsD7FXXwIkb9ohnN4uP/vwZzltewbpv/wL9Mw9x7eRerNt3Adkxfvh+
1VYEB3jhiz//BacvXIHCL3+D0qFruHZCEVt1TdHY1IgXj6xx4rwl1DZ9i11HrRHr8xA6J69OMQAj
XeXYvXM7C2yVKC8vR6r/Q2zZcxBedtexXdUEvawRuzk8gu0NS2zapI7Wnn5Ee7/Aw4c3sXPjblQ2
d6M81hU7VY7A1e4y9hy8hJ62Bmxd9z1CU/Jx3EAFyawz0ZPnhzWaR1CdG40tCgfQz3qUMvhF1dbR
jZHOSmz88WtY27nDRH0Ltu+/jJHBZuxY9TMzA+nwf3IOO/YdgycLwFtVDqKwOBfq21bAjgV1g52f
w/SOCwqi3fHJnz+RnpevoGRogXP7FLBmmzZeuNohLC0H9ucM8NnXm/Dc1REOvkHoZr31yQbg4nED
6BmZsHN4DcmRXjjMpvXUdyE8uwY+Djas3AKaW3/E9gMWiPN+AO1T1xHgYPXKAPDW8OSMIUzOO/BD
RF1BInRUVaG73xhZrEe+Y8V/4IZbFCJeXMeadcrIzS/CqX3KOGbxCKb6m3Ddg/UsW3KxTVkVyYnR
+OaLTxAUl4XH5/Sha3oZJzRY0FTQw3OXp/CKShJ66q8MAGu/vX2DGBvswtNbFtDeuwcb16yDnX88
MoPs8Z9//isusLa1+quPoX/6Bkw1FXD8ujMyIr1x/Jw1zhxRxpGrz1itRVDfsxMBEVFY9dW/wSE0
G1FOV6FmcgkxHswAapxEYXoANu/UQmd3K3ZvWoeQnAb2ng1hoKsUKr9sR0p1D8bYDdXjsRXUNLRw
yc4bkS5X8ckPv6C4qhYHd21gAdMJuSwYrfl5K5ycHmPjti3oYnt3u2mMYzdewPGKAdYpH0ZRdjoU
mAmzffQI3/3xzyyAP8YDRzsUVLcIvVGZAeDXJw8plbkxOGZ4BDvXrsIuZlBLm3pwzUQFm/UtkRXt
i69+WIussirYXjuDs5aXsfar/8S5xwG4a6aAbQZnBKP482cfQfe4OQzVNuHbDZqwtToFZb1TKC7M
wk7Wxu1Dc18ZAHvrE1A7aIzjJ84iIzkSR42O44D2LjwPy2LXtB1MzprjsPo2/LB9H7LifLFb3xSx
fs+gb34L4c438cvmPcjLzoHO9o24cvcRVDasg0tYOkIcr2PlOjU0sp74ce0d+Os3P7CeexRKop3x
pz9J7hPrv/0UeqwNGu9ex67bw3B0fgK/uHQMsnYx0QDwsbQwe0v8sE4J3p4v8fVHf4FXRhPqUj2w
drM6iivyoLR5KwJTCqG/8684ZGWP+pwIbFfTQWpCOFb+9ANiUrJx85g6Dp25h1OHtuHKy1igsxjb
FRWRlJbIzJESYjPYe/X9X9n94ATM9Hfjs5924cmN8/jLRz/Bzvk5nrh7oq27H+2LxADQCMAyYP5S
AO1sagSXDZVgfMNNKO/paEboy5v4fM022F49j8++XIfLly/h+KH9uHzLEVfOHcL9gCwWLeuwU20v
7l6/jM8/+QkWbBkzo4M4c+URLp3UxCXHcKCvAYc0VXDsvBVO6rJex9ErrDd1X64ByA17gcOnb0rn
OIMw1tdGdE6pYDrWsBvuVg0j1LV3wfH6Efyybj3WblNDdmUzwp5fwZq1q/HLhk3wTinHMOsFKK9Z
iW1Ke7CO9aAyiqtgfZ4FvKZxiEqjoGVmgf6uRuz49gdcfioZtufwi6pvYAQpfvfxzY+rcPTIYRw5
pIsvvt2EuIQw1hvTEXopopJo6BqbwOqkMcwfSNa/edYA991CcVx3CwLzOpDndxd/+ujHV+fF6PQt
1NVX4cHNSzhmrIXj5nfR0NbEDNJNnDp9CHqHz6GmTcR6gj1vGIBzhuxcPnHDjQvGUFRWwwvvQBzW
2I7ghEycOqAO43OXcUZ/L3YdvMDM1RMcvHgP/s+uvDIAgyPjSPa8g3W790M428N9yE+Nxs/ffgZb
10Ac0NiMrJZxeNocx6GLkpGWopDH0NBmQY/1tu0iSlknsgJK6ppIiA6FmsERYZmmdC9sV9iHyrpq
3L9uCaOjmjC9eB9d7H3t6pQYAP6cR3dLFeztHVgIl9BXFIUVP2/FpbPH8cV3m4S2deyQPi5aWrJA
poD0Rh4agI72Flwy3o3TD3yE+f1aSggIYz1FpS2oYPfEDJ/b0Dl9HVnhrtA2lqR7ThzUhcXFi9h/
9Dz6ma/r7ekVPlVixIKmEBwY7c31cLt3Fp9v1kSAy23sPWrOSvugyExwRpMkAJzW3o0Lly5BWUNd
mA94eBInbzmxdmcCa+lI2RWD3bCyD0ZWrD/MLc5hj7o6fKPzMTwkecCVX5fiwUFkRPnCKzJDWIdj
e0wNmqZ3cPvy4VfX0WYlRQQEh0JnrxLOW91igXc1Tt/zwP3z2rj8Mg5D1XH45Pcf4cSFSzh38jiO
HDuFA5oauOeVLmzznJE6HgakvTIATy8b4bDVEzy9aQ6FXUp44OQN84OKcAyIxy3W1vRNz8DazBBr
d+shjRl5TaNzzADYCyMAAY42OH7zpbAdl6umUFVRgYqGifBT3RhtwM5fVqGM7Sbk9hH8P/9f/wu1
7IKIfGKOP3+xVvpe7sepK09RV12C29YXcfjQXpyxtkfv0DA6O6QGQBgZ6sUx7a3sHrIfhoePYPf6
H6BhZovu6hQoa5qxnQ1Ad48Gipt7YKKzEU7x1RitT4Wy9gEkRvhB7ZAJrxHKoxygpW2E40dU8SAo
j223Drv3KKOgtBD7tI+gpCwLP/zvj9j1dxEXzpqxzs1B5FU2wPvFQ5w9fwwaekbCyE03a7NkAIgF
wUwNQFZW1jQNQJvwIE5TaRLWrfgWxuYWuP/gIY6qbsXvvt4o9PgUNm3CA/vn0FdTwlO/OCF3afmC
3Uy7S/AjC8KhMbFQ3bYJtx47wHifKm46h+Hq8R0wsfXFQH0Gvvv8I9x+5gQTjS3YoHsO4S43mRG4
OOUZgGHWoF/XXAJ/WpvFLwHeM55Ib4+kdyVD3NcNsWxhzvgQRNKnofm3+/HcrfAqOyevLvSRISHP
LYPntQdFrdi3Yy2ehErypRwL/Z04eP4mzHQUWS/sCvbvWo8vd+gLD06u+HE9rK9cwx9/98945B2D
gyo/wT6yBD3V6di5Yb30vOyFtb0bXt63wZXrj3DBRBu/bNkH5xd2OHvxJmxtTuAvn69Gbn0vxKLe
CQZgBCasp3XGIQrRDqfxf//zF2hgvS/VTT/B3T8Y67/7FNftnuOkzg6s0TiBKI970Dx5HV6PzKEt
fQagm+eWBzthuk8Bm9X0cO+eLa6Zn8Dv/vXfYOcdArXt3yOssBs16X5Y9e23sLp6A+tXrsRd9xjY
XzqEtTv3w5wFmD98u571ClPww9ef48zVW+w9X4czdxzw/N41WN98woKQGr5dq4X2oTHhZiozACMD
nTBR34Afdu3D3Xv3cOagDvYeuoCs1Ehs27gJj549hy4LfHZBCXh0Tg/rlPRgYXYICnon4fLEGj+t
VIC1hSn+9X9/hvDoaGxe/z1y24Bkt6tQMrJEUawXPmK9ucT8emQFP8Hf/9d/gF1wJnvTeTqFtQnW
zkpT/fHT99/izGUrPLS9D+0tK/CXzXrwf26NTWoGwnm6znqSm3fvg9V5E9YrVUNOfga2/PAd65Ff
xc9f/h5HmUH2vG2Cr9Yr47q1BVZsUIBPcDDOHD+BF6z3v+KLz2D5NJS1r9FXBmBgeBRlSd746q+f
4zAzwbZ3brE2sQHPA1NxxUQVl5wk19HPm7fg6eO7+P7b7/DCxQW7V/8NRtddcNNsN47d9sDYQAv0
d2/Diau2uHrqEI5YPWZG2hYrVm7D1UtX8M//659hH8aCn/QZANtz+7HX/BnK4x3wX/6//4S8xi4c
Vf4Zj9wCoLruK5y0eQibE/vxxXpVpEZ6QnG/CSI9H0Ld1BphL6zxu09/hM1NG6xctQ6+sUk4qrQO
+sfPs3ashN0HLiEz1h3btqvjsc0lbFY+iOy0aOzcuFFyn1BXwV1nHzxlHYPrd5/BVF8RK7cdRC+7
5LqkBmBgeAwFUU5YtXEPs14SRppYoP7+Z4REhOD7j75ipikWmutW4iQzE5pKK/AopJAZoQS2Pw2k
xYfiT3/8Pc5du4VdG1bhGrvnOF0zxqqt+9i1pYN//esKwZhu/eorWD1yxQl9NRiev467lmbQO2mF
MH8XmJ68gqcPL+Pjj79FVH4TM96dlAIgFgbzlgIQPgXQzYLxKFprcmFjdR5mZifw0icQgcER6Owb
QWF6CMxMTXHriTdErEeTEO6HxLxKiLub4OzmhsbuIVQVxOKUmSms7zqje2AASeFeiEzNZ9sdREqY
B06YmeGW3WP4R6egPD8VAVGJwsM6/KGhhQR/8rmN9dJd2U24urVX+BQE/9hiZW4i3AKi0FJThAun
T+HWvYfwDIrAMDMQoa6PcfKsJewcHJBbXInwADdkldQJD3KV5cW8Oi+d7NxV5ifC4rwZzphbobC6
Fe31Rbh+9RxOnDyL+IxiwRDx91RmAMTiPkSH+CI6qxxt1Xlw9wyFeKAXvu5OqGA9o+wYH5xk5/bm
08fwi0xCRUEGgmNTUZgZj5C4NOH8cuPU2yfGcH87XBzusffXDDeeOiEoOAy5BcUI9HVBcU0bRkZH
kBHvA1P2Xj90D8TAKAvkDeWwvnga1x/YwSskBqUZEdiwdT0uXrCCzX1XiEaGUZ4bhwvmZjh74SoK
KhsxyOrM26TQ02PHwD8yOdTbBudn94V9W916hoaOPtY2x5CTHCC0rTv2vujhD7eJmmF/3xJm7Hzm
VrRgpL8Dj65bwPLmfbh4+6GsvBzeni6o7xSjuiAZfhHx6OtqxT3W8/RPLMNQYypWrVmP4rZhZqQk
N0bhQUD2XtQWJ+PShTMwY+faIyAEYdHJKMhOhHdQmPAwpri3BU9tL8P0jDlSSmoFw5ga4o4TZ87D
/qUzMouqYWdliJ1aB3HJ/BJC0koxNCiCj8sD4Zqxc/JDNzvP/IEymQHgH9PkHw+tKUxh+z7Lzu0p
eIansXM9hrgw31fXkYu7B+rbOxHs/JDV7wxsHewQn1mE1Bh/RKXmCZ+eaa0rgJWFGU5b3EN5SzfG
RvrhZX8Hp82vwP75c+SWNQgPDvL3PCM+DP4xmehrr4abiw962DUZ5uOMnIomVObE4MwJM1x7+ACu
gRGoKS+Ef1g0ygszERSTjMrCDNy7c529L6fgGpoqmOzW2nxcuWiGczZ30CwaQIyfC/zictkrg3j+
+AEK6jpRmhX2+j7BrvuijEicO2OGC5duoKSWp0b6XqUAxKw+uUmR8A6NY8cmeXB0cECEQG8XpOaV
wfP+LeEZmrRwH1y//hje/h7ILmuEqLUK3gHBqK2pxPMnd3H21Gncesr2NzKC3qZK2FiewbX7T+Hq
E4C2nn6Ev3yCW4+82PvQgFtXT7F2dR1FjZ3oaauG7W1LnDhxil0nmcLDnjyYLgYDQJ8CWAbMXwpA
+j0AbDuyz2pzxvjDU+zmzp9KFw9KhmT5E7v8Iz78SeBBsYhdVL3CE9T86XjZ5475w3O9wjKjwkfM
+Hb5U9sCrFqSJ7v5k7eSL9xZaAZAuKjaJN8IJvtcMj8Gfnz8KX3+USQZ/KOB/PUJjxAIN+BhViDu
k3zeWjzAn03nSM6L7DPPHJ4r5k9yy+BPSvN1uGQGQDh//FyyoMqD+NjYCLrZPkfHJPXjPUwBdm5H
hyXnln+sjI9q8L98faGtsL982JW9XdLlx4Snn/kT5zwY9bFgyY9lUPjOAQbbD3/vefCWIGlTDbnh
0DliCkkpa1ts2339r0dQ+E2e72+iAXi171fNktVd2B//LLy0bbFeM99fNzsfssX4+enued12+ScG
+M2QPynfy5YVPmnCjlm2zEB3Pc4ba+DiXReMsuN78zphbXTCSA8/dv7pC17G2zmvC6+jbN9DYknb
HZS+ubJr6rH1cdxwjRGmR6RPtjNvIYEdg3C9smOWGYBX+x6YsG9eZ75t9t7JriM+QiVi1+mrASz2
l18//PzIrqOJbUf2tPvoq+X5dytI2pxwXplh4N9fIZxPdi56WNkwW5gv0/+qTUrasKiPf6fFEHsf
xa+uTxljI9JPQUwok7Q7dv54+2J14O9rP3s/eUpPguQ+0S+W3RMk1wU/FzIDwKdln/jg9RXOExNv
i/xTH/ys8/PEzxE/GaOya4qPZrH3jn9iRXbosv31TGir/JNLvGyYLzTOzAFbXgbfDh8Vk8HbAV92
sRgASgEsA+YzBfAuDWi2xffJG++CNADveFHNlfh7yr8t7UPW4a3q6nw1avQ28XrzNikzMfKWmW31
MBPQ0dqI4pJyFvT6f/O6mYmE42IBrL2D9SB/Zft8OX7sMgNAkoifF24A5rNdvKt4ffh1v9B+CIxS
AMuUuUwB8DLeaPiNXHaj4l8/O5/i9eb7X2iOm58bXi95dZ5P8QubnyN5r31QsTrxtiP3tQnibYqf
x/k8Bt7T5jdG3mOV9/psiH/Gn6dU5L02UfzYP8R1tZDF2wI3APPdLt5FsvsRD7b9/f3zLn5N8TpM
7hDRCMAyZS5TADzo8nVlbpc3QG4E+NAcvwh4o+LTsr+yctn0TMv534nlsn3xv/zGIG9a3jKym8jk
ZSaWz3Rapol1lE3z5X6tnP+VlfPpieXTnZ7pdvh6E8v5X1m5bPpt5W+bnrg9WTmfnlgub5ov+1vL
THd68jb5X1m5bPpt5W+bnrg9WTmfnlg+X9N8/xPL+V9ZuWz6beVvm564PVk5n55YPl/TfP8Ty/lf
Wblseqbl/O/7HB9fV3Yf5JI3zf/+Vvl0p/l++b2YB3J+H5oIGYBlylymALgBkJXxRhQeHo6CggIU
FRWhtLQUxcXFb53mmlzO/04sl01PLJc3XVJS8sY0H9qaWM7/vq2cz/Ny2TLyyvn0xHI+LaujrJz/
lZVPnJ64PP/L52XlsumJ5fKmJ9ZLNv228neZlu1f3jKy8onLyJvmmlzO/8rKpzMt2//byifX8bem
+Tb4+vKWkZVPXEbeNNfkcv5XVj6dadn+31Y+uY6/Nc23wdeXt4ysfOIy8qa5fq2cl73rtGz/byuf
XMffmubb4OvLW0ZWPnEZedNcv1bOy951Wrb/t5VPruNvTfNt8PXlLSMrn7iMvGmuyeVxcXGCAeAd
Mdm9XAalAJYpMzUAmZmZ0zIA/OlX3hAJgiCI+Yf36Pl9+F0NAI0ALAPmOgUgK+Pf2sa/PpggCIKY
f/g9mwfzdzUA9DHAZcB8jgDk5vLP8xIEQRDzDQ/o0zEAlAJYBsynAeBDSgRBEMT8M90RAEoBLAMo
BUAQBLH04SOw0zEAlAJYBtAIAEEQxNKHUgDEFMgAEARBLH34COx0DAClAJYBlAIgCIJY+lAKgJgC
jQAQBEEsffj9dzoGgFIAy4CFZADGpD9RNjYgxsjEX1Tr78Poq18BfFfGMdzRir6KCojKyjEkmrz+
OIbaWzEq+1W6X2F8sB+D7W9eMG9jfGQII+wiGB8ZxkjfhF/0Gxp4Y54gCGI+oRQAMYWFkAIYE3ej
2dMVedfvo7ehDe3BL5F/30v6KlB75xKKHcKkc+9KF9JUdiJRQwep2tqIV9VCa0Gd9DUJ9V4v0N30
ZqOXx3BdPqq8/aVzv05/Tihybj3BUEM+Ir79Ge3VPUJ5Z9ALZJ9/KEwTBEHMN5QCIKYwUwPwLr8G
+K4jAOMD7cg+oAL/L1ejObcWHSHPkXPDRfoqUGV9BgWPgoVpUWE22lOzMSL8ADczD6J2tCUkoL9d
0niHutrRV1UOUUEiMozMIev3dwY9QuqFexgVizDQWI/e0lIMdnZjjDX84Z5ODNRXoyMj79Vvf4/1
tLDtJmJIzH/IaARD/LfUB/hIQAu6s9LRW9sqWXB0EN0ZKWhPyxV+W1ycE4TMy/cwWFeA6B+/R+rZ
W8I2O/2eIt3ktrDKYH0V2uIT0FffKcwPd3VgoKEWnVkFwryoMAuihtc/1tGdlYrOgnJhepyZJVF5
9at6EgRBvAv0KQBiCvOZAnj7NwGOojMjGU1R0RjoGUJ7wDPk3nKTvgZU25xHiWss2gJfIEnnALKO
HEDxyyAMNlQi99gRZJkcR/oRM3RVNaPUwgAxe/ahysMFmcfOor20DuL6OlRcO448uwB0RTshctMW
FN+zRbb5KXSW1SDXUAkJOkeRpLgDBQ4hGGosRJqmKlL26SDx0Cm0xQWz+jyCKDcaEb+sRMZRI8Tt
VERLZjkaXW2Z0TBDlqE+cu+7ob8wDllX70Ncmo4864cotTmNirBsiOK9kGX+BIONxcg2PoxsE1Mk
6+ijs6oN5ZcOIlZVDylqe5B0wBDZRnqI3auDvvZO1D68ioxjpsg8chjlbmEYaS1Dpb2HYDYIgiDe
FUoBEFNYCCmAybR4PELeXR/pHFB78zJKXeLQFuCIJK0DqHB0RWdxDeqfXEHYyu0osLRE4vY1bJ3n
KLI6iYYC3rMeQPLOTUjYq4VkTU1knbfBoHgcrR63kMMCNSff3BhtBWXIPqaHjsYxjDckI9X0Akqt
L6DQPkJYpic/E23hHsi5/gDdyQGsR28jlHcG2CL9wi3W+49F3rmzyDXWRZSaMTrTo4RlxaVpyDR/
gFFRI7JYAK+0e4xci6cY7W1B+R0r5J45jZj1q1ARmML2dxx1mS0YrYxFgtZRYfulVy6gwtkVcavW
IOvMBeQa6SJyhxrE030UgiAIgjHdhwD5L7eSAVjiLIQUwGR6ot2QtP+ktJc7imz9vagKy8dgSzO6
cnJR/8wGCZqmqHhgjcT9ZuhkZqSCmYSagFgUWZ9EU3EXMFKPdMMTmPAsoUCT83Xk2/sJ03lnjdCa
V4Lcc8asnmyVsliknb6CsusWyLP1FZZpi4tES4ibxACkBCL9/HWhvMXlNrIuWiLD4ABqolLR6v8U
MXuN0Z4ciuxrthCXpCLd7KqwbFe0O0K/+Ctyb3ugxe8pko9cRCc7fxlaKij1iEHpzdNoLu3BUHE0
Ms9cE9YpuWyJSmcXJCnuQkN8KtpC3ZmBuIVh6voTBDEDpmsAKAWwDFgYKYBJDPWi+MIhJKhqInmP
CtLNrTE6wnrvXk+QrLOPBV091tt3wWBbE/JMdJGiy7TfCF0VTSi9fgbNggFgPW+T8xBPevC+xcsW
hc8DhOnCS6fQXliOAsuT6O1mq5QnIO2UDQaby5Glr4HEPcpIPm6JztRI5N+1gygnGlEb1iBVXxcJ
agfQVdmAChszJOsaIPuoHuL0zqIrIxp5d55AXJ6BLPM7wn7Y2UHevu1Iv+yEvqIkJO9VRqbJKcRu
347K4BRU2F5kBqAbQ6VxyD5/U1ij9MpFNGXXocn9FpK0dZCirY1yj0iMNJeg7MFLSgEQBDEtppsC
4Pdrfv8mA7CEWYgpABl95aXoLauWzkkQ11a8WTY2iJ6iIgwPSELiSG8Pxkb49BiGe3pZvYTiV/AH
+WQfMRwR9bJlR4S/43yV0SHhYT+B4X623WKMCpsdxXBfP+vJOyPj8i30VZRjqG9YWIxtBaLSYgy0
dbLtDmBsaBAjbFn+McDh3tcX1PjIIIZ6JPPD7Y3orawWtjk6OITRfpFQZ/4RwmGRZBleJ256OOLq
cvQ1tAnT/COJ4ibpA4gEQRDvCKUAiCnMZwqAP4W6mOlN8kH+QyfpHEEQxOKBDAAxhZkagKysrGkb
gHdOASxUxkYxzo6JIAhisUEpAGIKCzkFQBAEQcwONAJATIFSAARBEEufmRgA+hTAEme+UgB8BICP
GhAEQRDzz3RTANww0AjAEmemBoA3pukaAEoBEARBfBimOwJA3wOwDKAUAEHMPfzmWlNTg7q6OhLp
vVVbWysE5elAzwAQU1goKYD6+kZUVFajuqaORPrgKi2rRGdnt7R1vj/8hs1Nc3FxMYqKikik9xIP
ztNNqVIKgJjCTA3ATD4F8GsNtqKiWmiEo6NjJNIHV0dHl2BKZ4v6+noh+Mt6byTS+6i6ulowAtOB
HgIkprBQUgDV1XUYG6MvuCUWBj09vWhsbJbOvT/cAPAbNr9581QAifQ+qqqqmrYB4J/rn44B4Pdr
GgFY4sznQ4C/NgJABoBYSJABIH1I8XbC28zEMj4vaz8zMQCUAiCmQAaAIKZCBoD0ocTbSHl5udBj
b25uFob7m5qahIBcUVEhvD4TAzDdFAB9CmAZQCkAgpgKGQDShxJ/ToQH/evXryM8PFwI2NHR0bCx
sRHKZ2oAKAVATIFGAAhiKmQASB9SDQ0NKC0txbVr1/D06VNcvXpVaD+8nL8+EwPA77/TMQCUAlgG
kAEgiKmQASB9aPFh/5KSEty+fVsYjpelA/hrMzEAvEc/HQNAKYBlAKUACGIqZABIC0E8HdDW1ia0
H1nw56IUADErzNQA8N78dAwAjQAQiwkyAKSFLEoBELPCfKYAuAN9G9wATNweQXxIentFs24A6IuA
SLMlPhpAKQDivVkoKYDy8iqIxQMYZI2NRPrQam1tZ0F79r4JkN+0uWkuKysTHu4ikd5H3Ez+WodK
HtMdAaAUwDJgoaQAmppaUFVVi5raehLpg4t/NTVPA8wW/BriD3Txz3GTSO8rbiT5qNJ0oBQAMYWZ
GoCZ/BjQdB0rQRAEMTtQCoCYwkJJARAEQRBzB40AEFOYzxQAz4ESBEEQ8w8ZAGIKlAIgCIJY+lAK
gJjCfKYAuKMkCIIg5h8aASCmQCkAgiCIpQ8ZAGIK85UC4CMAlAIgCIL4MFAKgJjCTA1AZmbmtA0A
fQqAIAjiw0AjAMQUKAVAEASx9JmuAeAdNjIAS5z5TAHQQ4AEQRAfBkoBEFOYzxQAGQCCIIgPA6UA
iClQCoAgCGLpwx/Cno4BoBTAMoBGAIj5YmRkBO3t7ctO/DogiA8NpQCIKZABIOYL3n5SUlKEGwu/
GS118ePkx8uvH4L40FAKgJgCpQCI+YK3n4KCAjQ0NKCurm7Jix8nNwL8+iGIDw2lAIgpLKQRgKHe
ZoSEhCA6MV1aMn+M9LUK+46MT5WW/DotjewG3/7m8RK/Dm8//KbCg2NNTc2SFz9O3ub59UMQHxre
FqdjACgFsAxYKAagPMkfq1asgqaODtSVtkNT7xzaxDPLnY6LOxGbkCmd+20q00OwZuUqqLN9ayjv
gJr2abT0sZPyK9w+fximj4Olc8S7sBQNAD+W2traV/N8WjZPBoBYSPAR2OkYAN52aQRgibMgUgDD
XdBUWAWHiGJpwTgunTZFVFELmx6Er5sjHD0CwUOyuKMeBWXVwlIVpYWobmpHfU0ZslIS4PD8JTr7
x5EXfA9/+fwnROcUoaqiCOHB/nBx9Ua3eExYr6wgB+VN0pvyWA90ldbgcdBrc2J11gSheQ1sahgB
Hi/g6OYPtlmB+pI0PHN4gYN6ajjvFCeUhfu7wdHJAz28guN9iA+Lh+jX/cOyZKkZAB7oS0tLhaF+
Ps+Pi6usrEx4jQwAsZCgFAAxhYUwAtBXnQLt3YcwIJ1/zQAsDVWxW/sg9FS3w8DsPlLCHLDv9FXh
1fPHdWHjFgXzA5vx3Xp1HNq3C6rHriLc4yb+8tl38A6LxO7N30Lj6CkY7tkK84eBbK0+KO/ciaSq
LmEbAw2Z0FHUZ6WTGYK1kToUNA9AX20ndIxuoiw/BQrrNuC4iRm++uRj3PZLgfttSyhrH8FJ4/3Q
NDyP9v5OuD52RueQdDPEK5aaAWhuboaHhweeP38uHBufv3//PiIiItDU1EQGgFhQ8LY4HQPAn9eh
FMASZz4NwNt+DGiwKQd7d2lg4tojI4NoyIvE1jUa0pJR6Gsq4/ZdG5hetRVKblw4hptu4bhwYh9C
S7l9qMVqZT1UVuTB8Dg3CSJoaKtBqHV7DvYdOoeMOB8cMrHiJQLD7YVQ37VXsoyUUbbv5uI4bFu9
F8PSMmN9RagpauLGs3hh/vHVMzC/9wTK336F3Zp62K+njb999S1SqqZaCULCUjMAsl6+ra0tnJyc
8PjxYzg6OqKxsVF4nQwAsZCgFAAxhQWRAhgfxIl923Dw4jP0icXoqCuA0rZdCImJgfKadUiubkN7
eQIUd6rD1fkhFPTPoK+3DXu2rsANt0hYntJFZImIBflcrFbRR3FBMpSVjrA6NwgGoLJH2AkeXj6B
jZt2IyC1QtithCGcNVCA3tlH6GX77mwohvLWnQiMicXedesRW96Cjup0qCrtxcXTZjA8YQtxfy/0
Vbfi/CMXHNq1Fnc9opCfGYnDBiao6RnGMLtgXp8ZQsZSMwBc/Fh4b//u3btwcHBAW1sbPQNALEhm
MgJABmCJM1MDkJGRMS0D8FsPAQ62VeKwjio2bt6MLUy3nvgJ5fE+tlizZjVWrVkPx8AcjAy2QW/z
BuxQ2IkNW7bDPSYLD2+ZI6mSNd7uEugcM0eXqBNaa9fg/JWHuGBtgXrmDTiV0c/wxQ870S+ZfcVQ
Zw2M9dSxge138+ZNsHngLZQnBz7GWrbv1cyE2PlmsX03s4C/AVt37sSatWvhGFuGyqwQbN2yCTu2
boXVE392IbXhxlkbtEzNZyx7lqIB4OIBn5sAronlZACIhcR0DQB9CmAZsBBSABPpZY2sf5BVaALD
YhFEAxPLRiHqEwtT4+Njwr5lNRkbkzzoNz4+ArF4kJVLXhkS9+L59ROwfCQxFvLg++4bkA36SxgZ
6GP7nljGjlMkuVBe7Wt4gJVJIz6rj5hdBGM0BDCFpWoA3iYyAMRCglIAxBQWRApgHsiNfI4dClqo
76Kn8z4UZAAI4sMx3REAeghwGTCfKQB+8yeWL/x78blx5MGxqqpqyYsfJze9/NohiA/NTAwAjQAs
cWZqALKysqZtAN4lBUAsXXhvgt+EiouLl4348YrFknQVQXxIppsC4PdrMgBLnPlMAfB1CIIgiPmH
RgCIKVAKgCAIYulDBoCYwnylAGgEgCAI4sNBKQBiCjM1ALwxTdcAfMhPARAEQSxnpjsCQN8DsAyg
FABBEMTSh1IAxBQoBUAQBLH0mW4KgBsGMgBLnJkaAPoUAEEQxOKBj8BOxwBQCmAZQCkAgiCIpQ9/
qG86BoDfr2kEYIkznw8B0ggAQRDEh4FSAMQUyAAQBEEsfehTAMQUKAVAzBf8ZsKHIYuKipaN+PHS
VwETCwFKARBToBEAYr6gHwMiiA8HpQCIKZABIOYL3n54r4J+Dpgg5h9+7U3HAFAKYBmwUFIAj84e
xanrL6VzQILHXWgeOgl5g6cRvg4ITC7iOwWvQX5SAF4GxUlelOJlewXKyspQUVER5B3/bumHsQnH
9G4M4fwxA/inlUvn5cPPz1hPPe49foRudr6nC1+/r7EIDx1eYFha9qvwc8MOpaEoEU/cfKWFHxYy
AATx4aAUADGFhTECMA79NZ/i7z9eh+4xPj8Mg/Wf4P/6aAU6hfk3uW2ui3v+yQh/cR9P/VLR192O
5vaJw6zjOK6mBGuHQGGf2dlZaOoQSV97OwO1WTh+8ioGpPPvQl1eJFb9+BeomdpIS6bSUZIIswsP
MNxdAWUtDfRIy9+V8kR/nLayx/hQP+obm6Slv06Cpx2sHvtjqL8bDc2t0tIPy1IzANXV1WhsbERD
Q4MwPXmeDACxkOD3wukYAEoBLAMWhgEYguXxI9i2ey9Cc1sx2p4PXdVdUDt2CmXlxbC+fUdYKjPc
DdedQuHy2BJ3HJ2guuL3+ONKDXh6O+O5X5SwjIwz+vvwLCgdzc3NaOtg5mB8GE53LLBHTQ0qe7QR
lVvPKtgNi+O62Lp1EywfusLD9jj++z/+Dk/Ds5AT544tm7Zgg4IqMkpaUZ7mB3W1PThkZo7eCabk
waVTCE/NhcXR/Uiv4xfQMG7fuISitjGMtRbA3MYW9yz18N//6Q+sJ+4JPS0FaKlrY8OGHUgqa8dY
fwsumh6GGqvX5ce+GGPn4uqFY9ivpYv167YiLqcCd0234R//5U9w8vTGo+dObB+jeGZzElu2bsW+
E1ZoaWuBrYWpsA01raMoqq7B0V2f41/+uAruPh546ubPVumFldl+dqxboX/yFvpHgcc3TmO/zn5W
l/VwCs4QjmcuWWoGgAf6sLAwoV03NTWhpaUFSUlJSEhIEIwAGQBiIcGvvekYAEoBLAMWRgpgEGeN
TWFz/Spsnnojwd8Rl62uweTcGeRnJ2Ovnr6wVJijFTQv2MH1yUXYBSXC4dIxWD6LQqznDRy/9hjZ
KTFwdnZGenEFruir4OsVa7F9+3aoHTBBe58Yno63YHnlCg5rbMI2E2t43LkAtYOXUFVVBnPzc/Dz
dYaGjgmKC1OxbeUGJBVWINHtDpQ1TOH2zAqb1A1R3dDEgrQUcT02/vg9Hrl4QFfhJxyycReK92sr
IrluFKM1CVilaoj0hAAoa5qgrbUS69asgEdMJjxtT2Lv2dt4YXEcP6xWwRVWr68++TMcvIKxe+tK
3PdNRoyLNTYesEBG2EuoG15BQ2k89pmcQpSHPbbu3I+KqirYWJ6Gd3QSHB5YCdvYs/V76F1/iagX
12F48TmKE11xyPIGfO9fhoqeufBwmqnqTtx18IaB+gacfRSKgigHfL9DG/1C7eeOpWYAeJCPjY2F
hYUFysrKkJmZiYsXLwpfk83NARkAYiEx3REAfq3SCMASZ6YGgDem6RiAXx8BGISJviHCk9Nw3dwI
+w+bITk1BUdMjAUDoGZoJCyV4H4L+y87wOXReThEZML77mU4xdWiIOIxzt55Bh+n+zhy5AjcopJw
6bgxArIahfU44pZyGOnpwNLKCqb6qthx9DwuHjoA+5BSyeuiTlRmhsPwxG3U5kdil8JxoZyFLeho
qeL6jSu4bOcjLZOQ4f8AP67dCqOjR3Ds8D78sEULg+yYD7LtF/CMQ3sWNmoZoyw3AQfN+ChGG7QP
GAgGojjqJbROX8FZnd1Q0D4KK1avw/u04Mp6+camR9DOV88JxDbDSyhIDMDxKy7sTSrC4XPn8dji
HE7bsF49Z0yM7MRQGOjoCNvYp7wJWpefI8XvGayfJ6K7JASmV2/gGqvjfe88YZUMr6s4cuIczp47
hgIem1oysU5FH3P9rPpSMwB8mJ/fGBMTE5mBNIelpaWQZ+UjAZQCIBYa0zUAlAJYBszUAMzkx4D4
zVE+AzBQUUVqvRj3jLfh4y2HMDbUynrNGqhvqsX2n3+BhfU1bPz+T1CzeIHnd0xxPzgd4ffOYZPS
Kbx4eAGGVk+k25JgpKYK96Rq6RzQU5mMtd99A/vnz3HaQBFfqZ5EepgT1q3bgRs3rLBeYS+S05Ox
/ouVcA+KgYHyWhiZX8Fx1ps3PmcPfycrHLG2k26NHe+ICPt3bYZvVou0BDi8exUeBSTB+qgW1I9a
4ITuBvzHGm201OTip09/gZePD1T3aQrPAGT43seWI1ZI8H2EXaraeP7cEeqqeshg50hLWwVVYqAu
yRW/aJ9GdU4kvvlyC/x9XkL7+ElUZMdj86o1uHbjBrYrKOLGzavYsmYD28ZzaO38GTtOPUZhmCN+
WK0FH2dbHLC4gfxoN/zMzuMNts6GHzciJD4LRw+qILF2FKPVcfh2ixoZgBmKB/zk5GThmuApJ1k5
GQBiIcGvvekYAEoBLAMWRgpgFMmxsWgVj6MuLw3xabxXPoio2Bj2Cn8ILoz1ri7D2z8QqYXVqChK
R2FdB4bay3Hn5kPEJSUjs+jNp/DT4uNQ3frmg3+5iYFCL83JzR2hCdlCWWqEp1AWlycxCz4OD+Ed
WYCRgWbYXLLE1YcvwE4PmiqykZJXJizDGRW3I8A3ACJeQSnV+UkITWEXWVstbC5fwkt3DxZoeW59
HB72D+HlF43E9BThKf722mIES+sQ4/9SqENUdhWbG0VMbJSw3f7WKgTH8fUH4fDgHoJC45GUKcnV
V+bECOt4RWcK83FBkm24eHghPrcSGOrAg9v3EBmbhJQcyXnPiPYRlvFPLBTmE+Mj0do3jnFRMwIj
4jAklM4dS9UATH74T1ZOBoBYSNAIADGF+UwB8AcHieXLUjUAbxMZAGIhQQaAmMLCSAEQywHefviw
ouwBuaUufpzc8PDrhyA+NJQCIKawMFIAxHKAt5+UlBQUFBQIbWGpix8nP15+/RDEh4ZGAIgpUAqA
mC94e+C/B7DcxI+bID400zUA3MSSAVjiUAqAIAhi6cMD+nQMAKUAlgEzNQD8S0+mYwAoBUAQBPHh
oBQAMQVKARAEQSx9yAAQU5ivFAAfAeANiiAIgph/KAVATIFSAARBEEsfPgJLIwDEG1AKgCAIYulD
nwIgpjCfIwCUAiAIgvgwUAqAmAIZAIIgiKUPPQRITIFSAARBEEsf/j0s0zEAlAJYBtAIADFf8PbQ
3t6BNhKJ9F5qbWtn99Y3f+30t6AUADEFMgDEfNHe3omy8kq0sZtXWxu7kZFIpBmppbUdxaXlb9yD
fwv6FAAxBUoBEPMFNwCdXfTDOAQxG9TU1k/LAFAKgJjCQhkBaKoqRVxMNCIjIwXll9ZJX3lHxodR
UloMUf8AGhsbMDwmLScWDNwA8OFLgiDen+qaumkZAH7/nY4BoBTAMmBhGIBRHFfahDXblKCpqSnI
9kW49LV3ZKwPHp5uqK8shM5+bdS+2ZaJBQAZAIKYPaZrAKabAuAjBjQCsMRZGCmAARjrHUDRpKDd
392KkpIChPp6Ibm4Dh31RXBx80L3oOT1lPAgODs7I6ekWZivra2BuLkYmnr70CAaQnpMIjr66adY
FwpkAAhi9piuAaAUADGFmRqAjIyMaRmA3xoBMFHdDgV1fRgbGwtKKmlBZ0Ew/vjxxzh4yBBffPkl
tAwNsXfHLzh22xnlGeHQ0d4HMzMzrNqqhLzKWhw+pI2M3DwcMDRAk0gMz8eOqO0aku6D+NCQASCI
2WO6BoA+BUBMYT5TANyBymcYJurKOHn1AV6+fCmoorkXdWmeUDQ8Iyxhob0T7mntQH0yNA5eQH1l
Pk4eOwB9fQN89PFn8I5Lw6kThshiJsPgkB6lABYgZAAIYvaY6xQAfQpgGbBQUgBHNLURU/7m+sWx
TtA8dl6YtjigjsDsDnQXhMHQzApXju3D/nMPkZ+bhhU//oiXYQkwOWaADFavffu1BAMwOjLC6iWs
TiwAyAAQxOwx1w8BFhQUkAFY6iyMFMA4Lh/ci5Wr12Pz5s2CTt16gdr8GJywuiMsYWt+HFGFnegt
i8eZK0+Rk+SLLRvXY6+WJn5etwPhabm4anUeBcXFOGN+Bm19Ijy4cBVlbdIHBogPDhkAgpg95toA
UApgGTBTA5CVlTVtA/D2FADvrQ+hp6tT2AdXb5+YlY4L2+CMsb9jfHdsPyMjkrLBftYgeyWNdmxs
TFiW10Oyzjj6RX0YEVYiFgJkAAhi9pjrFAB9CmAZMJ8pAL4OsXzh32DWydoRQRDvD6UAiPdmPlMA
/ClUYvnS1dWN4pIy1NU3op5EIs1YtXUNKC2rIANAvB/zlQLgIwC/lgIglgdi1g74TYJEIs1cfSyI
D4+wG/c0oBQAMYX5TAG8/VMABEEQxFwykxEAeghwiUMpAIIgiKUPpQCIKcxnCoAeAiQIgvgw0BcB
EVOYqQHgjYkMAEEQxOKAvgqYmAKlAAiCIJY+lAIgpkAjAARBEEsfSgEQUyADQBAEsfSZ7ggApQCW
AZQCIAiCWPrwz/VPxwDw+zWNACxxaASAIAhi6UMpAGIKZAAIgiCWPpQCIKZAKQCCIIilD6UAiCnQ
CAAxX/D20NHJ2xH/2Wf+l0QizUT8p7VFkwL2b8Hvv9MxAJQCWAbM1ADQNwES04UH/tLySnYzaUdr
G4lEmqlaWtpQXFr+xj34t+A9+ukYAEoBLAMoBUDMF7zX0tnVLZ0jCOJ9qKmtn5YBoBQAMYWZGgDe
m5+OAZjeCMAYaquqMTgmmx1Gc0srBsV9KK+sxKi0+J0YH0FFYS4SExKQICgRLZ390hclNNdWobGl
SzoHDIk6UF5RJXc/rQ3VaO7sRW9XG7r7B6Wlr2msqUaPeOqaY8MDqGtsfmObXe2taO2e3jDeYoYb
gLb2N288BEHMjOqaumkZAEoBEFOYz2cAuAN9F/rqM/HnP/xPPInIkxT0VEHHYD9Kqmvx0s0NYknp
OzHSWoBVn3+G3aqqUBWkgZiceumrEo5u+Bx/+Emd2Q4J94134L/+69/QISuYQHKkNxLyKmF76TDs
wt40NOODrVj1t3/Dsfve0pIJtOZijfI+tE1wAA+vHMexB/7SuaUPGQCCmD2mawAoBUBMYSGmANwe
WOHY8aMwMLooCco9ldDYp4WKdjHqGxuFZWoKMuHl5YW45CJhHqMiBPl6wTcoGvx4ZPRWJEH7wHnp
nDzGccFAFX/+diPyW4fZbBf2bVuJv21RRTvbTktlobCf8JgsYenu9iZ09PbD5tx+PA3NFspkJHo/
honZcejoHkHHqzqMIjLIBz4vH2GV8n7wsYeuhmJ4evrg+GEdnLULRltzLdJT4pFZXC0chzfbX0SK
7FwNITLYB14+oegWS853anwYPL280dAmEub7OmqEOibls/U5wz0I8PGCf0gseDVETdXIzCiWvPYB
IQNAELMHjQAQ782CSwGIG2GodxA9rNGd1ldBVFkXi4H12HfwIPJz06BteAT1NcUw1teEiYkJNq3b
AK+kHDw0NYCi1hEc0NPBI79YFtYlDDfnYd23P8DoxAmcYDpleQ0tfW8O0V9i5foHD+GJXzq6yuNg
fOQwDp48iYq6apwz0hX2s2vzWjwNTofHg9Ow9Y6Dnc2xSSMAwzhjuB/F7YOwu2iAxyH8tTHcP3cE
2/boYN+erfjrZj3UVeRCdfMGHDxoiC8/+Qh3fBJx89QefL9JCY6uLjhz0AAHj5tAY88uPPOLgcvV
09iitA9HDfRwzycKMc4P8cv63TA7dggnbz5DY1UJ9FWUhDruVtgNv9g03DTSg/I+Ixjo6uB5ZBpa
i9Lw8kWIpJofEDIABDF7kAEg3puZGoCZfArgXVIA5fGu+N2//hHKyir47E//Aj1rD1baIzEAeRnQ
PXIUnZ0tuHflBAwMDLD6x89w7JEvguysoK6uA9vH9kjNr3llAAYbs7F1zSbY2tvDnsnB2RPdA6O4
bcmC+q5deBoUBavT5/CcBV/rq7dgd+86njm54ZjpEdR0dMLx7kVhP9vWfgOtKy/g88ySGYwEPL32
pgEQN2Tikz/8O3YqK2PlV/8bq3UvY3ywHrvWa0pSFr1FUDQwxvVzZ3DuRqCwzhNrM1xyCIaNuT7C
ygfQm+2Hf/tfn8DggAHUFTdh+75jCHB6DI29Wrh9/wnisyqQHvwSe5XUYH3jPiKTChBudwV/+PP3
OMDqqLj5Z+iesobHfWtoaurh/hNHpBfWCvtaCJABIIjZg1IAxHsznykA7ih/nXFcNNwLa6dQobHm
Jfhi9cZdqGuqg97B/cjLTcNB1lv3e3YXG7bvY9vLhaHaFmhfeoay0mLksXVumKhhxUbjVw/biSqT
sFfLRDr3mvrqcmEfjR3tMN2vj9iCWtieUcc3W7TR0FiNQ8aGCPJ4gTVrdgn1tjiiCtVzT+D+9AIe
+MTh0ZXDrJcvSQtwXlgb4+iVJyhk2ywpSMOWDRsRn5EOza1KKO4cQmO6F1Yo6+PpzUs4YHYf42Mj
OK67CxaCATBAUGEXmtO98d0Pa5CcmQf/Z7dw3uoJKivKmXEqgNONY/j6OzUUVVUjk70e5mOLL7/c
iWe217BumyqyWB0drl/EjUeeKC8pFo7N+ogKVm87KZih6dwo5goyAAQxe9AIAPHezGcKgD84+GuI
G/Ogo6Ev5N5lXDLWwf0XHrC4bIHiolyctLiE6pIsaOzcCMXdqti0cS0uPw+G18NL2LxdEYoKynjk
ESNdGxjrKMP2H77Bxi1bsEWql2EZ0lc547hkaoqMxiEE3T8N5SPXWVkfTE6fRHllsWAwFBV3Y8fW
9TCz9Uaw2204haXB+cEFuMQWSrYw2I7DWprIbHj9qYCXV41x4ak/4l3uYOXKdaxem7FW8wR6u+pw
aOc6bN2pgJ9W/Ai7oBQ8vnkGwTkNbENDeGp9FBvZcWzZuQthyfkIfXETm7fugJLCbtxzjkBypCe2
bN0KFRVFmF6xYxdlF6xPaGKHoiK27tJASn4ZHG1OYfNOybl4EZKKxsxo3L3tJq3Zh4MMAEHMHmQA
iPdmIaUARocG2HKTPlo3NgwRa7AjIyMYGxsTRhIkxf1obm7FKNvviPRp/baWZrR1Sh6Mm0h/bzda
mpvZ8hKJxG/uY5g18FF+KPx4pIck2w/GhoR1htkCo6NjGB0Zxgj7OyL9KzA6LFxUbzKG3j7J5xW6
2lrQNzCMMXY+JAyjubVNeMCRn6MRdvGNsmOT0cqOo2fg9XMKfP2W1tcfU+zvaReOfSL8+MSvNyFs
o71LckGPDIrZxfvmxf0hIANAELMHpQCI92ZhpQCIpQwZAIKYPWgEgHhvFlIKgFjakAEgiNljrg0A
HzEgA7DEma8UAI0AEGQACGL2oBQA8d7M1ABkZmZO2wDwBkgsX8gAEMTsQSkA4r2hFAAxX5ABIIjZ
g1IAxHsznyMAlAJY3pABIIjZg1IAxHtDBoCYL8gAEMTsQSkA4r2hFAAxX5ABIIjZY7oGgH8Py3QM
AKUAlgE0AkDMF2QACGL2oBQA8d6QASDmCzIABDF7UAqAeG8oBUDMF2QACGL2oBQA8d7QCAAxX5AB
IIjZY7oGgN9/p2MAKAWwDCADQMwXZAAIYvaYrgHgI7DTMQB8xIBGAJY4lAIg5gsyAAQxe1AKgHhv
ZmoAZvJrgLxBEcsXMgAEMXtM1wDQpwCIKcxnCoA7UGL5QgaAIGaPuU4B0KcAlgGUAiDmCzIABDF7
zPVDgAUFBWQAljrzmQKghwCXN2QACGL2mGsDQCmAZcB8pQD4CAClAJY3ZAAIYvagFADx3lAKgJgv
yAAQxOwxHykAGgFY4sxnCoA+BbC8IQNAELMHPQNAvDczNQBZWVnTMgCUAiDIABDE7DHXKQD6IqBl
wHymAPg6xPKFDABBzB40AkC8N5QCIOYLMgAEMXuQASDem/lMAdAIwPKGDABBzB5znQKgTwEsA2Zq
AHhjmq4BoE8BLG/IABDE7DHXIwD0PQDLAEoBEPMFGQCCmD0oBUC8N5QCIOYLMgAEMXtQCoB4b+Yz
BUAGYHlDBoAgZo/pGgD6NUBiCpQCIOYLMgAEMXtM1wDwz/VPxwDw+zWNACxxaASAmC/IABDE7EEp
AOK9IQNAzBdkAAhi9pjrhwApBbAMoBQAMV+QASCI2YNSAMR7QyMAxHxBBoAgZo/pGgB+/52OAaAU
wDKADAAxX5ABIIjZY7oGgD4FQEyBUgDEfEEGgCBmD0oBEO8NjQAQ8wUZAIKYPSgFQLw3ZACI+YIM
AEHMHpQCIN4bSgEQ8wUZAIKYPWgEgHhvZmoAeGOajgGgEQCira0TnV3d0jmCIN6Hmtp6MgDE+zFT
AzCTHwPiD6EQy5fOzi4Ul5SjobEZjSQSacaqb2hCSWn5tAwApQCIKVAKgJgvJG1ExG4kvSQS6T3U
zTTA7qnTgUYAiCnMZwqAPzhIEARBzD9kAIgpUAqAIAhi6UMpAGIK85kC4I6SIAiCmH9oBICYAqUA
CIIglj7TNQB8xIAMwBJnvlIAfASAUgAEQRAfBkoBEFOYqQHIzMyctgGQ9ykA/npzczOJRCKRZkFN
TU1TAjyHUgDEFD5kCoCvY29vD0dHR7i6usLFxYVEIpFI76Hnz58jNjb2jfszh1IAxBTmcwRg8kOA
/PWXL1+is7NTMAhisZhEIpFI7yl+351sACgFQEzhQxsAZ2dntLS0vFPjIpFIJNJvi3eqJhsASgEQ
U/iQKQAyACQSiTT7kmcA+EPY0zEAlAJYBtAIAIlEIi0tyTMAlAIgpkAGgEQikZaWKAVAvBOUAiCR
SKSlJUoBEO8EjQCQSCTS0hKlAIh3ggwAiUQiLS3JMwB8BHY6BoCPGNAIwBJnMaQAxsbGpGv8OmQi
SCQSiVIAxDuykEcAeBlf/9mzZzA3N4elpaVcXbhwAbdu3RK2w5fvZuv19Yleb4eVTZxfaOrpFQlD
bfJeW1ri70sfeuS+NscS2kSf/NdIpCUmeQaA33+nYwAKCgooBbDUWcgGgK/L97tnzx64u7sjLCxM
rkJCQqCoqIiioiLhW7C6OtvR2NiMLhZw+HY729uEeR4EJu9j7tXDLqDBt55fXr+OthY0tbzbBbao
1dWJhsZGdHbJeU14vQu9ff0YGhwQpuUu8w7ibaZPPIABcZ8wzd+D7s4ONDY1CW1C3jok0lLSbKQA
+P2a34PJACxhFnIKgK/L93n48GGMjLBK/gomJiaSh1xGx1GXHQFtvRNo6hti82PI9HeAjsZpdI+N
C/UQLoI+kXBMvPfN5wcHxMI+RaI+ZiJY8BDmu4RlRCwocWPBl+sT9aKfvS4EKbY8b/CiXl73HhZw
JNsQXpfuo6+nA9mZOWjv6XvjHMuWYVVCpNtNHL10TziOAXG/EPxk9ZKZBz7PL9wBZqQkdZUEtoFB
yTJ83z2srJfVn68nbEe6LyGwCsclOQb5+5Ccf/HAoFDGj7OLBeqJx8LPg3DehOUk+xPOTT/vWfdg
kG+LnRfew5ftj59v/t4OjQJDTfnYrqqD3AZW777eV/WS1UHEbkBtDTXIzisVti8zAfy4+6V15+da
9p7weXE/Hznh50Fynvj2eFupLS9GYXkdO1Z23vsG0FqaBJ2Dh1DVPsiOQbKu5BxJ9iE5bnYe+XFJ
zzdf5lW74MfO6sGPUSxtO8K5JZEWoGZrBIAMwBJnpgYgIyNjWgZgpiMAfJ+GhobC/n8NY2NjocHy
QFObEQwF5UNo7BvGMIuwqR4PsWvbYQyy5arLchEREYmKmmZ202eBvq8TsVERSMouYoFjGM0NtSgr
LUJqeiY6ukVCHRrqa1FdWYbYmDi094pRmpuKlKxCIThUVZajqbUTPZ1tKC4tRx87zsqSHGEftc29
6KyIx6qf1sIlJk8IODyoDrEAVVOWh8ioaPSNAdHOV7H/jBUKs7KQV1KDYR5EO1qREBWJqJhkdIsG
0dnaiDpWj6ykeGTmVwjnc3hIjOy0eMTFp6G4ohI9/SwIdjQiMiIC2Ww7o+x4JIG+Fy1N9aiuqkBc
dCTyy+owMjyEnvZmxLN9RMemoosd19DwIIrz0hERGYXaxnYh2NVUFEjOV20zGqvLUVnTwAJoL6rL
q9DJTE1LQwULtNUYHR5AclwUYtNy2HswgrbmelSUlyAlLUM4J3mZqUgIdcfKbSrIrpcYAN7b72pt
QExkBGISM8HeOoQ8vYhVWzRR0drDTIiImYlO1NbVoKq0ENExCejo4SZoCO1NVaxeESiqacVwXwfS
2PslGhxDD9teMXv/rIw1sVvfAt39A+x9HkZrURx2qamhhjXHwZ5WRLF9ZpdWs/d8iN38BlGUk8K2
n4yisgq2DzEGRR2IjoxEWkG5cB4b6mtQV1vFzlcUKuvbMMBMD38vJ7dZEmkhaDYMAH0KYBkwnykA
/hDKRObMAGSGQGnvkVcGIM3rMdTVzqAkMxZb166Dgb4O9hwwRW1LM2zMDmKvtgGUlRXwIjAZQY6W
+PivX8HonDXaREPCtp9cPoS/fPsztm9YjRVbdkJXaze++PobRGeX4ryJDjySqzBcn47NagYIC/LF
9nUbYbBfC/tMLyHU9xH+/Xf/Bv1LdhCzi2xoeBRZ4S+xZuUq7Nq+AYoHzRHm/RiffvYF9uzaha9/
2oT00hrYXzsBVXU9qO/ahmM2z1Gc6ofPP/8cKruU8OU3vyCqsB5hz65i5ZpNUGD1+s8fFFDEAvzJ
/ZrQPXAQCgrK8IrKZiZhACPsbYpxu4nf/ekv2KWoiG+/+wVxGUV4fNUUezX1sXfnFpy4+xIZ4V5Y
t3oz9PepQf+sDfKZudi1fj30DXShceQUntlaQe/kLYjbCvDJH/6IpGoRnpjvx7m7L2BvZYxVG7Zh
1cofYWHrh5TgJ/iU1ffoucuwv2ONVayeu7atwx++2YTiVtaTZjeKgd4mXDLVh8a+A9i9bROu2HvB
9uxe/O4PH8M1No/dlEYw3t+O/cqr8ePqndi0+nsctHyKlppCGOxVhsHBg9ipoo2knGKcPqACq6ce
sDTShOW9p9Db9jf856drkVHZyoL8GFqL46Gqq49qFsgPq27GNkUl/PDNSnhGFyAt0B4//7xOqMPv
Pv0Z6WVVMNffjQ07d+On73/Ac790eD06jY+/+AlK2zfjl+1aKG/rh1jUO6XNkkgLQZQCIN6JxZAC
mK4BqEkPgrLaMbQNjTEDAOT4O0JL7TzykoOx+ZfNuHj1HvzDEpAZ4Yo//uOfoH/YmAXadfhZQRf3
b5zBUeunwjb5EDc7Mlw/rYOjt72AzgKs+e5n1A4CDpeP4dIDd1w4ocsMQDXGmrKxca8+/L2dsXX1
Vlja2MIrMBqijiroaexHbqOI9XrZBTbWC8Mdm3HbPZltewyRrEfp9OgSduqfEvZ5ggWy847hSA17
CcNDhtivth1/2ayNmJCXbPsGrDaAzVkDGFpew77te5Faz968thxsUNbGw+uW+OPv/4aj7FxsX/MN
Nmgch5gdP08zBNhbYOfhC8I+XK8aQPfkVcSHuLJ9HIau6hb8VWE/oryfY9O6nbh26zGColJQkOCP
bSs34syV2/AIjEJ1YTx0DAzh5vwYX37xOR4+d8cJ40Nwdn3J9qeEZrbt0YZM7FZQwq0bFtA9ZcNK
urDr521IqR8GWnOwcqMichp6hR60uK8LHs9usjoYQV1hNb7Za4KCxCDoGlkJowE9Pb0YFzVjr9JG
uCTVY6AyBmvZOb573hR/+vhHGBkbYe33n0Dz9AOMi1vxy3/8A9ZoW/BDhOcdC5y+w94zRm/foGAA
dI4a4/ntq1BSPyOU5wY8goqaCtS2q8M/g9V+vAnbdqvixrXLUFQ8KixTm+AGZfX9sLY8DoNLDqxk
BDu3b4RTXAnGhiakWUikBSR6CJB4J5ZaCmCQRfzOyjRsXLEWKTU9wmsOl/ShcuAq20cnkhOSEez7
/2/vTMOiyPI1fz/Nx/l4n3nmzp25PTO3b9d02923q6qra1PL0ip3FLWQXUU2F1DAfUEKV9x3ywVR
3FfcdwtRFAF3UVAUZEn2LYFk953zD0grCxMroZAiM9+X5/dkcCLixInIk3Hec/6xRKPnx99i07p1
6P35V4i5eg0HfliJeYu2YPu6+Zi/6aBaq0krA143Ye0Cf6zcH4vGggcY5+4NOQpRi2di1Y5jmB7o
gf2qcapKu4hPvnHEnfRc3Em4jbPHd+KTHn1w9cZN+Lp5455q9GpVo4emSkxVPe7VB+JVLvU4d+GC
6lkvRMDC9VJUzA32R9j6bRg3bCiiTv2IQ5u+x0dDvHHh1G74zmxuwFeGTkXw0lXw/s4NSbkNqMm8
hW+dx2PLqnD06ueIH+NuYPPSeQiNiIRB9aIb1dd0dtdijJsVoa2/Z9lU+E8JgtswR+w9dw17183D
3wa4Iy07D4m3biFm/wZ83KMvriSn4UFyEi6dOYjPe3yGszefYO38Cfj8m9GIOXUCnoN7Y8yM1ch4
HI/+vYYhqw6oy0qC00hlANYuQciybYBBh5HKEEk5azNv4tNvHTUDUF/fiLyUH/Ftr36I+TEemxdO
wZeu05F4+RDG+IerZlbqpB6NFbnw93ZG3DN1Uku5DIfxQVgbFoxvHMch7sZ1LJ8TjPV7r6Aw/Q76
ffIXOHgEoUKtvH/5bMxYcUjbX321GIDr8Aqcir0bV2GU+3Qt/e6JLcoAuCvz54kz9wqAqhcYrI7p
+jXLMXLkBFUDgJfX9sPZcwJWLpuNpbvPq5RKjB49Cvuvp6KRBoB0U2gAKIvUUQNw7969dhuArggB
yMViDXU12L0mBL16f6NO1iPR65sBSHhRhGe3VI92yDB4+4xTPT0/pLzIxrr54+Hg5IHhwwZhx9E4
HNsR3mwAVMMvZZDPDYsClAG4ivr8B/D29EWh6p7uWjYHq/ddxtnty/CPL76F84iv8Y9hqqE+H4NR
Do7w8RkLR5dJSMvKQcCQPnCasByVqjGWEMCD2CMY0LcfRg7rDxfVKz91YCMCF67T9iN02kRERJ/E
0iBXfOcxHuNch+HTkZNx9fx++M1aqC2zesFUhEadRWz0SnzVZwDGujqgR19npL56hdn+I1QP1wuD
Bzvg4MU76oddq4UAYg+twR/+8jfVsx2FPgNdkPjwCeb5OqplvTHGeSh6OQfiwumDcHAYAR9vd3j4
z8XVy+fh7DhcHS9vDFW95AdZesTtDsOfe47Seuhjv/kIk5cfVlON2BDqi97fDELfPr2xaudlxMZs
QOCijVp5D6yYhS97fQsnxwH4oOdwpBVVo7amFnpdGvyc+sNjvDdcHPujz7i5yHmWiE/+8FdsOXYL
DWJeKnSY7O+BH5+WoOTJZQzyDMSLjBT4uw2Cp9d4DB7uiss3bmGiy1AcjH2IKPVdBS7bjYQT29Hj
z18i9kE2GhoaUZgWjzETJiMrLwdTPQdhkOMo9PxiAM4kPEfSye3o1bMPvMZ8hw8+H4jbaZkInzwK
/YaOQO8vv8aRiw+UcZiNRVFn1N7o4eHhisPxz2gASLelM0IAfBCQHagrQwCyjqksMQDFxcWYOnVq
yxpta+bMmdpdAFK5y1TPsamhHk/vJSEuLg6v8sq1C+vkqvQXqQ9U2nVk5ZdopqTOoEeC6kkmPX6u
ylOPvJxXyMrN07ZtLENudiZy8tQPoKwYGS8ztPx12VnI0hWqXr1e9fjjkZL2ApnZOaiSbTy9r20j
p7BMu6o8OzMNyXceo0xfiXLtIsBG5Lx8iuvX41FSWYvyIh0ylFGQbWW9ykCuWk9fVoD463F4nPoc
r7JzUZCfh8ysbG2ZnOxXqjz5ePIwETduJeHqkc3oM9wZOoPqgVcW44as9zIXjQ112vfWoLqyp6OW
wHfOEjxQJ4EXuUXqB6/mqe3Ksilpz1XeOdqV93IRYFzcDeSVSC+9DpnPH2nHMFNXhFpDNUqL8pGV
k61doJebnQFdQZEqU6UyXQZ1HG7g5r0U1Dc1oigvWx2PXK28dbXVuJ8Yj/uPU7XtFJeWa3cKVKmT
RUlBFq6r/OXiO1m+sqpS7dddPHmWpfU+JAyTmfkShSWqTpQU4vmLl6iqlQsYddp66boSGMrycf/B
E1TX1aO6rFCd6B6hpKwE95KTkZlTiEpVhrKSIrzMyECFXBSoL2k+RupEhdf1SHucjGvxN3H74kH0
GTwEj/JlKEOPeFUv7qVloEnVC6kD2Tp5zkQ5Xr58ifyiEotOiIT8FnTWCID2+6UBsF11ZQhAGmhT
WWIA5NPV1RVr1qxBZGSkWbZt24bhw1XPMi1Nq9zN61e03NqlKrxqVIy3e5ne1qZdIa8ac7navVY1
3DJfbgOUxs14hbd8yi1gcluc5Nmcv9yGJsuptJb1DSq9+Xa4n7ZR1XKrmzR0tTXN6zWXrbnxk2Xk
tjbtFr+WW8uqVD5VWlrz7XFiWiRfaWSr1TablzHgdWMtdq8LxdBBjuj7dW+s3HsB9cr06FuG7CTG
btxWfeNrXDywBjNX7dCOe/PxUMe35RY84zYkzfQ2QPlfftDy/5vjpcoh+2osR/Ptgmq/5Diohtl4
25zkbdwnmSdX7sutirKu8UFAxmOrlcHk+MktfW/W1cpQ3Vw/VT4G7RbGn8qulUvyl9sN1bJSvuZb
+aQ8tW9uG5RljN+d8Ra/GvW/mJzT0avhMHAoBvTtjbnr96OuvuHNic94O6WxDkiZJZ/mWz+b94OQ
7gYNAGWRuioEICfo9oYAJE3Wlwf9SCNvrvEXtm/fjqNHj2qjBbJ863xsE9XAqYbuZVoqnmdmaz9g
U4NhihzHkuIiFBYVW/QjtifkmQZiFLLS05CWnqEaf2Wi2jiOhFgLDAFQFqmjBkAqU3sNQHtDAEaM
DwGSbbSFvC/A7ho3tb/yY65WPedferyuPAtAhsLNzSMV2siLHEt5CJD5ZQixHjpjBIDPAbADdecQ
ACGEkPbDEABlkboyBNDREQBCCCGW0xkhADEMNAA2LmsIARBCCLEccwZAe1dKOwwAQwB2IIYACCHE
tjBnAOSivvYYAIYA7EAcASCEENuCIQDKItEAEEKIbdEZFwEyBGAHYgiAEEJsi84IAcj5miMANi6O
ABBCiG3BEABlkWgACCHEtjBnAHgXAPWWrCEEIPMswdy6hBBibzAEQFkkaxgBkJfVSOUUN9oWsgxN
ACGEmDcAcv5tjwFgCMAO1FED0BVPApR1pXEPDQ2Fn58fpkyZYpbJkycjICAAubm5kDf5yZvfGk3K
Jq8CljfZtc7/fSNvjpM3BVZXNb9FztwyvyVSJnlLX3XLW+7MLUMIsT4YAqAsUncOAci6UpHHjx+v
VUadTtcmPj4+2oMr5HW25cX5uHjiCHZGRmKH4npyqqrgdV1sAiqUGSnHneREpL3Ke/N63e5EdWUF
EuKvIkX9YMUEmFuGEGJ9MARAWaSOGgDpzbfHAHR0BEC2Kb381pWztaZNm6YZgLpGID8lFp/+6S8Y
PzEAgZP90eurvjh54wkaG+phLHF9rUHbp9p6tYJSU2O9ZhAMNXXa/3jdoLZZrcrYoC1X19CImupK
VFRWq2UbtPI2tmQm6eUVlWhQy6gDob2jvq6ped54j++w7lSS2tkaLZ+a2no0qP0WGctQZajV/keT
5KvX8qnUq2MuIxkNDeq7qXhTzoY6yadce2e9HH5jHoK+yqAtowqhfZ+yjsyXsjU1NWo/TuO21cZQ
Z9Dj7IkDSEjJ1Mot36GMllQZaloWaVDfg2m+ePNO/NbfFSGk+8AQAGWRujIEIA7UVJYagMDAQG37
71JISMgbA5CZfBYefqEtc4CT22bDZd5G1NeUYfemdYhYvgJxSWloUJU+Ke4slkcsw77jF7WG+Pmj
m1i5PALb98TgZdpjnD1/RRsmT7hyGffTdCjTpSHmzDlUq4b1+J6tWLpsJe5nFMJQpsOVi2ewbfsO
pGbnI+7sPqxbvw5Dhjti+8X7quWu0YzB/eQbuHD2JFYuW44bd5+jsakJ2WnJWC7bPHRe9cRL1fzT
0JVUo0ZfjLNqW/l6A5KuxiAiIgLnb6WoRtyAm3GXEb0rEmevJTVfI6HKXpb3HBtXLcfq7ftQob7U
uPNH8OOddHXwi3Hw4CE8VMfn8oXT2Lh2JbZGn0BNXT0e3b2NjGwd7iTEYs/uSFy4eR+56ffUMYlA
1LFLyvg0oUSn8l2zEsvX/IBn2YUcLSCkm8MQAGWRunsIoCMGQPfoKgZ/OxxRh4/j5PGDGD20F7ac
TED82Z3w8ZuMsFkB+MrRE3Gxl9D/k88xb+FSBEyfjdt3bsO1T08EzA5HUHAIjsQcgNN3bnhVWIT+
f/5vCFp3Gokx6+E6cR6i18zHgBFjETpjIvoNHI/kpFh88fc/Ijh8DXasWoShg0chPHwu/t8f/ord
sSnKAEgvvxFhk4bhj58Nw7wZE9BrmBcepzzEWIehCJ4bBreRg7F0czRm+Tsj8lIqCu6egKNnIC6d
OIihA4YjLCwMAwYMxbn4JIxz/BxDPSbiQvxdradfXfIKgS6j4DN1DiZ6jcDEueuQ+OMhODqNRfjs
KRg/azWe3jyOf/m33yFkXhgcen+C9TtPIGymFw5dScIUt68wyGMyDu6JhMfwkZgZGgYnh4FYF30M
i/3dMUKVY+70IKzbfxq1yji0/q4IId0HjgBQFskaQgDtNQAFT6+j198+xBhvP3h7jcO63Se04frk
K8fg7z0Wft5j8Lv//ALnb9/DimkT4Rs4C2s37UVGziv8EB4C93EBWLbiB6Rn52LxnElYsmoN/N2H
Y0b4Cnw/LwS7Y07BWzXwt7ObwwULpzhjweKl8A+apv0/19MN0VdUz1tpyoSx2Hg6udkANNYiLGQM
Npy+p+ZUYJSnF1YvX4Qe//cj+Pr5wmXkEIyeNB/XTu3BrCU/IHrtAmw9/iM2Bo3Bxz2HwNfXB4P6
fokla7ciaIo3EjLkB1uParXTL2/F4I//8nuM8fXDWLfv8GX/kZAjv3+BC/7LP38EOXqpV6LgFhKm
poAX16Lg4eOP0HnBOHYlATMDx+C2rhH3Dq3G7/797/BT5RntOBAeUxbg3KEd8PL0wKKlEbhw7R6q
aqpR0eq7IoR0H2gAKIvUVSEAGQHoshBA0hmMcgtGSyQbr5tUOZsq4PXtF5i78SgeJJzBnz76HHsv
3kTs1Wt4dOcGev/pz5i3+gBuXr+h8rkLtz6fwC90Hx7E7sO//vf/g/0Xb2PV1NH4w+ejUVimyjT8
GyzccRp5r1LgNGAIduyOhKffBFSr7a0I8EDQomjoslLw5ef/wJbz97XGH021CJ3qhvUxt4HqDAxy
ckfkzq3o328g4u+nYN+6cMxeHIXaqnwEeTpiwEgfZOnrsCvMDyO8gvHkyWOETpmMoycvYoKvCy4/
1KHOUKka5HrkpcSh72ef4ui1O7h8aAsCpy9HXk4qvF2dMGzIUGw6fB2ZicfRb/hoZOTmY+t8f0yd
vwphc/xxSB2HkImuuPSkBA/PbEOvrwcj6dETRC6fj/AVkbgZfwPJ9x9h9QxPfPjFWJQ3AZWtvitC
SPeBIQDKInVlCEAcpanehwGobWhCbsoNzJgTgfzKWrVfzflKJb56eCMG9h8Ed3c3DHb1Q+ztREzz
GY3hjiMwZuIcPH6aimUzfDF0uCOcXX1wIyUbBt19OI0YhbSyJlzYEQ6PwMXahYQv7l3CKIeBGNCv
L8I3nUTxq3uYFbYQxTWNyH92G26D+mL4yJEY4OCE04nP0VhnQGO9AT+sDsWBqw/QWJWNScHT8Ti3
FIc2zcU3g4Zi6HfuuJSYpuW/JyIIPnM2qGl1XAteYrq/ExwcHDBG9chf5eVicfgsJKTlo6a6OR4v
P+BLh9ZhQP8BGDB8FI5dTVIN+HQs2n4GlfmP4OUzFSdj9qB3r88wbPgwDPrOF89zSrB1zQJcvHUf
ayPmI/ZRLpoaqrAtIhj9BztgmLMXklLScXTrEi30MNzRGbtOXte+S9PviRDSveAIAGWRujIEIA8P
MpWlBkDu8ZcK+i7JXQDicKVyl6u8xLma5iVXrkvsuqKsFOV65Wrlavcqg/o0oLi4WLt9sLZG/V9X
ixL1f2V1DepqJC+9Wq9GMxKVVdVqP6pRpvKrqWtAbXUlSkrL0NDYfKW+bFO2U63yqjHoUVpeocpd
97Phcr1axmhKZPkKtY9y1X+p2k+9obb5qn01r8pQjWpDVfNyqiz16kcox6K2oUF7roBe7UOFyXdW
JttS+cj+lemr0VBfo360ar8MclW/QW3jNeJjNsN1ymxU1b2GobZOmYcqbfty7LWySF4tdzNIeapq
6tQxkGNSh7LSErU/al6X305JCGkvnWEAeBugHaijBuDu3bvtMgAdDQEI48aN00YB5syZY5aZM2di
xIgRePnyZbMBUOu2VVmb8/zp0cHyKWmt/zc20sY0bVp9vpnW0pvLZ2zgzc6TdVrSjMsYG+6flje/
zZ/n93Y5jfNM0fJR+yfTzY17c3pNXSNSb5/Dko3bUV3X9NMysh2Tz+Z8Wpen5X9F8/+EkO4MQwCU
RerOIQBB0p89e4Zbt24hISHBLDJPKreU0ZJKapeoY6OvrNJGOdiDJ8S2YQiAskjdOQRgRO5zFwMh
eZjDOI+NPyGEMARAWaiOGoCO3AXQkREAQggh7YMhAMoideU1ADQAhBDy/jFnAGQEtj0GgCEAO5A1
hAAIIYRYDkMAlEXiCAAhhNgWDAFQFokGgBBCbIvOGAFgCMAOxBAAIYTYFuYMgDyHpT0GgCEAOxBH
AAghxLZgCICySDQAhBBiW5gzALwLgHpLDAEQQoht0RkhAHm5Gg2AjcsaRgCkYkql/SXMrUsIIfaG
OQMg59/2GgCGAGxc3d0ASHpOTo4Wj3oXmZmZZtcnhBB7ozNCADJiwBEAG1d3DgHIuoKfnx/8/f21
d/6bY8qUKXByctJMgHEkQMpb3/garxvrtenWeb8/ylChr0JjQwMq1LT5ZYyo+fpKVcYG7YfToH6E
v/SiHtmXuvpG1BqqWvareXtNKo93ba+sXI/XTU2o0ldorzM2twwhxDbojBAA7wKwA3XUAHTkbYBS
oUxliQGQbU6aNEkbinqXgoKCtPyNBqBOVeiLh7Yj8shFVbnr3sq7s5DjIu/bN1Q3N8j6ymoUZaYg
cs9e5JcZ1HFt+0cjDXeZLh1RB2Lw6MFtRB8+jorqWnUszC8v1BiqceXsEcTdTVPTVaiorEJRVir2
HT6KgvJqs9uT1wJXleQgKnov0nKKUVX5yz9kQoj10hkhABlZZQjAxtWVIQBxoKay1AAEBgZq/79L
MhIgMSup3NKw1lXo4D3yc/ylvwtyKlQPW6/yU42zUQ11NSiv0KOpZRdeN4hJqEBDo3GfXqNS9ZZr
6xpgqNJrPWjpZcuPxLhOs17jypFo7DlzS02qHrzKsyQ/C/EJCSjRG1qWUbOafuqhN5uG2ub0ggf4
fOB3SEx9ieS791BpqNPSRY1iXNRx+fn2mjAv0BnrjiW0/A/o7l/AYCcXZJY1SXFaJOVX+1zVUoa6
HPQZMBiXHueh3lD55hgTQmyPzggB8C4AO1B3DwEYDYBs/10yNQC1Da+RcHIHwldvxap5Qdh6/KYW
CqgszcbiOVPh7uaKg5eTVQNbhe2rQuHu7ob1+86gsakep/ash5u7O0IWbkRpZQ2O79+Gaw8zUVf6
Cqu3ROLBo3vYuDYCswImwSdgAXLzsuDR9wN88OFQPM4uUT+WWhS9eoLdBw6rshdhY8Q8eI8fh0Xr
d6OsqlY7ztU1dchLT0aAv5ea54nPhnsh8f5dHD55DqWFOVg4NwTjx3li8/5zqCgrxtaIBfD19UXw
zGVamTYunARXb7V9tcymg1dQ+jIRLl4+KK57jdiYnfBRy85csgkl1Y2oLHiGmYG+8PXxwkd9h+Fm
ehHqaAAIsWk66yJAGgAbV1eGANp7EWDHDID0eBsQ5j8ac9cfxqH1M9DfI0hbZtUUD7j4L8Dpwzvg
OTkEG5fOh8Mob5w/ewKe3r74YcMqDOnviDMXL2KC42CEr92H0Gljsf2CKnfJY/Qa6oILl06gR48e
2LrvOCa5D8W09XuxYY43XCaEo1hfDUNdA3IfXIST70Sc2bMVH/boiU07dmLNlq1Izy+Doaoa9dX5
mDxiOOau2YNDmxfiw289cPHsPoyfGYrDaxfi48+GITIyEpv2HEZmxlMsnB+C5ctXYMjXf8eCXeex
fbE/ejsH4OyZo+jfsyf2HjqIyTNm4ubFk+j5UU8sUsuO+vZzTFm0ARFTJ2DSvA04vX8D/vhRH9x6
qUwKDQAhNk1nGQCGAGxcHTUA9+7da7cB+DUhAEsNQG19E/Q59/HNFx9jhJMLXEePwL//tafqnWfB
b7AjrqY2hxLqagpUI+yIbadayvS6BksmjsOs5ce1f7MS9mGMjz9mzQrAwVuZ6heSBQc3b5w5cwRe
QTO0ZY5tDYf/sl04FbkKy6Iuamn66lroHl2Fq88EZKsfzY5VSxEybTpmzIjQ4u81tfWqx34LIwaN
hXY0azPhODYAZ07vh3fIfBQX6rB2USimTZuG8KWRePowEUH+Xpg6dSoGf/0Zpqzeh80rpmH3j0+1
7a2dMwazwhZiZngYolaGo8eHXyM4aCp8vTwRNC0ILo7eSNW+gip85+qGqyl5NACE2DidEQLgXQB2
oK4MAcg6pnofBkC0Z1kQvOes16ZFG2d7wi9sE7YtCICz33ycOrgNnpOCsSkiFA4jx+Ps6ePwGO+D
bZvWYEC//og5cw7+jkOw9IejWDHbD57TV2Pfumn4H3/rhwvnjsDJyxfqkGFnRAjGLIrE6c3fY4hz
MPLLqlDTMgIwcowXrv54DRs27cKls/vR43/3wMHYNC0UUV+ZBz+HAZi3eg92rpyG//XpcFw4owxH
wDTEXjqPTTsPqzKuw3/+Z3+sXRaGr78ZiZs3b8LDoRe8FkVhQ+gYfOsxFWdP7MPAbxwQc+IoPCZM
xI1LpzBk0ECcj72BxSETsHH3CSya6I5J8zfgSORS/PPvP8SN9GJeA0CIjcMQAGWRujIE0NG7AMQA
tM67taTHnJLyBA0NBuzesAqXkp6hvrYaVTV1yHoUh8Wrt6KsogjL54fAw90dh6/cRVNDNSLXhMHD
wx0bD5xDY1MDzuzbAHcPD0xfshUVdU3IfXwLEzw9MWPuHCzZtBsPHyRhx559MKgfxY0LRxF15gby
027Be6wPrj941fxjyXiE7dF7kfXqBb6fPhljx47DOtUYy+iAXOFvqK1HxoM4+Hm6I3jmbCzaGI1H
9xOw+8gJZD1/gODJ3hg3zgt7zsSjsqIYa8JD4Ok5HvMWhOHI5UTEXzqEoEB/bT+izyaiqvAFtkRG
oaqhEbEx21X5Ve8/bBV05QaUZD7AFB93BIRMx/xl65GmK0V1pf6tY00IsR1oACiL1FUhABkB6GgI
QJ4DkJ2drVVQc0icauLEiZrBqKqqRp1qCI33yQuV1TVoUj1vvf6nCt5Qa/jZXQBNb90F0KQdk8qW
q/U1KYMg+cv9+pKvobZOy0ev8hdJwyrpcheCLFNZafKDampERct+yTJyIeAbGfNVP7RK9WmUlKlC
nhPQ8r+ovqZaMxBGNdYrU6GWkecOSN51DU0tc5rvYpB9/0kqTe0TnwNAiG3DEABlkbp7CECQ3r2P
j482EmAOafzHjx//xiS0zocQQuwJXgRIWaTuHAIwRSrgu5BlLKmghBBi6zAEQFmkrgwBtHcEwIjk
YQnm1iWEEHujM0IAYhjkvEoDYMPqqAGQytRVBoAQQojlmDMAMgLbHgPARwHbgawlBEAIIcQyzBkA
uaivPQaAIQA7kDWEAAghhFgOQwCURWIIgBBCbIvOuAiQIQA7EEMAhBBiW3RGCEDO1xwBsHFxBIAQ
QmwLhgAoi0QDQAghtoU5A8C7AKi39FuHAKKjo5Gfn08DQAghnYScq1sbAIYAqLf0W44ANDQ0ID4+
HkVFRZpjJYQQ0jm0lpx/22MAGAKwA3XUAHTGbYCmkvUJIYT8esyJIQDqLf2WIQCKoiiqa8QQAPWW
fssQAEVRFNU1YgiAektdGQIQB0pRFEV1vRgCoN4SQwAURVG2L44AUG+powZAKlN7DABDABRFUb+d
aACot8QQAEVRlO2LIQDqLTEEQFEUZfviCAD1lhgCoCiKsn3xNkDqLXVVCEBGAGTUQCqRDCtJuiDT
xv9bp3f3aflsK900ra307j4tn22lm6a1ld7dp+WzrXTTtLbSu/u0fLaVbprWVnp3n5bPttJN09pK
7+7T8tlWumlaW+mm03LelfOvNPQMAVBv1FUhAJlOTU3VjIM4S0FGBIzT4k5TUlK0YafW6fIp6abL
/NK0fLY1LctZMm26fUHK1Va6cfpd6ZK3rN/d9s84bS37Zzot67Q1bdx+W+nGMnL/3v/+ybxfSm89
bdx+W+nGMnL/fnn/5LktMk/O09LQW2IAZHk5f9MA2LDedwhAHCRFURTVPcQQAPVG7zME0NTUhOLi
Ys0ESOUihBDy2yLnZEsMAEMAdqCOGoC7d+/+ogEQiduUiiPzCCGE/PbINVmmYgjATvU+QwAURVFU
9xdDAHaq9z0CQFEURXVvMQRgp+pMAyAVhKIoirIuSSPf+oJthgDsQJ0VAhBJBRGk0hBCCLEO5Bwv
D2szFUMAdqDOGgGgKIqibEcMAdiBaAAoiqKo1mIIwA7UmSEAiqIoyjbEEIAdiCMAFEVRVGvJo4UZ
ArBx0QBQFEVRrSXvEeAIgI2LIQCKoiiqtRgCsANxBICiKIpqLYYA7EAdNQCtXwZEURRF2Y4YArAD
MQRAURRFtZaMANAA2Lg6agDu3LlDA0BRFGWjYgjADsQQAEVRFNVafBCQHYghAIqiKKq1OAJgB/o1
IQCKoijKNiXvAuAIgI2rowYgOTlZSxeHKJVE+K2n5bOtdNO0ttK7+7R8tpVumtZWenefls+20k3T
2krv7tPy2Va6aVpb6d19Wj7bSjdNayu9u0/LZ1vppmltpXf3afk0Tb9x44Z2jq+vr6cBsFV1xACI
0tPTtWcBiEuUB0ZIvOhd0/LZ1rQsZ8m0DEnJtHwKcptKW+nG6XelS96yvrnlJd10mV+als+2pmU5
S6ZNty/Y6v61lW4sY3fbP9NpWaetaeP220o3lpH79/73T+b9UnrraeP220o3ltEe9s84r7GxUXtN
MA2Ajao9BqC0tLSl+acoiqLsQQwB2LAsNQCCVIKqqir1JVcTQgixA6TzRwNgo2qPAZARgOLiYkII
IXaEJY2/QANgZbLUAEgFkIqgy8tDXl4+IYQQayW/HajlCwoKzbYLraEBsDK1ZwTgcUoqMl/l4FVW
LiGEECslMzPLcl5l49HjpyiwIAxAA2BlstQAyPB/+otMNDQBtWp5Qggh1kdD42tUVVVq13NZQm1t
rTINOdDp8mgAbE3tMQDP0zNgqFOVp6aREEKI1dGEmtp6dU4ve+sc3xZiAjIys7RQAA2AjYkGgBBC
7AUaAMpENACEEGIv0ABQJqIBIIQQe6FtA2B8BHDrdBoAGxYNACGE2AvmDYA08vJ44LS0NG269Twa
ABsVDQAhhNgLbxsA6fU/ffoUsbGxGs+fP//ZSAANgA2LBoAQQuyFnxsAaejz8vJw7do17XG/Op3u
zbTRBNAA2LBoAAghxF74uQGQBl0a+/z8/DevAxYTYPr4XxoAGxYNACGE2AtvhwCkUTcd8pdp04ae
BsCGRQNACCH2gvmLAN8FDYANiwaAEELsBRoAykQ0AIQQYi/QAFAmogEghBB7gQaAMhENACGE2As0
AJSJaAAIIcReoAGgTEQDQAgh9gINAGUiGgBCCLEXaAAoE9EAEEKIvUADQJmIBoAQQuwFGgDKRDQA
hBBiL9AAUCaiASCEEHuBBoAyEQ0AIYTYCzQAlIloAAghxF6gAaBMRANACCH2Ag0AZSIaAEIIsRdo
ACgT0QAQQoi9QANAmYgGgBBC7AUaAMpENACEEGIv0ABQJqIBIIQQe4EGgDIRDQAhhNgLNACUiWgA
CCHEXqABoExEA0AIIfYCDQBlIhoAQgixF2gAKBPRABBCiL1AA0CZiAaAEELsBRoAykQ0AIQQYi/Q
AFAmogEghBB7wbwBMG3YWzfyNAA2LBoAQgixF942AHJul09p3PV6PcrKyt6kCTQANiwaAEIIsRd+
bgCkwc/NzUVycrI2LWlJSUkoKCh48z8NgA2LBoAQQuyFnxsAadClx5+QkKA1/Ldv39Y+jfPkkwbA
hkUDQAgh9sLbIQBjT//WrVtITEzU/jdt6GkAbFg0AIQQYi+YvwhQGn05x8togNEQGKEBsGHRABBC
iL1g3gAI0riba+BpAGxYNACEEGIvtG0A2oIGwIbVfgMAM5WKEEJI9+c1DQD1k9pjAFLT0lUFakBl
dT0hhBArpNpQq87plhuAyspKpL/IgC4vjwbA1mSpAZAv/vnzF0h7lq59EkIIsVLSX1rMM7X809Rn
KCkpoQGwNVlqAATj7SGEEELsh8rKn98a2BY0AFam9hgAQgghpC1oAKxMNACEEEI6AxoAK5M9GgC5
qIW0H7kaWD7NHVPyfpCwm/G42wOyr5YMNZPuCQ2AlcneDICcXNLS0pCSkoInT56QdvD48WM8f/78
rSeFkfeDHOecnBw8evTI7Pdhi0gdM30RDbEuaACsTPZmAORRl3fv3tUasvT0dNIOnj17ph079tC6
BukNi1l9+PAhXrx4YfY7sSVkH6V+ZWZmaqMB5o4J6d7QAFiZ7NEAyAk1KyuLtJNXr15px44GoGsQ
AyBGVUxAdna22e/ElpDRDhkBkHpGA2Cd0ABYmezVAMhJhrQP6ZnRAHQdRgOQmpqqNZDmvhNbQkwO
DYB1QwNgZaIB6DiZma+QV1CIctUgSqNYWlKE7Czzy76L5h6Q+XmCNLyynYJ8nTYt2y0oLkZ+Xq72
v7l13gc0AF3L+zYA8n1m5+ahwvT5HuVlyMnO0uqY6XL5qv7l63K0/99VV38NNADWDw2AlYkGoGPI
CbKouARJsafh5+UGF+fRiNi4H7qC9puA7JwcdfJr+wRfUJiHk/t2IjrmKgoL8tX/Odi7dg2Onbul
mQJz67wPaAC6lvdtAHR5BXgUfwHj3Vzh7Oys4eI5GTcfpL9p7AWpc4d2bcCBc9dRXFTwzrr6a6AB
sH5oAKxMNAAdQxr6B7FH8OnHn2Lhmh04eeIQRvX+EgELt6NcnbxkOwX5+VrPqaSkGMXKLBQW5CEr
O1d7r0JRUZH2WVlRjB+WhWPHsWuoKCtFiTavWFtHjESm2lZ5RQmWh/giYNFO1UMrRbk+D1MHD0LY
uhhUG6pQUqzyLynRzEBWdk5LHkUteWShQOVXqubrcnO0Rtzc/lgCDUDX8r4NQGFJGS5ErUCvb51x
9ORJHNi/H/sPHsfjtJcoVPVHRpjyVT2XepV8+yaeKdO7a80ybDl8FeUlBWbz/DXQAFg/NABWJhqA
jlGmGuLFAaMxfeUeNDbWoaxCjxcpt3HiYhwun4yG11gPBM5ZiJvXL8Hb0xWjXcfg2JW70GU8wHR/
L7i6usIvaAkePYhHrw/+FR985Y5Hz1KxbE4gXFycEbp6F3LzC5GtbasYa+dOwYwVe1BeVqK2lYdZ
Tt9hddQl3L92Am7OozHUYRR2n76O0vwMLJ7VnMfclVEozM/CqoXT4ebuho17TmrGwNz+WAINQNfy
vg1AQXEpzu9aDTf/UGSrXv6L9HRkZmVD9/Ixgif74ULyc5zcsRTfr92JY4d24dCxgxjwt/+J//h0
BO48y/rZKEFnQANg/dAAWJloADpClmqUczDD2QWRx26itDgPGRkZyC8ug2jbQn987jAGSbevwfGz
z+DkHYLZgR7o8UlfXIyLRejMKVi8aBE++3sPLNx1DGH+7pi5dg82z5mET74YjGUR3+OjP/0eS3ae
RVlJkWYA1ihjMHPVvmYDoM/HHGdnbN53DjOd+mOo6yRs3bIJx65ex7bQqfj404Eqj3B88pcPsGLr
Hjg7fInZq6KQkpqmXWltfp9+GRqAruX9G4AyXD+yGf/xuz/g2wED0K9fP7hNnIWckmqcjV6FgX2+
Qn8HFySmZWPJdE8s3XkYiyZ7wHfuBujy87XRJXP5dhQaAOuHBsDKRAPQMUrLyxAR7IJJC7eisakR
VariP0m6iv0nryBy9SzM2nAIhuw7+Mfv/wCfgGAET5mM0W7jEBUZCS8PN8yZOxtfffY3hO6Iwcaw
GYi+cBPfjxmKvsOUGZgxDR5OI7BixzEUFysDUFGK9bMmYerCKLyWv6ZyTHEcjrV7ryHjURwWzg7B
ZL/xWLtpH0Lch+HroS4qj+kY4/wd1mz8ARMmjsO1x7koKfh1Fw3SAHQtXTECcC5qFcZNXYqq+rrm
UJJCl1cIQ2kWvvi3/4r+Pks0U7to+lisP3wJP6i6umLvZRj0xao+mM+3o9AAWD80AFYmGoCOIcPz
qQnn0PsfnyJo3jLs3LEJAz/5O8K3nUb0mmnwWbARdaqnPsllIAIWrMaOtd/Db8r32LJ4Gnr3d8bp
U8fQ8+9/QvCmI9gyyw8jxs1D5Kq5cHByx9Gj++EywgmHL99FUYEOeUUluHVqBz79x8eI2BiJiHmT
8cnX/XAnLRObVU9/zdZozJvgjK8dJmP/tggMHjFa5XEQbt+5IObMBbi5DMXphOco1GWb3RdLoQHo
WrriGoCLu1Zoo05btm/H+nXrsG79ZjxMTUN4gBv8p30PH6eh2HDwCpbM8MTy/eexY84EfDNiMtIy
c5Cb8+vqU2toAKwfGgArEw1Ax6ky1CAr7S4Wzp+BoKAg7DvxI+obgZuXY3Dg1GUUqRPsq9RkzAqa
AJ9JIbialIqinGeICFUGYUIglixfgVNxd/E4/gwmTZyJh88zsXfzEvj4+GDTvtPIy89HVsu2CosK
cfnYTm2ej38ILic80sIBNy4cwURfH0wInI24e2moLC/E7k3NeayXmL8uE7t2bUfyk5fI/ZVXb9MA
dC3v2wDk5uUj83EiwmbN1OpvcHAwgmfMw7X4OKxZsRJP88rx6PpJrFi3AzHHD+DirQdIuXUOARND
cOPeM+TxGgDSChoAKxMNQPuRE5U8tnTnzp2IjNqFQ4eP4MiRI9i3Nxpbf/gBtxISUV5aol0X0Hyf
dSUq9frmi6ayclBeodf+l/IUqLScvAJ1wqtAjsq3uKT5ZUWlxYVqWz8N18vdAAVFJdo8eTd3QZ5O
y1+XXwh9S5rkn5mZheJS0zzU/8UlKu/mPEz3o73QAHQt79MASH5Sf/YdOIjDR5vrbzOHERUVpZZp
vsgvN68QJaoeFRQUIT9X1VWd1FW9ZiYZAiCtoQGwMtEAtB/jyfP69euIjY19C8n/11xs112hAeha
3vcIgBAfH2+2Dst2pUE2t877ggbA+qEBsDLRAHQcnU6HvLy8t7DFxl+gAehausIAtFWH39f23gUN
gPVDA2BlskcDIK9XlZMNaR/SKNAAdB1GAyBvYRRTae47sSVyc3O1VwLTAFgvNABWJnszAEJycrJm
AqS3QSxHGv87d+7wXe1dhBgAafylvqakpJj9TmwJ2cfExEQaACuGBsDKZG8GQHqv0tOQ4Wzj0COx
DDlmMmTMEYCuQY6zPLnR3uqqPCKbdcw6oQGwMtnjCID0YKWHQdoPe/9dizSE5r4HW4aNv/VCA2Bl
skcDQAghpPOhAbAy0QAQQgjpDGgArEw0AIQQQjoDGgArEw0AIYSQzoAGwMpEA0AIIaQzoAGwMtEA
EEII6QxoAKxMNACEEEI6AxoAKxMNACGEkM6ABsDKtH7TtuOq/UeNwaB9eYQQQkhHqK9vxPOsAhoA
a9HiJcsv5hRVIFW5NnFuhBBCSEdIV43/nYdpNAAURVEURVEURVEURVEURVEURVEURVEURXVT/dM/
/X+IGM7O/iqQcgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$Lookup = @()
						Add-Logs -text "LOG: Getting License selected for user"
						$License = $comboboxO365Licenses.SelectedItem
						Add-Logs -text "LOG: Getting AccountSKU Domain"
						$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
						Add-Logs -text "LOG: Looking up SKU for license"
						$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
						If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
						{
							Add-Logs -text "LOG: No SKU found during lookup"
							$BackSKU = "$LicenseDomain$License"
							Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
							$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
							If ($CheckSku -ne $Null)
							{
								Add-Logs -text "LOG: Assigning $BackSKU to User"
								$licenseforuser = $CheckSku
							}
							Else
							{
								Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
								$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								Add-Logs -text "WARN: Assigning $ReLic to user instead"
								$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
							}
							
						}
						Else
						{
							Add-Logs -text "LOG: Found the SKU for the license"
							Foreach ($Item in $Lookup)
							{
								Add-Logs -text "LOG: Checking License $Item"
								$BackSKU = "$LicenseDomain$Item"
								Add-Logs -text "LOG: Looking up $BackSKU in tenant"
								Add-Logs -text "LOG: Verifying $BackSKU in tenant"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: $BackSKU was not found in tenant"
								}
							}
						}
						
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						
						$Lookup = @()
						Add-Logs -text "LOG: Getting License selected for user"
						$License = $comboboxO365Licenses.SelectedItem
						Add-Logs -text "LOG: Getting AccountSKU Domain"
						$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
						Add-Logs -text "LOG: Looking up SKU for license"
						$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
						If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
						{
							Add-Logs -text "LOG: No SKU found during lookup"
							$BackSKU = "$LicenseDomain$License"
							Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
							$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
							If ($CheckSku -ne $Null)
							{
								Add-Logs -text "LOG: Assigning $BackSKU to User"
								$licenseforuser = $CheckSku
							}
							Else
							{
								Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
								$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								Add-Logs -text "WARN: Assigning $ReLic to user instead"
								$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
							}
							
						}
						Else
						{
							Add-Logs -text "LOG: Found the SKU for the license"
							Foreach ($Item in $Lookup)
							{
								Add-Logs -text "LOG: Checking License $Item"
								$BackSKU = "$LicenseDomain$Item"
								Add-Logs -text "LOG: Looking up $BackSKU in tenant"
								Add-Logs -text "LOG: Verifying $BackSKU in tenant"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: $BackSKU was not found in tenant"
								}
							}
						}
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>