<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
b+jiz3GTSLMVN5L8rNIvgQwAoWShGACCIAji/UMGgFBCBoAgCGLpQAaAUEIGgCAIYulABoBQQgaA
IAhi6UAGgFBCBoAgCGLpQAaAUEIGgCAIYulABoBQQgaAIAhi6UAGgFBCBoAgCGLpQAaAUEIGgCAI
YulABoBQQgaAIAhi6UAGgFBCBoAgCGLpQAaAUEIGgCAIYulABoBQQgaAIAhi6UAGgFBCBoAgCGLp
QAaAUEIGgCAIYulABoBQQgaAIAhi6UAGgFBCBoAgCGLpQAaAUEIGgCAIYulABoBQQgaAmG94W1kK
LJX1JBYXZAAIJWQAiPmCt4XCwkKUl5ejrKzsoxdfT76+o6Oj8hogiA8PGQBCCRkAYr7o7e1FcXEx
mpub0djY+NGLr2dRUZGw7xDEQoEMAKGEDAAxX/D2U1paipaWFjQ1NX304utZUlIi7D8EsVAgA0Ao
WTAGYHwIt+xtoLZjB3Zp6yIiuUw+4RcwPQWJRCofeAcmRbh75bSwbA0tHYQklMgnvJ2AZ/fgHpUv
HyLeBTIABPHhIQNAKFkYBmASTtb62G58FuVVVchPDsHq79cguaZXNnl6kqX4+0xOTgl/h2ozsP+Q
LYblw5zxGb85irTAFG6fNsYW/RMoZcsuTIvAmu9WIa6iUz79p8uemJjE1dMHcOReuHzMNNgoOdPC
etPtXz/lYzMA/DR/e3s72tralKf9Zw6TASAWImQACCULwQCM91ZAe8cudMuHOV0d7GA6IEZe7Ats
2bQBa9ZvQUBSORoLInH5wQshjdtdB7yMz8Nzl7PYvXsP1q9dBdfgDES42uC//vO/wcU7GA7nD0HH
YA92btmGsMw6Yb7LZ08itrRD+D05WIvd6jvRyupAQXdnE9r6R1GY6I2tbNlr12/Cs4hCNkWMy8eM
sHnLdnz15Re4HlqA5vJM7N1jAH09fbyMLmBepQfXzzqja0yWF/GKj80A8GAfGRmJvLw8dHV1CQfJ
5ORkpKSkCNPIABALETIAhJKFYACG69Oxd5clJPJhJaJ6bF22CokVrULg37F9D7xeusDc1lmYfOG4
KZy843BivxpOPYhBW1kUlqnvRUVJGvT2WLMyd0Bty4+ILW9BadRjGB51hqirFLu0jDEwLmQBcUsO
TDQO4if3aYtbsH35KkSXtqC5NB67duriuv0F7D3gINzMdsRAAw7PAnFw4ypomdrA/uwh/Pp3n6Kg
bQSiIRGm6BTAT/gYDUBGRgYuXLgg3PGfmZmJixcvCkG/tbWVDACxICEDQChZEJcAxjqhrbYaCVWv
7pb2fuaKmAg/7Nq8Vz4GMDfShPMNBxx2fCgMXz5hhuveMXA8b4HMFr4SldhkcAiVpZkwO+LAUozA
xMwEHTzYTw3i7PETsLc7i5seUcL8AuM90N+xBpElPfIRgN9ztuyoQGhu2qM8/W99QANaO/Tg4pMj
DD+4dgbnbj2A9srvcNrxFu7evQETIzOUdVDX/218bAaAn+bnB8bc3FycPXsWly5dQmVlJTo7O+kS
ALFgIQNAKFkoNwGm+9/HN9+txVk7O5w4bIx1LPg29/bjgtl2aJtZwspEG8ZHbqGuKh3LvloJO7tT
+M2vf4XbgSk4b22I6PIhoLcQy9WN0NRciVV/+g4env4w2GeAOvnxN+nZZfzHJytQPyjv/svJCnXF
N9+uwRm27FOW+7BmnR4ae/rgcEgDu0yO4JiZLowOXUdhVjjWf7sKFy6exyf/8W+44pOGl9etYXD4
DG5fPYe9By+if2wIwS8ClWcYiFd8bAaAiwd6fvo/Pz9fWLeOjg5hHJ9GBoBYiJABIJQsFAPAaa7M
we1bt/DQwwvDrEwCkyI8f3wXt928MCK/by83IgD3H7kjMS0L9e3dqCjNQxefQTqIpIxc8GSJIT4I
i0pDQWkRRuTBuCndiwVre9nAG7RW5wnLvu/+AoOKBwimRuDp5oLbj19gSF6eouQQ3Ln3CDHxiahq
Z6aDEfDiMW67uKFzdJrNM4zYoBgMkQH4CR+jAVCI3/jHT/vPHEcGgFiIkAEglCwkA/A+qckJw4YV
KxCZ0ygfQ8w3H7MBUCUyAMRChAwAoWSpGICuhhIkpvI7+YkPBW8//BW5vLfMg+PHLr6e3PDw/Ycg
FgpkAAglS8UAEB8e3n6ysrIEE8AD48cuvp58ffmBkyAWCmQACCVkAIj5YmpqStmW3mxfH6MU68nX
myAWCmQACCVkAAiCIJYOZAAIJWQACIIglg5kAAglZAAIgiCWDmQACCVkAAiCIJYOZAAIJWQACIIg
lg5kAAglZAAIgiCWDmQACCVkAAiCIJYOZAAIJWQACIIglg5kAAglZAAIgiCWDmQACCVkAAiCIJYO
ZAAIJWQACIIglg5kAAglZAAIgiCWDmQACCVkAAiCIJYOZAAIJWQACIIglg5kAAglZAAIgiCWDmQA
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -ne $null)
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										add-logs -text "CMD: Set-Mailbox -Identity ($Mailbox).DisplayName -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity ($Mailbox).DisplayName -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -ne $null)
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										add-logs -text "CMD: Set-Mailbox -Identity ($Mailbox).DisplayName -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity ($Mailbox).DisplayName -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}


]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>