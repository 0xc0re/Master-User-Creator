<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
/wHvLlz7g5MA4gAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>