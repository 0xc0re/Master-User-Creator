<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
QsjPlH/6p/8/x2Pd+tFKrnEAAAAASUVORK5CYII=</Preview>
  <Form>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
dnNQoqYEAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
		$Global:AD_Pre_Req++
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
		$Global:AD_Pre_Req--
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
		$Global:AD_Pre_Req++
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		$Global:AD_Pre_Req--
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
		$Global:O365_Pre_Req++
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
		$Global:O365_Pre_Req--
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
		$Global:O365_Pre_Req++
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		$Global:O365_Pre_Req--
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$gettingStartedToolStripMenuItem_Click={
	Show-GettingStarted_psf
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}

$testToolStripMenuItem_Click={
	Add-Logs -text $Global:AD_Pre_Req
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>