<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
EL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKI
OqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAA
EEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQ
vaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6
oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQ
Qog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9
oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqh
ABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBC
iDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2g
ABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEA
EL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKI
OqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAA
EEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQ
vaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6
oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQ
Qog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9
oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqh
ABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBC
iDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2g
ABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEA
EL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKI
OqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAA
EEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQ
vaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6
oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQ
Qog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9
oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqh
ABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBC
iDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2g
ABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEA
EL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKI
OqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAAEEKIOqEAEL2gABBCiDqhABC9oAAQQog6oQAQvaAA
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
+7v/H96K9IO1xiURAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Grous'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false
				
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365pobox.Text = $textboxPOBox.text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}

$tooltip1_Popup=[System.Windows.Forms.PopupEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PopupEventArgs]
	#TODO: Place custom script here
	
}

$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" }
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>