<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
Xj74XxKJ9KLkdUNR3eEiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIA
JBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DM
GTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoi
A0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJ
pHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIA
JBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DM
GTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGTIAJBKJpHoiA0DMGWUwAHzdJBKJ
RHpz9fb2/s32VRFkAIgZ3rUBmJqaEgoeiUQikX6dhoeHZS3pm8OXIwNACLxrA0AQBEG8PcgAEDOQ
ASAIglAfyAAQM5ABIAiCUB/IABAzkAEgCIJQH8gAEDOQASAIglAfyAAQM5ABIAiCUB/IABAzkAEg
CIJQH8gAEDOQASAIglAfyAAQMyijAeDr4i8IIimXCOmLq0ik+dTbhgwAMYOyGYDOzk7k5eWhtLQU
JSUlJCVSUVERJiZYYVFDeENdXFys8LiQSL9VvJ3Lz89ngXNIVtIWHjIAxAzKZgCam5tRVlaGpqYm
NDY2kpRE/HwUFhYKjYE6wo0P338ql6T5FG/vuLHmbezbggwAMYOyGYCWlhaUl5dTQ6tk4ueD94BH
R0dlZ0q94AaA7z+VS9J8ihsAXq54cH1bkAEgZiADQHoTkQEgA0Caf5EBIN4pqm0AmtDU2vrCtKa2
djSzwvrydGVTU1ubNJ9ts/LZ1Izmjg40NbP9au9Ac3s7248WNq/heZo3kHAMOjuF9cxM4+tj65aO
N7HhTiFNcyfb3hscazIAC2cA2tm54Q1sm1Bmf925fqVYWergZalJwbxfqAltvDyyYMT/NilM89vV
0NCAltY2YR/lamflnk9XlP7XqIGpne1na0uzMNzQ0IhWVv6fb6eNpZu1HbbN5pZWdqxZvWLDQt5Y
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
/wN4O2999gxsOwAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>