<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
FnUAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
							Start-Sleep -Seconds 65
							Add-Logs -text 'LOG: Done'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text } | Select-Object -ExpandProperty DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $User to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member $User
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
					}
				}
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem-ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
							Start-Sleep -Seconds 65
							Add-Logs -text 'LOG: Done'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $User to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	$textboxO365EmailAddress.Text = $textboxEmail.text
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	#Address PAge
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" }
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
	}
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>