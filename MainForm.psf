<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>PnKQ1LbKO6QEACODCAAAAAAABADsvVmT6jrSLnxfEfUfiHXxxTkvuzfYgDHv170j5IEZzDzddBhjjBlsMAYD
v/5INlVFUQyeALMW7u7VZbCTVOpR6pGUSv2b649FQV/+8/4WCv3bugnp27n4n1/17VIXZ3+3ZWWg
Gsu/06o2s/79K3Tqq79CLVFbyqryn/jfUfSfv0L0aqqvNPE/irjSNX76V6iy6k9loSBuG+pEVP7T
Tyb5hJAgsFQsLkbJ1K+Qws/gL5d4WUEyf4WEkTwdaPDRX7Sq6Jo6Xf4yNYW6VjR1Lmr6dv8OWOlq
XeCnIiPPRAXpAR/FUvhfIfjPvyMfT197u6QOxF//MHPZ3ivyDj7d0Fai7cetH8hoqgGUQX2kycrk
6rsUL0xodapqv/7Zm+HqK/RUFhXd0g+LEkloBjxJXn0NWZ1StYGo1fXtFL6bljfioC4r0vR6EXOC
qnxUD/yWkhVe2/4DAKAA6AIW/gsAC3KAUtGfPQl8XBSgAYjXBABKcRbeGyX0aRVIoCBNAaDXWXib
g8+8v1kSaBU91ormrI/3EgpAokAlVUe31Q8J9Ag9oLQNFn5v6QIv87ehtCqQvpSAso0l/KNUBC4u
pJt/1xVplYwEckVDMWgjWSiB7MFXZaYazY1z29Jssi2NC/US/Pv9bdmAnyybu9KuUi012E10zG5K
wmRTamQS6AkFfT9rQIkMIHkWRCKcDGjjSyyDnpfQ+5H3txL8/wj8XylCmp8c35cb1c2SzSWL6jxd
kTdbMk8CI5IZgUrEUCSAEbwKmEp4CCtih6RxrWsSzXuynWWyu41aZSKWjqbEb/fQbtYnFVTKQgNJ
mJyXaN6HCajSjuQhBpFdOWYN348jie9vkQg9AlxnA/WVkgQLdMsa0LK5FJJgNC7obNoZ3ifM58fv
b6YdKqbWO1UCyws1DGuGjSIJ6yOJCVS30yWshcqOZC000ENQYiw7EDlwFb4MlJjMHejMbmAtDHN6
sR6tHTwGJVJDZAepUpgCqnpZ4m4Jdc6S6C9otyNLy9L5ly9cCMGdC3gLq45FWi0LSegzJ+sO/qZ9
B3DUTpFE7AzeYL0tjDNiTkv7uvDyuCug2k/9wBtqt01n0r5fZt11kaUH6C/N9ARdt9JsXnakMZEI
tFckbPYGzM/voWOH38fpEpJWocbwIWmIPsmSAHBU5Nt9hYl8SJRbFFczooWMZKKnXG+O2CbCpwlw
1OppgMpPCcJiNEOfUbN8sRatgogBpVTC0poXG6YGHSrX7iD9lui+yMJeZjY30MudbHTKVlu1+Psb
vooNxERdGGCTLMlFdrvSZlYm8VmjOc9PNtVFstYbLQWFW+fX5cyChd270ZTV4rzaN1gWdCY5mc6J
RVnIbVrp97ex3pe51q6wafVWdVmexjQqTUxnElHL4z2tMB9Nkw1Kny/rGjviG3xSiC3FSFhqTmK1
3awXK/bDvdQ6kdoltEb+/S0/rgxTZKw0SCW1pCFU2Zrz/+QH47bW0hvvb2qjXCUnYxVk2VhpnN92
xotBbDVeZVKbVKZEN2JZfLpYxNklVQR4m8eb005yx29nCzXM420WjKKdSSlHwbomEu9v4Qi+gAyy
Ndimhuv1jtsKSp5fjaZqKpkFM3mktVax+YpIpVLJYo2rpXvjLt3NcQttpjD1REeIdJZgIHFxvbXQ
39+GSieW1KMRphgjsawOCQleUOXRuLckGTKbbw3rM0AaRbYEmOFgPdSiYSXaivVXscoUEJUWve6y
6SVbG3fxEvRIrcK6NYgrOVhF8XysLnaTcjK27cpZMqmQO4EmyzS1yK42gFo0d+3uOp1Px2RS1sCw
nt4pJb5k0KsdN9xh8TKs02pOl0BvO2r0lrjSWumtNVk3mF5r121wUWMUi2xIkNyqTXpNtjlJx9Kb
PsgI46kgp/BUNLwg1rPRctdgYo0IrIVYKhLBRtHkYGzw6GkKPl1o73rLWcvotrOjwiibiA2oXns1
CpdSertI8ZFMQ82NBLHYiMblGRnlWvy61SfWC9hnRfMK30/vaplGf6V0tK3G7ZYpkst2+3RXYpfd
WW3SK3C5SF5cVORWdDru1kAxFY+sFYXZxOMCx2iqUK5yZQOWlGPZZk0gM2SBBDuJGMyb3GotyrKM
EcnhcI23V5KEZRUBjEeZ4nzYT3LJIZtnW2q/HI2WxpRkCOvZHB+s6+no+xvLqWR6wgw2arSPxde5
Ir8gCkq9DRh+2emv2hujWpdBE3SzG3IIXciuXtymylSvOsrUOpgcGSrYJhJJpgbxPgdrYY6P1Wo5
KsUKiUiWBU1REqTuLDmMJSY9rl6PshlV2OSHoMCN1S1ZnwxIaJpyUaPoGk/SjBGf1Yg0DpjaEn9/
UwrtRSSeXK3mE6VAZROLTkfD1pg0UHg8w6hFvRWWdYOpE8P6EPQlY5CLr1JctjzbibHuxmCIcSFf
7DK16CCjvL/JJblfXQ3V5mK1wMTFcAQSVLI37ILFuMWvUplUKsJl4tveupvog2GmswXF7iqbHYvT
VqoByxFrbloUobWIsU6/vyUIBq/PqtS8XJmXjXw3PZ5n9R23w6Ktms5sosxsMdxQLTAcQm/Dp3cp
kG9lqw2DINK7ZmU50SRmtQqHwwmj3H1/S+/mWW1H71rxIVfl8MYK5I1UiiwpfKaz4DQWdV4UlNLM
wjerTHOXjne5Sb0yaS+w8HI1qmJUMl9QgaApwvvbrLAQM0hiLBtLxztIYm0BOT/JrkYgUlcT23Qi
mWix9XI1stD0NTPHR2lCWcRhpRBZRs2Wa4RcV0FrEG1CvE24dVdRMk08V+iWuVlDFBgxW1SzxVhh
x/DsbkLr04RECxVxiCRNiemiOxkUZa3Cpllab2lLdZDrioNYVoW9jCl7AtjWpA8lV+KRRVEVqk2p
uDL12BB4Tl3ISn7Snkajegnwo8UwLJVKAkgCvDQrVTtScqVUM535APreeTmfouS60IMiV3Rfj06z
400CjpB7pa40B62hMuu3coTS5vObyUamVaoPStgYCLVKF/VdRQHMptXFtC9B9Ha33Q1VB/KwUsIL
vVZBqC6l3ijfAOw4XmQh1LiSSva4LlhRc4PrtRZYuw3d0GQBuW5ihtcXSm5g/Qrdf3/TyNiYU7cQ
BVWgGzTfItatFUiM85NJ2siE13l1kqO31IydlmD/2gQNkZtjFfRzWQOk+7tdbqeVMt1602BgnVJt
SYRYl/PR/dtrtlutGJO5RMXphZ6IgXZOIatNkJWqy4wiUF15iDNDArXrIa6lwus28qBD0KHa728E
s0012EaBT4krTUhyOz1eNNiKooq9PAEYfVpaTzuyIXcM3ihm6+1ZcTrfdNVWMUEISmGbYSbFsixG
2wYkVO9vtWx42lxP1iAjZnejPFMlWnWiK+6WycqQqeHsbFTpdw1qJ8S4CJjE09i4v4rMtWqGHyWW
dRxAEONtUSoJPA+9ZQ5b4X1qUlK6HM+mljRLpbleChO5MRnZRSZtEdsKNE4NCLDZTKOL6SqXSHYy
RtEoGfF0S+4LtVhsrUvQg8ll2MvUh8ZKVcV0WKDjbL3dr0PDQNA2sxW5Ayh2QC02xSrV6lTlQa6a
nVUNUTKVAkCgR1EJQKogYpslTTIQbynYPtnsYJaaMSpTrgs41QVSVmeouJQshUtEUslAaaAWFiPV
TLu4ikM6yECMiVNLgsgP+Ax0hRhOlt7fNsUuCK81Yi7RzWpYzBWwTqq1kkpYcddNL5kmBqkAKCby
eHg4i4KMKvZZOHiijFQMes16httxG1CZR5TiBJjSokCXOCPKTGWCXUuzHL1huSVdoPhimIwtM9Dz
bMqUgkqIqSMMDGqpSrYOZqVJRyY78yidUctt6JtpHfbO2nqjgIpOJ+JScRAJJ6PUTB2gb/NcY4K1
YpHEusq1i3K1lk1UV1IVY6AdITMkuLUWJuq9XbfPRcW1EOlWIA8ZFuN1ThKxhgx9SGa+4KcJVpO2
AzUh9vABkR51W5WRkKC0XjsHJBoYQpbiDWZJ9/BxC6Jp0YiIS1yoaMQWlnTWGlWYDi936GSM3hbp
aDxXFtbDSJGqFtabKkElW2JXgxSyAD8oG3S8qFW5ziI/E/BkeAPLhHx3ukoBlsbe39pKVAPlZEZU
e2yCDRc3Yi6ldspVcVtbpMPUJtXCKW3LUdRAypWSq0Sb3obZ4m5ZTvZkbrc2FgJ0+zoRG6wwHvUy
o10VH85bq2QY+rRIvERTIMaNlhiTzBdzAGQo2PXyfSLF67jBSDM+sxtQy91sI9bSMaZRiRD1NVCW
IBsvvr8ZaUgqyjF2l1nMW5zaGjVzo+wO9XykPDZYgUjli0UMb23btRXby9Si6RkciZfjrQYxjMSH
1Sov7dgp5O4UBZlDFHaxKzodHeuMEOmv0tUZuxyA5EKhG2uw3rCr1lYsF8s8QW1Hq8ZyPZmo3TSs
DRwPRyI8nRvSg+hYThr6AFDvb4tiuQuyTVmYVVSGzvTwbjgzUnsrpocznLpMN2kB+g9ikKvXWut2
Npla4fmYgRUyox6IDRvRVDo+CSeqEhWZ52CrR455sEslo2WFLmVLqVV/FxaUKsePd7ApZ9sQI+Fc
oZetEgM1VW6mahUpNSTyG5CLb+bxlBgnVH5RwMFyt3x/42m+EW9KEbrX5LI805+Vpy1QJtSFOu2W
t8Utwc/mi+aATuByb7eJiyPItLrD7o4obdN9KdnKVOn1psjvksYiBVl0LianlyAvLztyZZTObxdg
lOhUiUhLHFWTteauEYedQn3B8/KMW1M5EB9L4fRYrbXIAnxPrnGNCsjX6ERYhiOjcTgprIYcFaXT
fH29rZcKKc0g2M6wPu2C3DqXiFSGg4ioVcMDNb8rJ/P5Sn5IU9HxvL+rVsTYKKsN8hoLGotC5P1t
HUkVYDtlErjUYTvTilbpp/gmlESLmy4pcjU4HihC5qCXpvqoWRyxRJppZqWllOa6ypwIZ6ExR7Vo
HzL/yvtbnOlIOjeBNJ2aT4X1FEuse0y0qPBUqzXsLMNKkhwjxDDyFkSJ8bCgGGkpTwzTAiT8iXEl
sZsOuHWUpcPII6XBIl2oZeeEMNnsCoaUW5Bl6NUJ2lhLDItVGjEyYzDtkbDd1SZNY0am8mRFIaMD
ilkU4S+UktTIiPM7VR4TECE5qjMSiG2N1hf6YN5ZppTlDtKgqo6nqQ7gVYIba1FZicagv2VEsNap
xGxEz4kFVkun8aQ4rMzKfBaWfiBBHtLbsMW5AEHW2upw4JaGdpLgG+1JFfTpVWcbG2Sbw7pIDrMb
aUBTBdpoG2C6XQ126WatkZrEx0JezkNGOZjD3hlrDqgKTQnalGxtiQ5u8GFmUyhGIhS2am1W/TrR
CSfk5NCIgDSf3Q1yhVyHBjIW7kGJMWxVY9VuLb/ZRVZQWi2djeazg8g8uYrUW+2OHGlMKjWszPbS
CuS5I3mRmw/gEEVt0XGuU50R6g7WGBMPV8aL5kKJNiRqzc5Z2PXtYEmLeF6oZZKFnsbF5OU4Sasd
usizTLOznGoSwPspgpxPC/N1EWsWNHy0llOlPMa0FKNijNsGHsajYIjFl+k1OX5/G9C9xRjyDANx
xXQZ1oSa3EJzJSF/BMXIBrZr+GZM4jG22eivk5SxShvTIWU0y+P8sJuelLCZQswWScikYTtdpJpY
c6dWGGwB+Wh4ssRmSYMxWoRGrDpGuGNMBvJc7eBEhELePguYNZvPdDbZSaIaY2KUQQlKk1C01Az2
MgI+iDF8GbYvlmG5GDlqJlZMON1akPHKeiiXZb2Z7UIipPGzlBgZhmfzWaqKNWMjMt4Y4D28nW6v
63yr3ooNIXPAc7mllOuzqkRnRvFBJ1UZxtZGH7QhUnhYh/kc3mtV02S92QivpkBN5wqZbpWNzgtC
MZdbyHMjHy/BBgXGEhx9DCBNg8SuYaQ7iWGFGLLtYjNX64FqTNvmOAaCV2oPYmFt1sdKrRY3IlPU
piiVjXaD78fqSzkbVtbJSKQ0hqPS97esFB3Io36nhC0Buyk1iP4ssWqF11h7vm6m2ptoVlF3+XGv
C3vnQQFrh0k0ibpL9Tspqi9BHbll0RzRZdvT97fmepqCeBqPuWShvjF2C1iXYzEZ1uMQYC1dF7ds
u8pyhC5Rmdqki3qaGBjIs8US+h0i054p/djC6GapJAlHlFxj2uuLk93SAHxUaaabDBxMR4cYGRHJ
9i6b2XFGNrcu1KbTRMUAebVeFJoS24NkpEiEO+tVbCuWZrVohmQnu/e3FT6f9VZ9aj4nStSArqqg
aVSYnYClIsN1FGNj0kTaFeoc/KsAGDiAHYV55NeEqGJJzwM6Q8GCbmXIarZJUoE0udTNxtRpkxps
DIrEB/gaMQd9N4yWsQlgREWtrPvVaJneIsxNYdvQ0wPIV7qRSLEah0BMy6UN5L3NTiM1n+B9ZdQk
mukNtpBAdEbiYVGhDDITr61a85ZIxOeLelpc77bxVGXM7Oj5rDVbG2K1AbbkZjnY1NIKoQ9hL9Oc
6Filq4EOl4gVmqAiR+VZNLcu0nh5Vo+CFTtgk6N2LZyKpaodcUgN6XGLhgPibX5Ll5hRg+7uWttF
Kz1JxGDvHGHYDdsgtnl2PBy0FroQGYQjWjIcWZc0kAKJdTYiT8b8Ll1YLFbEKrfKyYJMgGR8IGZj
2TomFXLqalyGNoWevJtWVIpvZ3Z9JakQvfpiGEH9VEzNdTqpwbASaQmUUOBlozyvg0p7HE6QNFle
jdIJup3IiVh7FUusYn19Jk0gix6VF1qi2jZ6wqptDJVEuKanE8XZKB2P85BGtNj+TMhGEhM+M6HG
Obys1bet+licE8oYalGahsM6rSIyAhnr+1sJm+PpGSV3YX/YWqxTBYMKh7PrjpKfpgrZao6Yb9rp
LhC4TnFCGrTIxhYUzylCpL4055bhqJPhFsJ0ZVA12GcVo0OjpNNFw8Bq0Xp4oOeGHWUYnzWYZIYG
nWoS6yflNBwWkp1EpplOhDNENjbMQvMVSx02l1SLEjMY4akpDvvTSKzfoBqIFC+KyXVSjJb07K5T
iSn8ME40UnRPKI8jqUhaiaQkvNWo7VoiXtF4fWhkAGTT3cqQiE3xcWM+iUEfgs0W2G7XT1bK1dYW
Of9+ohHJbhgixzTBjE90Y5EeBoadHZMsbGPa2BhgEZmiGTGdVxY1Iib3GxOwGFXyCRwyLr5fb1TZ
OsHHcxVClaZpgc4wtTUnrMUIvcHF9mKBVWPlWgMb1QHfgIxysJVKyW68v83TgxrUblseN3C9MkX+
bVNdZjsTXBpJK6m5mAo0D9aDLLUoNsp9SGKZQSvBUD2mmKgnWtiAzGV7c76BtTqMFC2T/b4+ykyj
dJhKERyhvb9VC1J+gYlrRim1stXWbgMF1qbZKAPAmtngXXwxEIpSGM09DAZCrw8yfbwWpmNDYjtt
ylNOz6tGD6uC2W6wfn/rLLhFthxVEtB+7QXHDKaFCkeU6EWa1/oGk011lym2Psua0gYqLUPod3F+
Da3QxBep9oLEP797f2Pz2aIolCvd5TbN7D8tFc2Rbp1b5vFkKlkGE7nb3PRAcT7oE+FkBepcx5fQ
e6sNrprHYtvVEtS4KuwBc8t8o0rCbj1Cstyq2Zbys1ROqQFiNOai8zLIbyGl7Wc2NFbDiln4uWTU
2nCsKjW09Ry0qlqriyzCcZMB9Egila6COeyw2cYkD7kO20oniy0VIGoAe3qcJCD/aUKfUwBsW6uC
wrxTWGJtrBKrxomRsWtvWALEOuK204UMnyuWYZ9vzAeAWazZJhphr6BNStxEb1FkP7vB4Hh/khmk
ulXoY1W+veAXalRPlFZzfd4qzueQy6tMd0fiZchUw/CpdnG67dV4MtUQazW6liTnESISb3C1LS5x
SmVZTKSMQp/OkeVlRG02JiUJwnlYz+qD2rpaWAxBFuRXij6B/q3cVBpKpMV2UylIA+viKl0xqpkE
wCeppN4P54mtCqsxDMJMSx2U62xuOEuExeE6M6woenyQ4Rq8ZAjSatGHrEYLr3E2TWCL1WA1wyLL
HE0pUhNfLQ0hA/9K87mC0AbUorfkRlWMjffWfBbN1Cc2mw6gS+PcRtQKqphpjClYp8NOt1nrkwIn
DbCNwqYnLKGshtMKRIm21BFr7XNVEYt1QCYeJtojgKXji7U6AeVIqaeVI8tOdrxRynCcmsVhLQzZ
aJwp0xRRXKmF+Rxkw/JiFubUlZQpJZdzpRnvJML9WWoV6y3DIpouxvs6zuPaYB3DJnJJo40lQ1Uj
yWULrQOuJ8l5Z7pNDPvLWae4TlcXiPNMoB8Wa9Fuhh1NS1CmsczT26UxQeyK19p8b5zrUV2qMG8X
5q2SVtLy88L721xYZJkRxq84URSjixEWXQvZrMCXIP9JGkVpUKWi3Ky5g9RZWmhqKdtTdXy5XSyU
xQT56kghMVjh3XakWSLf35iBXGWTAsDULldj8FEDayYrkxY5FNZyliLU/jw2HkuZbqZNZlQekhQ1
xvGTqCKIhUIyK2vsrlOI9deJ5qouwrGzzE8VuSTH1tsdm6VowI8XiMnLbDK7Y2TAd1eCCHYS7EzM
z2KtCSh2ivKoCUcTujTkRo3aAvm9tgZ7GSabhlWdXeJaR+s2yslJb7ppxWmitWjViUGsP+2vS6wR
p9PqOh2rAhnSCOgdxGiGSo9Av5FTZwKFxo8RxQjDfiGa2602G1BRavAbbl6AXrPWTCQyGtUtVhLF
ypwclvslHTCJeW9MFrI9OUcNANGLVQfVYrq7pvHhLhIJR8tMFbasYXMr5sK9SGMJdvK0ku0NYCVJ
oNjLrxIgtY4liRS1ovGwVK6lM00wLirJHuR3ggFwDCen+fair0bFCrlIwvFpejZTAUs04fBbAxlC
hzQK4O0dXpXompyppXugAeZVsGKKuJSm9N2suc3A+tWj0ypVLPS6RS7OLEEEtDZJND6FvmvZ67R4
pdVtdQcaHC8Y2ZEei+ehtacNSHVlSKJj81wOJGMVLAm4OFjS4qCxivRWnYoSqVLxAhyw6LA7hLpp
5V2CTDKg0F+ME2Q3O0qu2sneEhfaaH6kDtsDa8CqztUyCapENaKD2HiHcY0dt6m1+rFiTCQzQg6O
5zPYDHJyYr2IDaekIokCR4AxrPdtaphV1tggkqXFgrpqL8JKLTaEtKRSi2HdMb3L1RIKQU+m8JeG
BoMvRE1MxsKxFZSW0HpZtLZshDPMfBCtVtdSq1JMRNIsWIUXlTiO1o86BlHOjNNoTosXE+F4ExRH
9RptsCQm7ODPqTwJsfj+1hhP5Z4UzsFRMFhLEWk4yvZ6eD82xwrzMAEp7oZku4U0E10VEC/neoLI
ZbskPStMIgpiQ3IuVd6JMWy5a7+/ycKIH2CQ+87WwrCLJ7VNppaHZFnsjJb11WZnpPEyi9b72iyo
QDONsA6Wgyivs1VRWA9gR1YCqcV6YaF3uB1F22k4SkCzAImZoBQMOsxmU0JTbbCbyrwKXZCGBqLE
klIy+mxh0EJuW9BAfpNKliolatrCouVoNtaJQvQaYN6qVNegLcoiK896eG0LuFYz1Z3x2RrsJtjO
pGlkWDhsaEiTnCTAke1wlppS7HC6gTAnNiVDnPXCw2EYzUVXG+R8Pcv3QA5Xp2SHSQlifdwNwwEm
muUvgSIQjVgZ78ikDBvprslrTaolRrMljlkNq2ALmJw8UYoxPSfBVh/RUkDLEkkea7H8KiEO1mJB
zlfBrrhODulFa6YMYyLi4jE4LCmno9w4GisxlKEX42QtI0zIaqdamJYbzQhaYU9MKkouo7JMolrL
16SiRI8p2KuwtNClc6xqpCWqJmkskKlCiWrSzS5tAFWqjUENTDNgBeKTJs3UunVCafch4wIFScxm
l8ywQOQVMdNZowmkdHWdHhOpDtOPpiaQm69q2JjMrcVRMVrHY0uqgGFzgRwNSwRZgdw1F9dGeQ72
C+zI+ap1s1kJMwRf7EW7enhETNF6fr5TS7+/tbNwnNipTblZedtrp6M9aNkSw2LFBogWG2y0xbDQ
VlWcG+d28DOMGwMj3KhPDBTdQbeitdYo2svA9xpz/f0Ncrt5T5mA0hhsyvWoUaajm3K6uikzarQ8
VrelLfysoRql3GieRZEK8Ko3W1ytkKC7uZwZomBGQGT2URNmrNv+msD/NVCYlhm55vC6f0THS9pL
2kuaC2kc0QMgslYMUE0mSMBy4SGgGPM+QqhmHNTDdLuLNLIAQHn9M97z6x4A6SjG8DlLeukiF5Dh
VC5EvZqfyLfXDcWgjiYY5AYGmpqtIeaIVSGhr8kozrGPJmxjKFqYgyNx9An6uxRn4b/luPUEfDqD
YlDLTUsCeptFcbI98xfOxItaup2zg1MrnC9psR7VWcgHS80S1Cm/RjpO0X1fRfGhIorFDB9FpP6M
evVyD+1m/ga0tB5H0ZlJdD81I7tJM57YiRXs4a0FL4B+UakiHWqmTuOfOkLdfCqlV7uVt8dWeH9z
i4aPC0XQd/elRnMO/pTytnYrx7y2iZ8IQe20dzpG+uq9n3Yzo9OFKmoDLPpkhLxNHO1l4DJIRxnt
TegK6D3SjhXgiNIhGrgTbeCgnfqEjgt2g6XETG2yW7UK5maUfwXt0NiZ+wh+3MNSdobH/cI3O8D+
VLkk4et+OquCQlGOr97faFgXpeHSL//mVAK0wiRMjACV/FGm97dLu0Kc3p+0m6FWKWv7B4P20oC7
+LdzdhutIAOkGU+ldGs3yvi0wqx7J/92+olx2L4VTvcLXuz2YQeoiaGivS/LB/QLZpv4bgW0a8mf
UtqxG3U49kBcaXWvfuGb3SA3GjlAw+l+wb2dqOMRGG210/Wl/WHe+4UT90p4JQAQgzrRPcvL0xLI
7wwV0MLHPfRv+0/QaHJ5pZTR4U8Jh/fvb/tPNrDnIH70n+MuzqDdhv3qrfqF4/uPfVJYc2uOPsbF
Lblm6fiqKC0JbqyW4bgFY3dCrLwRImgXnV3u5MsYEOpYLli7Mjc+ocO93TZoPDGx5g4PrXC+X3Az
urxiN8TfGmjXHLdAdRe5wjk99qfmL8BSL5ZoAYr4qZsXJu3PLAHSMWvx3h6yTRbzqz9F/K1p7gtG
bSJ3QYdrVrD6Ba9zDR/XVbsZJQa0kF3GJjoku/3C9yfMuYdxA0qjTu+ZPL6QFd7f/JhrsF1Sexdq
M/WJ1S/E7aPBnLPRnOvmpk3cZcYMoSFhr2c57k+5llMdAjP/dnChNpFHaBga7vqFFGxZRv7C5u6f
upHzKEgjVpBFpaaBtUcc2iXH7O9zgLOx49s/hFj96cjlbMUngzxgcUGY73UkbQ09eh+VKuGQVRz1
pyjHwK6Ll0cOFhWu6eb6ciwNsYiUX+MsxFpJ/3S7ePnVLyA+J9xonFUu+KHiffoFWHd801W/cPEJ
xJ0Uj7q5vFxIQ1YYCO76hStWKPY86nbh8l2aaYfT/aOncZa5FuRRNx+va+MsZ1zJ9jgLZRFqe9TN
4eVBGmOuXXrqF861CWvtMjAlvSyNMUdBvvQL355YFeX4VTRc0c2Hy6Y0mlwXN9fn8h33p3GOkeoe
dbN5+SCNkeIcmHjvF47vifc3NN/mQyHN6052Q6VYeOoXvj8Rjvunm6vLlTSoOad66hcO7tF82+nx
RABKelkaKgvpR5tAdkPs/NKsm0PdfLvsSbMiUFz2C5/3isOBZdAQUtmREQoxyh7rvF/4zLN2Kp1e
0EpqWxriPltUqhmae0iZq6H4EU82N/Gq6H5nPG9JXUhDJWa26qIg/cyq51yaDyq9pL2kvaRdlRbZ
X2beSPNCeST3fxr770nm83up8vF9GMUSoCcg8WPi5hPWbHjlazYx8tkLou/3V+X0bCPS7WvTBzgg
EF+T7AcJMktff8Y/f4Ex/0Q6otUKdMOBIx3Rnx+liINK2Po+IsFnrO9JQH18b4CsZQVY0rBV7A8J
ezsB+LBlJ3ib3X8Pb4eXvkc7qi4/cfC9ZBrezBF6UgMDljT7UVfma1ZdmR9adbU7rMsLdV2wamGf
bNq8DnJHozS8TnNHP1dbeEk7vEgCIiKSkUGG2agSJaH1ri6Hi1AaFX2wbj8va03uVBwXAB2nwuio
XqyxVlxNDI0HWojRxVBkP5dGTGdqxlaY9wvECjU060hIn7x3bMaXI0aYn6P3G40m9v5Wri8nebpq
JTL/XEk8WmcGlHBBM7Sy3bDGWUMzw3XUU0yenXnyOJr5rH2ufn5fFZZA+udA53D+Dc3GXstN7nvc
INH4XLE9xsL72yU0fO7i8D8eiSCM4abEYwkhmyuLHWrLdKaGIMV6E5Bd0xALyZ/xSGY0rpn7ntuO
AbVbqgYQrHsU/xZFe1E4H+22v0fR4CiyGmWL8inessACRTZj09Av7Hydf4vClsXUBgd5573HRaNT
B6RPBMe9zYecmCeaRg5OIfAep0oPwX7V8nNPj8he1dH+uL4bgdbI7SydTTub2fj3ZTDPFDiOJw+H
R6A8PPMGC4QDt2FFd6AZKOGi3Wzf8+heMM8QMFd0RYQQiOk6mgdnzvoGu/3EoX+rRsusuWvDmgmw
MW90oZ1CO5DWWQoozmHPpp31E7b7U3T2wtycqbqw3+FEO4U6EqiuYigqvlQ5Fnupn/ApbhBF8jRM
u6W6FyyL5q7M/FEX1vO/sHDs31ywhoPrW0nNaDRzn9sldMDvd2aNs5ekoRjkn6eDoH7CtrrX1k9h
q5lH7SHYjEequQuhcaPb98uyK9SEtOvf0Axd2pzZvLVuPy/zbJmSc/9m7ja4sW7fL7M/rcruemRU
yu+jg5uPZRBixzYR+9O/IX92O91OXFYPDXUIX16RPcnfzBHG7XQ7dyErrRqlS/3CyXu0e+p60OUN
EILGLM7jyWEpu9UT0vzV7eflIY6rbDOm1bVuJy7TTlfiL3/6tzB6Y+NOXU+1YI65P8+pshv/ZnsB
80YIQb1bF/Ww+nnWEP+K5z2t7iPmkdBeqJyZVSCK+q4h0rkumxEoD9ftJc2ttI8Z4/1FmVPGQxLS
1SzCH2XO6Q9/SjMprQlOc+7eegNNrFNoitoYRgyKzEZING8dNn9EAuZkdCUSIVFMozldDf+Jo08O
ntjfmzPf1KdGn9cW/e7HaoI5cw1LetBGqP0sdoN2yV5/hzp9SXtJe0l7SXtJe0l7SXtJe0l7SXtJ
e0l7SXtJe0l7SXtJe0l7SXtJe0l7SXtJe0l7SXtJe0l7SbN1VQojtJFJBVTkZ+Y0tBp7/Mm1e2FN
zK3DgDzrduV6SfvTpaGMwYS/ebYLAPBngp9+H7u9pD1eGrNRDCbqcz78C1v+fhe7vaQFQFolMwSV
hvNzKy7dSyB7Pur0N7HbS1oApJE9EqSunsvjbE8iAJfC/X8Pu72kPV7addbggvdeSRTwO9jtJS0A
0mywBse89yJrcKCbzeuppS0KsppB581krBMb0N7iBNqbUkf3LQHtA5mgvSwCY+5ri6F9uVwGPTFB
u4ISKGMaN/7MpJHMWTuq0a4ztPslaaD9XKZEvQG/074yb8A6RZ/Mzdwb3Gf+BvNczrKO7rtoj3a6
hHIlsGgXeBntTalXzUwapvYHOfwfUQt2WINT3nuZNdjXze4VGGkILRuUsYQNmzv+GwghJcU8d8c8
g1VDtS+Y+aH75n57b+cIuNoj63wf5dn7lLl/Fd2nmugknUYmjDA/R2dRdVEu8PIGvdFCuGea5vky
ftaCPdbgkPfaSC8UGLzZlMbi5XFXQDVTRd5q1kT+rIRqZmmefYs8ZpZ4Arx5yxd98d52vpqdmSsB
tXTCOn0Z2bVtZt7s6sV6tGazTm2yBke89yprsKmbg8ujNNRD19B5z/mS1Z+KY3M3MkIk93nK3J+M
t/v2C8jumpWXAPlvyI1Q3tnUcbXZZQ1OeO911uAD3txKQ1Yw+Rxv5dlGdpq98PYE/UL8OCOwfdbg
gPfaTEp4F/QyTaxcK6E+nkbtOG7Tg77wFrB2ik5iPK5bB6zBNu+1xRou4M3l9UOaxQJg2ZPe8pi9
8PZ4u5nnnx7XuBPWYJf32mMNJ/Hm6fqShjLCFUzEus80+sJbkOxmzugd1bcz1mCT9zpIZXwj9MLy
lh2cbfvCW+DbKWQNs+OsMg5Zgy3ea5s1fMObL9deGsq8p8RfePt92iliDT/yyjplDXZ4r33WcIA3
ny5LGip338Pc1gtvXiSyaLXiTNZhD3ZLHJ9475w12OC9Dg9AuAF60Uit+MLbXdqpZM06mqvGkcqO
ZA/rNIfWvkto7ZtF54lLcTPbJPxsQcnVSR4I6IzMfFGOr+idSnBSFGX2rqIciQwasRgqEkKfQYgL
1nCV9zpiDYcl9eeC0tBppNvrp5H+sXjzqZ3uGBOP96nTE5cb1nCN9zpjDed1c3t98F6UMf/6+Qp/
Ft58a6dmpM7d6/Tb5Y41XOG9Lo5NugnvhePTDfPC2y3aacLsWg/AWykMAbOGWKB2pveqZCRYC9mG
iYaPT7zcv7/9eIILQ9aguDoD5wzvDUOJxYpjHSEPcVMqtFNu+HOvp4leaGOu8sKb7+0Ujftnx/7i
VA/u8Rwo7/so/d3X5uc+o2/3wtH0NZSGfC5WfeHtFu30B809cWLSb403r/uMDu/pY2NCaWiNLW3O
lr3me/1up/1jc58ZNf2uePO1nZ44CGPPe8e57dZFXMPvhzc/22lZ+cEa/iy8+dpOj9e8D3lvOfnC
m5/tFMXhL22xht8Xb36205+s4YP3AqNEOz/d6nfDm6/tFPZlg+Np/Atzrb8j3nxtp2dO+zqIc1h6
R/AT483ndsr9OIDzD8Obr+30FGv4Qi+yfOfFe31qp+a+Stus4ffEm5/t9DRr+ETv59mNCY8Ifla8
+dpOIWuY/IxM/KPw5ms7vXBG6Lf43tgfijef2yn3I3DlD8Obr+30HGs4QC+tLgoS2oVaWfyJePOv
naI46ePF/8us4ffDm5/t9Dxr+OZ7rZHbzP2uoGfFm9/t1O4Kxe+KN1/b6ZWTxb/Q24IXQCMOwf2a
23Pizc92an+F4jfFm6/t9BJrOPK9wNqZWTRrwp0Pfka8+ddOEWv4uZ/hz8Kbb+3UPIngCnhPxFui
mhBc7hJ6Nrz52i+Mc9sfjrdCj0Axa8XWWrFl5v6G4/v3t2tPOLj3H29hK77SDx1hO73yRJJgAbFG
Z2kcT9zYQa+JYFgTqgsEPxnePNz/aKfb0rg4NtnXdaPbrAU3F8LC+5ubPRSX+gXneyjOXXfYRWLu
tzIzGv7OePMk8WQ7RfsDNd9qwcXFfPg3f3mIiz0U56475jEzs0CNzJqxN5J7Ory5vj/XTidoF5DM
MVKcdrBd0ac6/eQhPvJec9+Hs52Xl657Z+Gzcpeym9Kg9Fvi7Ub9QgrZLYYyavbj5h4L9P0U7R/s
mlmxzedF9HxsadqtnERvDNHYT0V7BbgCemKC9g4kUAQK1zPzi6DvJ8fRa9Z1C95r7jO6K95uJA3a
tjRVUc20f0u8BbtfSCLM52Lnq+dr36WP82+QMwQq464P0nKod2wgT7A9Gtm98OZLO4WWjSCfS0wQ
Yre2KuUgW4NvvNfM1vB4vN1KGrJtxTzRwcwHkfpj8eZLOyXRWlHPzDU/cloTh3s9/eK91kxDkPB2
I2nmqSdVdNLEuFC3auJPwJtXiXEzf5xZ0l2p4sH837I1+MR79zMNgcTb7aShGjL31wso3jL1e+HN
Y78A+6oNYltYrdVqNRmfauEox5MvvPczx1Pg8XYjaVbkBKor8xyL3FPi7cy9rX4BlZpE9wuE2N1x
Bn6/auE4Q4QfvPdrfeJ58HZTaeZpVubZZzaz9jwl70WIxdH9FOUtky8mgLJntyvXzxxPPvDeg/WJ
p8XbjaQhBBc/T22qpJ6e9yLEmqerjcbAKFHHkTp+2e3kdSIzpGfe+y0z5PPj7UbSkA/eSp9z+ZHn
mX8zzwfMmvNZ0jaqFy8n2fPbbgfXLfJKfY9q+I3wditpiFWsjllFAHlvAuF1PDb7hc3j109PZ4b0
yHuPohoCgpCnkGauS5tzFSA4vBfqtNhVo2X6K9Q/EHY7k0/aE+/9kU86ECV9ImnWXIV5TrEqPYr3
mutdKKbgx+EPPpbUm7Rz+aS98N6fsZBBKOkTSUNrTeYpse9v2GN5L4o3P0MPHm+38/mkPfDeE7GQ
jy/pE0ljPucigsF7IYJPzdM+3G4XTqFwzXtPnkLx8JI+hzQ4ckvXfR9neee9BkJw5qhaH223S6dQ
uOW9p3dQPLqkQZeWp6sTCqElDPzBm7/zvWhG70fUzGPtdvkUCre8l9r5odvl67eTBjFS1n3Fm1+8
9/M+apQYsPBc0rOXQ2n7vZ6e9+1a99CLk+iemZz8sQAgJJDSPuMgwqfP2woE7zXv0Ym/34czv08t
vKS5kvZ5Gn3g4xwa7CZlnuZHBsFuL2mPl4bmUhfCrfDmPw85mnv4TWrhJc2pNGu/PfRn5JWMEcHh
vebI7VuehqevhZc0N9KYarTMPtv+enSSaG5VlOPth9ntJe2x0tC4fW36XJs5rgPDe3f7kduSNE/B
vrPdXtIeKq1Yj+osYgkOdwkFivd+3BPq3ez2khYAaYgzKg/Em888BGU5fsJaeElzKA2xhLqHs7uD
w3sP7mGZko0m9v5WrpVuZLeXtMdLy6HabgUAbzfiIadXprzb7SXtsdJQ7bZcZgAOPO+17uPQ9+6E
WNpFttPzdvPreknzIA3tUWQCh7cb8JAyedUgTuzm2/WS5vwqM9Xo+1vOhzMLA817v/qFlOqX6QJb
p3+MNBS1sA443nzmISj7lT/sN6B1+qdIM3dERAOPN1/7hXFu27t2qI3NK5B1+sdIQzWJNwKPN//6
BSvfYMMP26EriHX6x0hDdbsLON787xcI3w5zCGKd/inSUPbT4fIZ8OZXvzBGu/V1n1gDugJXp3+M
NDN2O+h487NfMKMlg1YLL2muLlS3k4Djze9+IREPWi28pLm50A4JbRl8vPnXL0DWIBgBq4WXNFcX
Yg1Nc30iHly8+dcvhOPr4pbse7fb8fWS9ihpyBvlzLoNIN784CGbUiNDlBtNjD2IaghaLbykub+Q
DyaYwODt5L2HfoH4GQsZxFp4SXN1obqeBgpvvvKQU/EMAayFlzQ3F5rvFdlA4c03HoJmx06mQA1c
Lbykubqs83gDg7ez9y77hcQrP9JvLA3VNR8ovPnKQ6aBzd/7kuZ9vhedHS8ECm++8RDEGuo3sttL
WgCkIdaABfucFC88JH5+80SQauElzdWF6roaKLz5ykPkC7vWAlQLL2luLsQahGig8OYbD0GsIXep
8IGphZc0VxdaoTCCg7er9076BXRy++Xo3aDUwkuaqwvWMrcIDt585SFoz8+t7PaS9nhpiDV0c8HB
m417J/1C6epe90DUwkuaK2morhuBwpsvPASdMEjHV0VpeSO7vaQFQBqKE6xap0n+RrwXjtSK6Zva
7SUtKNJgjXOp34z3xk6dK+iz3V7SHi8NZUBPRx+PNz94CMpcRaKeJONgn2UgauElzZW0r/MBq4/A
m688BI4/+ead7PaSFhRpaF6JHz8Cbz7xEORzk8jnFs5E4tzGbi9pj5dGtVqtppkpcns/vPnKQ3Lb
kuo+JUMwauElzcPLWLnR1BAWyLvgzSceguYWKhwjxWkXPtcXu72kBUUaRETZitQJfh4zc/cdHG9S
3nM4BawWXtLcX9EyU+sibLy/hQOYvxftXMqZ/ULJt5S7AayFlzT3F0Iwa/m3RJB4bwZlxc5WA2u3
l7SgSEMn6TSaDTQbMTfxY+9MTF95L5pJwJAGIjqCvvq1lz3AdntJC5i0EgOMIhrXL5bWasCtea+B
ECvDXy1Rp2dvn8NuL2mBkoZm1TZVdC6AmasP5TwrhSdeeO8Y7aVDkcWciBDboKuTPDi5bf2+JX1J
+zOkMUKsvBFMpox4cgfl8pupEI/lOMKnhO6VqpmfPD9DT7SQFx9L6Jzr4o11e0l7SXtJe0l7SXtJ
e0l7SXtJe0l7SXtJe0l7SXtJe0l7SXtJe0l7SXtJe0l7SXtJe0l7SXtJe0m7kbSIh+v9zcvb95Zm
nCosCUDl56cAMKekeZFw+L4lzTQ/9U3CZ94c5ktC+KCyhh8SDlNKwjoV9hK+1WzWkhD+9iG1l/Ad
BPv3pSOE7CXET0kIn5Vw+D6UdiyhCpifEr6scFCy4acdyc+SwitzqN/HxXz+MnUg4et3D4JPOPAl
Lful8IGEA3W//hR/SoDvf/4YKumXhIMESF8ShiclfH1/8P7724F1DiR8le1AwtePHUg4qIr4QZ0O
vx4+kBA5eO8Ljwe/e4DoA4RQB5j+lvLpE9GHeBieRPT722erOhAx/GoTX0UeHrSqgw+/WiX5pdu3
dhn//PCwXUqfHx606/DnhySq08+WHf/4+FvLlj4+PPQM5MeH3zyDhbfKsQRjb8ZvEswfqxxJMMUy
n+9/+rfPCjqUIFnV+v36KsPBZRX4oKSHYo99mPH5Yz/EHj5q6kaCUz/3Abhvl3Tq0X29V448OfkF
vR9ijzSTTv3Y+9sBGr6uD0x+N8NewnczHL5/oJtLCYfv79FrQ8JpK3y346du8VOKhU+JPV0TcQsh
XiUcvm/p5kXC4fvHff0lCUfgPQERJM04Zd7TiJZOKLb/sWzkmIecEnu6XUZOafuB3h+E4yfO9/r+
+BAV7ePDb7oZP37M4fUsbJA0d1aZm1mt7MYUoPcNEv4JrwYNbcQa5/PAPRfDf0l7SXtJe0l7SXtJ
e0mzLmajVmmNzJPAqNBDUGIMxWDA8X2SQNIGF87vuIVuzy8tmUAj8UglM4JMFVqaiZA8Cwnuj/sh
KNrLiBPUkj5EGhcegsrukl3Ne8Wg40EsaUFWF9RYiL2/lTcCyolj7sBBu8fLDNpDVi6gPTotM1ek
hHal9dF9u5HblqbdTamRLqPnq9aOHTOnDnr3/S1bVxcFyWtjZdaw5ZPvb5csa973SLCyKdOz3YwS
A1qolNwYZa4otdHptlwa2WHegNYhzVzyfXRPOsxq4TzvShj9opUDsYh29y3R/sEEQDW1svIS1Jku
XpbTZsau46Ig32DXM/iIXiaHdnvJJbQnTEZaz5DWpHne3zoQ+WqcSoB2NjOYpLqoDViw33uG9zc7
vsGu6c7XAtKhOf5+bmLg7Xbh/kweDIiWmmlfyzfY9Qzu0Ys0KDDfMyM8od1s3UMvPrHA++EZoN18
Yg1n0GtmETSe3G4/70/mwUBe2Upu4YA1nLGbvQsvj7vC09kN8orMGuVzyJsTg2yksiNZ+L8IzZCR
ioF6u1LaupfiHJiY9weQ+vQMaKbRH9ZwoRbME+5/5tEOAN5O3ceLW3LNctsxbOMbVQIxZAWuAtsx
M4Z4A3F0//52/MnhvS3WEA6PQGloPg/524nfOHNvKBLAzOlyK8MhwkIiAHazxQHe37YWJAy1SqWu
9k1X7m3wXgf3hzykMDLX/YHVu4nMQ+22s92fJi3nicogXcDf7exm6w3ofagvz1CfPN5u1+/R6ZL4
x4onLEWOub/dLt5/8RDkfQ6TnyJGuL35OMs7DzFMmmTOdYFH2M3WG2HIS9jDvg2N89WH2u36PTr1
9WN8es033MhuV+4/eciXbzCvrzzamAME35m/mT2wXc9wI7vZeuPYM3wieIJmaCrhQPJe6L10yeKW
133Dbexml4cg1nD6MEFUqpFNBN+Xv8Ha163JleQCgOKalkB2Z6iAIskCAMPK9/v3t+NP9vdraIer
fC5JsAA/+AVotxO/cfpeWc2qoHJ63IEu1syPVODuZTen/WnfGqmdL8CF63g8cZa/OZpr+LgcjJ3R
LDc7MXOs38tuDt6IWv0ERPSyCf/iSOQ7Vqj368dRxkPW8m+6OYtzGGLrbK7Bhd1sXEfSUJ8XVVHP
Er653bz1p8iy5hy1sFMJTjrOX/5zFvIMf3M413DGbk4vpomVG+YpdZJlt7CLsd4NeAgpoLWjDprD
+eBDp0vqZIXCR7sdXTakWVnu0DjKzHKXbNzEbuf60xRCqMaYq3D2i3XCM5zmb05WKBzazbk02lxZ
RHOppkckXGaOv8RDoE8dol8ojMqNJpa3YdJTJXW2QnFNmvvLpbQvO5s+OsV4528Qnxri4l/59N2X
9JRnOMl7XbEGb7o5lIbmiVrO1kBOnGek2T+304ZuLlnDlZL6o5vdy8qli6w0987f0Ip/2yfdTnuG
E7zXJWvwopsDaYi/tf3ib2gVRYhzjJT3rhvyDYSdEW7hZ5sJAHqRbZrIKsdszTvv7R2E5ASgpA+R
Zp68eIGfueW9aB6ydE4Fm7p5vR4pDcWSMQixKdZ/3vuZ058zHl/Sh0hD7H7R9We8cP6J8CRW3gmd
h5b0vtIQ+2pKXu3mYL5XlX4Lu9m7LLtl/Rrx2uFvUThmyY3vXtJ7S7OidX20m30Ev78Nf/M4fFTq
rr9229mPc7B3SmIQ7WZTmnnmg/2YKT/jHIq9J7abvQvN2SR8tdvOJn9rsJuoTc8QQLvZlGbGID9m
vT5BPrHdHFxoZoG+33o9ippHDPAwivROJX2INITggc2VIM+811xPfVRJHyDN7NvAXeMctg7ZWCDt
ZlcaLG9ZvxfvtWLLHlTSB0j7mBu7E+814xYeU9KHSEM+F7N/wqp3/na4evDEdrN3oXF/7H68F/qG
nvOIpwDazaY0VGrKnDcHnuxm9778LR7uee3m4DJX1O7Ae+fmvm8Xy+IBtZtNaeap6CaCq+7sZuu+
H4CSPkwa2hHfSI9uwHv3kdIficLcXAG2m6M4VfMEVcSdCH947xLNZhjq2R/8TezmSBryFWg+q9S3
d/ry0f3QyoPRdRd6dEW330ka2o+a+zwTmOtZ+yh19Mlyv/sTtvw5QmgMxUiVrC0IDuwalJK+pL2k
vaS9pL2kvaT9htJOHLzgJBuw9JkdOfyV/Dj+kY59aH5vdf0cvNsHHeeoz1Tf8HvjQzfaTE//8cRH
fm74xEGsskkgWOtpdH3lILZ2pBhWSc0nmK8nSl9PxD8lWMkUzO+tOYuhWQbrh7qoDHu7MWYpzY/D
+0T+8GGrlMDM/Z+1/qQ+rICKbn0fR2mpre8l+D06lQA9QX6lkDY+c1Qjo3yY8CvHNfh8lPyqL8l8
9CsHOPP52vcnjr4/kGD8+IXPnPPDc0+c/V76/P6zDEga+ZWZPP6Vidv4Sqlt/MjZfeY6ncv63xFK
Vnht+8/7Wwhe/45UNHUuavrnBx/3IYWfif/5VeJlpSQqq7quyfNf+4fgYzVxKGqiIoj752bwmSV6
BvsVitgXrkmy8uuf1F8h8q8Q+vfqK2X4769/kFZpVZtdfbyu85peUZeyLqvwh2hR0UWtLmiiqFx9
tyFudPRTS/hKqLmE/9CayCNBoYaqTn++z66h+P3LRZUffOn5X3T774j5wMfTXH8sCnpI386Rnlv4
K7O/27IyUI3l3+id5d9IAUrd/BU69e1foZaoLaEy/4n/HUX/+StEr6b6ShP/o4grXeOnf4Uqq/5U
FgritqFOROU//WSSTwgJAkvF4mKUTP3a6yqoylKdir9CwkieDmCt/ucXrSq6pk6XBzV+ZB2KFya0
OlW1X//kFF7Q5bVIqdpA1H7Y5ee79EpbohcZcchDnW28kYb6QHPKgqYu1aEeqvPKMlQXNXn4Vyj5
d2JuR0ZRFXgLBjjxVwiLEnEbL31AFL6x/6+dl2Ch5KmsQKQ2tJVo4w0L1vuKsPF8TeQHnDLd2v4B
iHl1OqV4DVYppeojO6/IO6gTFsXi0Fr4z6Z5osXw/ZwyEDfwLfzU44cNBIGbHvGKJA4+C/7fgw+P
WkvEai72Gw+10nVVuXnb6Zs/w25k3Vnz+QIjgUWRfaM3Q6OFrS9F7Vc9gf8Vitv5iYOKt1MMy7P+
f/xs/v/bVAi6X1qdzaHJ+lMRvV4T4e9psiLZbgFQREtervhpXd9OxQP3de79Q7TSEAuTQyP+1/zk
qUBq9l4i6sjcQhVLJO8H1S91bQMWx1wANuYMsJZaIZt6BQq3Xxb1B73QiHv03BzBOt8XrJ/C3IIX
dfqJGyP3QE07oBWn0MLiYI/EqNM+ORp1BvWTSLdVzRVeEu9Rx3P4O3VR12H7WF6u50s1DccS8VPG
dFnVFyr7UF9bb1r1l0qh4U7iFKVyWn/nfJUjrZy6GFuwyWjqan6P4YuEfqivbq54hsuYSZgsjDgN
G9fAOQedT5VtvlXhBwOzz3D8exbg4gTyF+Qp73cZcnZ/Br5R19X5r3/S/HR5GjLnkJpThhAQZjXY
fM9Fp2oTs0W+L96+M5uiX4He+zpef5YdrHTVqtMLJb3I4fAUdI+nhmdXkR41kXeuiZzD+kdpbb9m
FS8BXWTsXPu4BNmk/XdM/GGoMm2/4xZ738mVfUDKyuROoIS/ZFYVpfGD9pbXrwxobeGMPN3F3QZn
PwrgEHFYnHAJuXN+9YKfdNR6LaCicoWcFcwlWo/nMqFlzQEDmqr5aeb/Hnz/fUjxdNjPyHp21Yc2
Qbp5xD+EPxazj4wP/GMxswGY/+e2BXwrhtNWkIy7bAWn6anfrcAqW8hp4W7ZEr6Z+2at4X7UBHKM
kXplkui0lb2zE3edhpdG81Vihy2FxFw2FAfvmJC3tPvfwHKU+yFzL+1h0HTBm71Cc19kh9hMucWm
fR0tbO7VewQ4T30UwGkJPA28TExgiQfMS0Cd7zUzQcbczUwkbj8zwQ2HsiCGYkQiZK7o/ivNC7qq
hZA/ht26LDiZtEAhAw15/isERSPED+BHEO6/QnNNXcuwBfznlw4f0VEExT/1uSjIw21IHoa26koL
HWiSmap9fhoCg5mshDRxsZI1cRkqpUGoqMKqf/gUSo0fyOqd1rU09Fv7NTmFhyUp2WlrF1sbRGPK
1aD1MvjPNbhTJXDo6nEceoi4fZ1d8RAPhN0qV8hJwR7bVvwcPPwU5HCi3T0te1BDZOSlby0x9piW
+FWEuzVFB7TLQ1PcF+zVFn1si0/CQgFzPfDjSoOE2D47n3UjHmppfVcqejKA6XLjdfCGWyoKzADL
EAMbDaKg24fTPHokCpO7BKeiH4JQsIJXLDt8mOG5ephLJXHY0cTNQKcbdzQm8PbhTsf4Oxf/dEaU
kz5k/4u84vFHH9pRHM0bm61FHHzFu16Awn+/P2xzDvlJuiGLEEA+4LU3MuM17t0dfdP+rqEbLnql
c8sxN5kgcToJsplN/3c55wX42RzyQFFbiza9g6oMZQlCEDmIA3qJauT97c/rFgXTHio0wcpWiwpi
h/i9DA67wlg8ed+u8Ah0zjvB+2L/OTvG75DwqUv8+UHggl+vxjAGJer19Nyh287P1zBZe0Y4Pa46
36TvEjP7kIh6VOS9urJ4Nez6WgdycueXBxRewOFJ/e2Sq+ux9xeAmUxBYNou6Rc0z3VTwXNEGVER
4WveCMV5l+QJEFdc01512y/bZ+hn8UBA4JMn95NeQ4RTEuK0cC776Ot4rPDKHaI+5uhXbAT2nyr6
QWHRDnaKP8/VTrxs7mU2jQZHRvJGHMQYB68fkeoLrNpTOzjXEiyzOXhtj+MYbLH42cX4y0i+qGVw
NrvP+CVkkjr8NUgz5/xyacCatgewS9UcQ8P01CXLXQ4RQhN6F7vPS9V9skyO5Oxj7lH9x5xpcLCc
fN6XnXoReiarqit7hSG7v+aXTDlnd5GfNMP5PeUHIk8tsdrE7X238E5F3tYg/zJYSQyFhzmrLkde
6RxQD0rhAp4YWoI6ub3XDjxTzt6zhvyONXU9uD4jzEXnbUo6vwkYFenU/t+Dlz00hzsGg360cHOu
QJvNxOUSsj+3rcNmfOipVw96ATQrjZ/MlXH+dUeRoqcEWG3rgk1ctDVUDoct5rOl4eemg0+/6KHJ
eEHqvQjHvj+irRqp+Ms4sDOzI3aw5olynC7V/TnHJZJ7iSuc1v/WZOGO3tEnvHlwi7BY4r6/Ssua
2NfMLseVX0V8Bbswvj71tp9u1TvM8ejl/ayn3jzwqOf3Vp180SQv/7PXOvSh9vkg/VNCHuSW78qn
rdkUXfTPKz+WWR+Xxw1QE3EPJPv85uvzOP1QOuRK68AT7uM6uR33vjOj+SgQLKBPbObCdtlTb/tN
Zg4K5EjI1WR851/dx3jEoh440MW5xecgK78RS4k6q0Y/WYoHr4/huAd6grmZW/mfoNCScx8HqoW0
RXP5z91KiO3mcXkZI5lyshLhENkXcL0vu+PlDAxLXgH1BUhfYjKnAQ3VDKH1x0t49i8W5xlAy5Z4
2dYS8u0ge5FS3A6yZskdAxaFFbjFq5Omud+Y9y+k5AutH2htiFNxPlIVsbya9e3FUt4Mt0TyEo24
HW6PbOAYwdenOS5A+NK08WkIf6obsvQNOJjvPEDzxBkOhmZ4EvX9ThDleGR2cVzmtv9PpK4Nqy6A
8UIwz7PUPztz3f0e1/7FJa3b1r5ZivvW/YVMVs9S95+e0Zf6Jwi3zN97/X+W5L4YuJDp5xnIjLU9
4HEcJvFXCH8Qh7GK7px8x9wzF0evHWydCjhfuSNeGXEpaPJct5nd62bEG78YxXY70B6U3/k8B+6B
dDvRd59F4kvVgOP3zn2u6sHnHpxTkEpBGD6ww1Xd+U8CuxbIcR6F50d+T1P5nh3YMQJOnrJyHwR4
cUZeYHCLMdcd+7C0rC1105APpV2PmfH8LLyL7ivhvvty3HuZeoaQonfpvE5HBny32KWIgOfxf/Jy
PuW37uF/5P+wC3u6b+7/vspyV/93KcrraijjgdLXwxifBlYefeoxqB6HKff+MUa4R9RFZ34NUV8O
6oZ4uucY06uLct1DOwwyuTxEde8ZPQ5RPXhFjLh8qsAlDDtf2fyfvar36+afxp/mFFmX+amNbf6X
gZhEuRnu605L/KYoKpI+cgaJb174o/guYklS7ueSvTjhD41/Ex9c5B89RDK36j/EgX6U3cUIyf3c
tPNFdaTmM3jOO6LWm9f0AbVEypybfghsXftMD+FMF0dCJ1H7oWXAQXvn7t6buz0aPZGPCwFx7Tq9
DMcvvnWt3/7Q2GW/7Tbr+53TBAFBUFeKx6PSHpMmaK+67Zc9p/qxf3bQR24yZwr+Dql+8GdP9YMn
3HTSXlP9OPFvH6l+0A7/5A04ZQCTpO5bUm65PwDBh32eaL8MdnE/hMfaPlffZ8vkSNb+BDuSuJg7
9TIK3Gz62WsdkpehgRu9A7Hb08umurtj/2OXVVlcixq7maNjN3yCf+yB8D9VrLu3AIfvmS3gQ/GQ
gjQPiS5UfzUCp40ApQileUVR90wcVYI/jSD5wDZwqlR3bwNudvwjxUOCqTmsBKR6yFXWuldDcNMQ
SqvlAWAM1afe4MEN4bhUd28IDlNmfDWEGdT8uBmEeB12EBs9NFWli0FYz9UonmberM7PHExtXGob
iWgSNo7kXYP5DlbKcOeTvj9M4HhwGceIQMUA3hk8zUqZUWe87DIQ9KCV7V8qytJIN/9xNS+BwsPv
jMBvSPq0hwMBtnOqnEFgLHaDKKynWKtCfUoR9RqoDuaaiH7sceEu1JR3GepiovZB2/dP2dB53FaK
uOP6l0klTLZgfhz6P1Dtf+2BFsKj0ej/DfjKGPy9vnoXLox+CAVMmj7J5ZouA28Z1VD208Yft0V5
6cRHo6Lxug7Nap2SPPCwRGwSjbMHxV9qLx5mn49s6ZIpuEs4f4sdmvdmCod+xvMaLemy/n3q5Q/L
ctcO21N81Te1f5Mgq29lguzrWaNdcS8xhj4yAGhCx4DGPUS8Ot+T+T9H3f//hv4PVPr/PqzHf5bw
hQFsFPamggMXvmCpbvvlh55ydL4ZnFkmdFi4m4U+3NFpuzzlyIfgwn9hMQiHxIPSNTg/pojwkCbN
uWt1rOTvHQrbk+cVdanzU1odPC6KG4edayL6mFQN3yzgPJY76X6366WIi9PghbpGLGVDSNuATwHc
efS1k+eCaxAfZkiCWIqnnCQM9XfktS+Hcz8axV2PuS4cuPws1Q9bhe5T5T9wX6lZirtW/XmgP0UH
VkcGm6PjtZUHJshCHVj8QakavlnAeQeWcE+/nG/lNHWNfCgb8P7rjigWZH37UPDGHrQLGRXcMWYT
99w/R0MNAw7UO/e07sF61NHG4k6qw9+O1hXwvPSzv0EkRIWDP+ZLzbtPJuk1gubC3N4VxJilvytk
njx0wQNcfOrVHpWz1B1UsKj7uQRHALMi1//m/g5BNV9926GLq+uaKHqOErR6t7su3pZgueWprDhv
Mt+cnFV+J9AVoHGmFK9BA8HK0GWBd57e23SSuKPy2lqNeAYv6QVxfpH/x8y8OsealYfAvZd0vlxg
6fg4H/kkK68ZTV3Nn3Lh1dL8fmunDt4xAehQv99h6bQyFXnYiNBuEDCd2ofWTfwjysEae8zcyCk7
OO9aY9eOAnQZiXWaVJoqh8ydPCF+Og1JptahrboKGbyioz+00ApFt+hqqC+G+NBMREf9hNRhsHmo
WQ3iAEWE3m2HlziYwp+DrMxLGzAV55R9qlrnsV++RbSaB7g9YFntlCkdN6NUDJ2b4yges65quguD
uWMrfyTr4DSJV+QdbzdLe9C4x6H+92MgF7Lzn/TprrS8GQ+583yA2agU79PdUeS7Uo+a9LyAkyvz
AfvyuxjRu0+weYvjI+5IXz1BxgfGilIBYanHUFa3cMHQYdsuWaqj7SbWkp6l5Wvm89DTMeKc1/SZ
6H2PtOXsXJ+85MeBJx9FuavfevLlGq8A8Mt1OTr72M8ju1yDBvMwxna+cPOl6MuBHTqwsdrXZX3q
PQYwGnO4idFf7/VRjrv6ridfRMmr/Yb7uvfJczkKLfDPcX2U3cV6c/SOKylQzZCp52sx5cq0BizS
ULaH5aDNaOxVv99kxgXOdXqC2qGCN5vHMOch79E7mjPwsFtxmYv3YP42iU6jczOF4SEjwaf2Dt50
sjfyLCSxqNN8JS7XTfh+XVfnv/5J89Olo3liE89ZdSaG0uoUOsV7HYAXqI6f0eS1WBR1XdTcJr6z
3ftfWya8OMvmmQFcHrx8mcGRiI/xy7XZl0tod5Mpz9Q3ZCl8Cbf+ItdDasc7j2VGsFkPZA0qpWo2
ZxIvstMU7gmetgY1V4Y134rkAqRx8logrbs5ZW+4uKOra7hO7emLh4uhc10JZ/lh/XRxDTc5QONe
HNulrF3nHFtDfQp3dv/sXN77aXc5uvyIafgpIwdtdlJp+Cj67rvt6zqq0L9Cs6WgalO574d9//l3
BP3QQ1Vg/jcASrBBUCIdBCUyQVAiGwQlckFQIh8EJQpBUKIYBCVKQVCiHAQluCAoUQmCEtUgKFEL
ghL1ICjRCIISzSAo0QqCEu0gKNEJghLdICjRO6+E20lLAg3pnQ2P/Tnp4+eo0M20JZqWujhF7zrw
wu/zLu6+2oO2WMztryNeW/dxFFXg47LPQTEesgDkKIzS5eq4twUgM1PsflUzOCtAd54uNzPlLgVN
ntuMXbuEdzyeQjPdziYq/Z4tPyiRC89IoLla13PlF08reJ41lL3fgBAf+QSK+GNXUA4KdHdMuOgt
g7Z+Yub/rntyEr4tFWO4u/PV/FhIObCDG9LlaUnF4XtmD2fqG7IUforFlXtulbZcQsWDj/MN0wn3
PaZXSB+YwQ2k8WspEN1yvStRaCHkyh8N6WeOlOR1ONDur3R7ZyAHLVjyS/v7xUvaV3Wfut+5jr9F
CgpN3Wz3xxbYPWD7RlHluJNoQh+TT3yzgPPY8qT7tLLOoi4/HOqBtq99MUfjoM2Wt380yuVAMszD
GT6PTGx2aAXHaE6gEzVwl9HAMYf7Ak98+OOjnx8Erm/mhkNZEGNE4hrm3HTLLrvki93xp8K2XrU7
x3imB0/BsqUSpxuS0+HTaZdoFScEyxNCc4S23nTedQdx7rusgkF9qwjXnd2FAY25hflcg3fNCC/P
dn8obvNl+9PcZ0CYRDQyavel6xOErqa2T6O3rIYA48AWLrtxe25zD557eE7B+ilbm3Uuo/dC0rJb
DGg+FLc/lBGn0PLi4Oow+gx449CDJhMOxjN2ThoNXi8K/XdGVET4qlfudnmQe5NlvJ+FuPcqHtqZ
n4zeYRXPStbouJDuBsu2kEqtdF1Vbg7UvvkzEJAK1Keh2qZ95yzi8LjRy4s2KLzB3aKNp/iGczZx
MTmJJ51Prdo8IO8civ9nrzhK0fjFIu81TelfGwl9Py54nwHxXN381/z+9DHBT7MegDwtbDVL3cTh
Q1cEYlcmCm67IvDNEK7WBK5lmb7U7C6d7Heu1ZnahpC6j14RCGLvMt9ySkUTZ2go6301P048umc4
LI+bfW1RzEuv4GYZFukc+loOCKU1dQbHaOcnF24A2Hv1DYe1c7t+4e6b8JBTLMLeTrG9pvHT4EHa
hXfA9BLmBK27FWhfQlkPbesqOifuIZbV4U5VVZ025PmvEGx7qOkN4EfQ9L9Cc3QuH2yKcPQJH9Hl
OYaa/QkuiO4G8nI+5beh6b7Qf4fa8nQaUpXp9sd3IUPWRyFeD6H04HoIC/FrXp6iakeS+OVSls6n
ljWLcNhYv80c0CNekRB6TlXEf089eoumfOclHV9o3lHr8UDW/Ahu80rYrAbkNrztiuM4RB+q6k/Q
nVL+vwdP3AJrFV65w3Bijn4l5hZbBx1xSVRWFO+MIlCqBt3QvotJyxtxEGM8jENiFyeAbtQxWAZ0
gWQSJevASbd9wZX3guPLZvxyIg72LUiFLWgOOwID1rxd0F1cqEYrthcP8b5U8Q6c2rnqP1s6h9L2
C9D4tdSOl0FxGf+XPNzZcthxcxccXfAGmciJ05Cg2B5fXsJfMoFCdy77Dc+O5/Ig87M8rhCHoZDO
uNPft3Os+Jk3rUGmC309jSf9HFFeGlN+Vsbl4aTXBnPHqUZ/PLaDucaLDBYlh8JdtzfbM44X5xw9
e3nkMi5PHV5c1rw8Re/3RIwnnN55vIRqRlCVoazNfCcZ2JkoHnuo88gyzpfvITTjKnivDaROFOQe
POPOKzRoV6tvcPTkQR0vtl5d8rmSZfDWPviMeV21BjxKXl0DuuiQL4/+Li2/It1Dlb3yl9eDAuXX
707YM6Lip0dH6Hs8az8olDvgJuKeuLtTInEY/KKLn7j9XXn8QfXcls0/gCV9FEwSbZ2od9r0Rwzp
yrLMvQjSQdEciqqJ/IBTpltXOLSaZCx1fff1pSZ5ZQby2djPb0d7ol4w7h/t8dRtYPi1Y4xOvXsQ
VuB47GrxnWDxnCeK9Novcz48zguPPS6bwYEdXKy1pK4j/gK/d5YMe5/NwNLVWYyXoxV77jYr8P41
vmdqYXxAQinJx4ZSftjBVSRlzEvCEDdJ2JG2zxNJ+YDYEa+wPgodIZ2FXdwidMQDQL1FjlwBtp3I
kQ/dbx048gCgMVY35CPWsMRjk3AdlerueLvynh28Hah/a8jdubv2AW4eemwfdy5ZU+mPS6jkHeUY
CrF33+07jH6yBpJ7jQPR9XtID3L/HaZAENSV94O/H7vDdF8IByIevsPUUX4cKx+T40LecIfpQzYw
MOqMl5XfbP9CIorA52yPpe/bF/aWdeHsYynnuxfqqqa7sprN5vMcrAVMZX7Jlnh56jDb2K3mGswA
kMed8nbCHi7wiMeTXs59c8jNLceMFA+x/0Kqh2xlIvtTJyDMtbiDbFzuEX+wzhhHR5njdx8a2k9O
ZmeB8ptRXMA+QZjNz1k3Ym/nwBPhC3Vl7OzLg/iELvwitb3PxMNhsdzi4yZp4f1YshAVXdRCfGjN
T1diSB6GtuoqZPCKHpL10EAeDkUNzW0M0b5jfSSGmpXy8/f/ZleHip8bdtVVG5Y29+Ds5Gg9L+6s
rv0kAKcM4gLqSS9Zyq8EYZ8mAGbbdLmst5lN/3c55wX42Ry2bVFbiy4aDvsvpMKJ9oNaC4oOWEIZ
8ozX4CvWo7oa6osHbUsf8Qp6WtZC+3NFZEWQ5/zUnFJ5f3sGNvOQQak5KNe2gjpwPfF4MDK3NHZk
7CANawNwOC5gAnBgF2CDoEQ6CEpkgqBELghKFIOgRCkISnBBUKIaBCVqQVCiHgQlGkFQohkEJdpB
UKITBCV6AVCCAkFQggqCEkFgVlQQmBUVBGZFBYFZUdkgKBEEekflg6BEEDgmFQSOSZWDoEQQiC4V
BKJLBYHoUkEgulQQiC7VCoISQSC6VDcISgSB6NJBILo0HQQlgkB06SBwTDoIHJMOAsekg8Ax6UIQ
lAgCx6SDwDHpIHBMOggckw4CvaODMHtHB4FZ0UFgVnQQphDpINA7Ogj0jgnCxBkThEkSJgi9KBOE
DowJQt/BBKF1sEEYd7BBaKJsECg/GwTKzwaB1LBBmLNigzBnlQ7CCCwdhA4sHYQOLB2EDiwdhA4s
HQQ/kQnC7F0mCMvUmSDM3mWC0JVn/l9719rbto5E/wrhj4tu40ccJ4sigJM0ThrL0UZOitsvhSzT
ibayaEhymtxff4eUHL8kWaRkeewtcNEbPyjOkGdmzgwfxlBC7GDgEx0MfKKDIYB1MFTvOhhiRwdD
9a6jYxACwwpxB0UUxcC2OxjYdgdDMbWDoY7ZwVBCvMFA+W8wuO0bDG77BoOzusHgJ24w+IlbDJT/
FgPlv8VA724x+IlbDH7iFkN94hYDvbvF4DFvMdC7Wwxu+xsGZ/UNg5/4hsFEv2FIA+8wYOIOQ7no
DkO56A5DuegOg4neYQjldyhMFEMUvcOQld9hyMrvMGxd6GJY+eliWPnpYtjE0cXgtrsYykVdDM6q
i4HydzFQ/i6GSk0Xw/bYLobYoWFw2xoGj6lhqN5pGJIfDcOCvYYhA9MwZGAahiiqYajoahjSQA1D
GqhhKBdpGHJRDUNZWcPAMTUMHFPDwDE1DBxTw8AxNQxFEg3DESwNBdvGUKnpYaD8PQyUv4eBbfcw
sO0eBrbdw1Cz6mEguj0M9K6Hgd71MDCrHgY+0cMQO+4xZGA6hgCmY4gdOobYoWOIHTqGSo2OoVKj
YwhgOgo/gaFSo2MIYDqG0oCOoTSgY0iIdQy56H8xRNEHDFH0AQPbfsBgog8YiO4DBhM1MFiHgWE7
i4GhUmNgWJw1MDgrAwPbNjCwbQNDucjAcBOHgSHvMDDkHQaGvMPAkHcYGEiNgSH5MTAwKwND8mNg
WJI0MKwGGhgyMANDRbePgd71MdC7PoZiah8DvetjoHd9DMyqj4FZ9TEwqz4GZtXHwKz6GJhVHwOz
6mMgNX0MpKaPoWbVx8AnHjEUzh4xRNFHDB7zEUPy84iBbT9isI4nDNbxhIHyP2Eopj5h8BNPGOqY
TxiY1ROG5afvGNLA7xjc9l8YTPQvDBzzBwa3/QMDn/iRTHS/HOkem1AveI/7cPYZcc0xyNhllhmA
LJXzxjEIUmvWpJprpvdsQ+OTTyT6T6p5D/6tnFtsPGAD9nbfOGlabOoG3rvFhlTqSYb9NzypdlL/
RBrHci2ZF9AhsHZvKtdl3xzcukP6Vjmvp7f7+krdYNYbdagF/YmWly+m+8z7ThiBn3Hf/nIknrfW
0Zej+8H/4NvrH4TvL4Pyu+0O2W//8zXzxv7nrjmggLq4z4pAa6S7w3u5DNW7BPUqxHqxnaEHTSqX
DN5ljl/JMPDtacDC+Zaeszncaw2OdjmozNDO23Jj4f9TwPvqOKgAvXkMQJez1QW8tuQa0regch4J
TLjE/5Fq/+jTSzaewMAPHMof9kBBDu4UN85gHlDrplsCqCe8l2NVKF+Y1q9L5jCvcq5Rd3phelIj
e8E8GEgjeHcAE9f2Gx02rnLYw3FLDhiFeP9wABVs4Kza+kTqVbmmcyNoprfbjK/LF2r9umBvW4eY
xTuC6HDhMECLBwEjI9rS5rte5w4sfcJyz3hixF/VSPIpIQBOW03A7Klk2zkCpFsKP9i2RIQmtk+G
tm+CS5OVPoc/THjck+1PTUf4gQWPsjk6JnlXnPjn7Eg3ff83eL0efaXe17eJ7VG/KHNo7dgakvTb
iXGkR4Ik45iJT1wuP6FKCvyxDzX7YICfqU+98dQPLJEsTKLpKCxg7NhCkjXciY3IKhPaCODRI1wD
EqpAZjoQE7JE+Apx2DNzD85o8nB5rlAZphRAP5EnftR7qqx+gVWfAeTVSLVIUOthllnbUGGINZpl
XRQI9nEDDLYh1/XcODZkxotFET67H7WQZbF/Lny255UPoRHYvg5GadkT0xHTVH4NBJSjkTFfQ3Qe
eLb1K0fSWN9dDSV2RBWAXudmql5NkcxARRD415rcu66pJL2dwTmbA918ptt3zuZgAv3wWW8PwWT8
jMw/Gb+nEP7T0JeLziR45TUlJB4RFT4aPFmppvEWtVp1QsIrLaYqecDlr2vVnRao6yecm26oUm3R
udbkWkZ1ac6o1T2pJNcQ8PxhT4505gemsz+l6ZLpLE+b/rYn+elso1XloJSbpqIJbaSNAjqb9dMc
hLZxOGAAawmUqecqHKpyjmIbcBD6lA6I1FC6HzlJrbb7GFdNM6wtxzi5SDVbe82TLdTOFGKcwfF9
NPHYKyQM+xHiygRxfecgbtTV9s0UAmI5/xV5vkYeDKeXTBP2D9jB+14gdwfx2IKxKSgcNyQnZxvh
mKtTejROA/MeweFe0BmP0qAgQDRLZ+sajIDt2K6KW10rXYdjIYcmC4bKuTA9GC6YnsC2TEcVjnVJ
3bPVv/clsCrvayossOZAb+64qrIpKVf9oybHhGfckBvIriPrXlWPOx6bTva8eBzqUG7tOLUCEgtO
zbQdIi1qnzGnz+tV8AwOzCG8BaisEJEBAVBhNuErgT2pAV4Z8SklpjPriFjMdQXoGLkfjWyLEhgv
YrskeKGkQ10KsCEwlJ9nDWyfuCwg5itIyzd0kRHzSPvq38Y7ZFtDQt1X22PumLqBghbhQKCVcou1
+rKY08daoIxdr4/E0mbaHnNVw5b0Ptic22jz062VAVTZi8sj7Ylk+No6VRI7sOiwa/ul4NAKu3Og
OyCvV7dG/+Gep0PPuWAplLh3L0GCX2qr/WMzCCC0f3XFZtVclAzA2dpRfpk+usqYrcutsBVwWkiS
He5lLPxDORcop0+tqWcH7/tOO5f1KJd6yggd5UWRtPL081AokaGAu+3Rolp1P3mRkRX16XFGtSZw
kNyIc81i0ImKHXGIt3a0OWLTAB8sQfo/JhZi68OLmflEIEZSMdehXEKRVtxNIBRCSsJLWmBhqaea
SmQUwrrL8OAizwLFGwWcigC/0lLb2ZjrqPGHClJtdXM4FN5Ese/ZaWVoeKZaIZFuZwRsUjm/Nh1f
0gtH3FnExNIyPGwLX3z5amxOJlx25aNzEmtgacbSbNU3OOe49gv2UhWYlX3AAgNeGA3Jh0Qbpo5P
Ny6KpYE/3VMkYXhB6vTFsaKRnO/QKL8JphRCHl05E8becRjUzHDM1DF/BS+v2G83ShdnL3mWITkH
Ksx8/Sn8iqQE0Ul594EKuROvjCpPkCgcJF9epeqjWpyJNWSPjBd1ODgFyWr+KsMtUqrUMralTIl3
wa2R37bjkFBTscnFeSfAVURpNxoGwsJKLz807ZP7aeAw9ovYI/7mO3kxX6n4GDDmcccEUo1tn8Ps
IF0c/D3X8I+TK9a3TAGLbcsSJ8UQ+DoDLIm0EckClnhBX0xntA0HXGtWETngJTtTcsHHvJSWwwWn
50s5XbD+oRt5Z1Py23QD/odHxM0OAQv9auR5JaoGQrDslwXGD7fUnYF5XXmJKZlegOMuKCPjddpj
WYQVmZDp+YyrJk4sqOdj6eXppHxsLjSOdGwf9oSL2V7itdlvu1pbx5tXHUNxpYo7ha0CNvZzFXBl
ElQLgE3JmzcPexmwIGTjWgPkC3in6qfBClwELAqzNTnQ/lkBLPkulABylsE0yGpAGFcBl/UodyUw
rbycUFpWkfQwLkW5gWTo2mPjjsMGphNeDbPbQ0LyZwaLPCQUNx4KjrZR3bxEkpLtqtznzSUnIxCd
hLKT6J4fsrGOtX3/i7OOyJ0UHzU+aJ12VxX2quXDbfCWlNIhktURHGsjqtvl+W9q1OVufCj8JzUW
IKvgmerNU+mf1MiVtsS+HfNm3FsIt8u0r/jO+c2+YkNGkRThlNGTvkMmlDpj0+wbZBLYWws0PEuC
inyWoLQdJoHpyYyDYhzEeJX0w9S9sj2ue3sUUI8Xti+zxLsUnsbXVJPdQQ4vmJIKJ2iS+VGz7OIs
9ZpoFfcXDzcQlkTSEiFuuKRw6VExitmfJr+iPFtA9kAEk4zEap4A/2eQKPyZA75uPGbDqUNnp4RG
bBqubAUv8I4fYjOzlMq8sZjUammpJaqDzRdZUuDzc/nLcYsrWeLVyhurLzd7Bf6LMZwLTbbuFsbQ
k8972nBd2Bq9HENubwCwYE6jRKeekK5tZKYxRHCl9AKIFsPBx4V/eXvDsjzXD3REYUAsGok+sgHO
q8JUyNESGFaI5v5oR4d2cLjavVBnIqddBizPo2A1vtQQH8LmVpehyQcJEz/kJAobcaQ9YUWwetKC
78fFWLltTvFhLUWRJa+3/CJDsbU81KSa9kyXhER/xZUhNYY1UxjafnR6mBe4wtPDkE6mWseqbWRW
1aAT0zMD5u1GV86GBEL9mRy1QtTa7Qz65ivtsue2v505261yHvVpwHs6ROXo24Ygu6TXuleNjSex
zmtj2zBCnPD7ItdToHh/fw0drXwVv2uPH/LUAY1tknFAj6tNiRH9Cj2tf3UpgQlXv2NF+ik+XMxT
9mA6YmnmYUZai03e244DrrrPYKomA2Z6w0N0a5ZDTU+oWbBri0VLVtd2ImOIwzVDVLGlfglJ+0eF
JxpblGaeEfqpk5/tGRnR0GjWJeBwCV0T6Jjv+v3oOpOjzib0PnruZCNPn8WkZtuZON4bn7lsk5Uk
2z7OTwpxTp2g5HZboTwPvDvC+8s0RcnS7eMcZc69U2cs61O2Mn9XH52Hu0zm149lms+sshc4uyXU
IFLKDakzGdMg86TV1xfP8BtASukiQV2x1tB27Ge3cq7Zw6FDu3QUkzTFjm9yd1uxDYMfEOK0gWfK
4pRaBotIlnEfPVx8of0w87vn8DoNIzD5zujCk5/YocyI25ZM8nMDHe2dJ9k0+KlDu6FxxkGut2Sq
Z52wTxJ1msk3bJAz1UHM/vTP/wHs+NJ6O6QEAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
		$Global:AD_Pre_Req++
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
		$Global:AD_Pre_Req--
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
		$Global:AD_Pre_Req++
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		$Global:AD_Pre_Req--
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
		$Global:O365_Pre_Req++
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
		$Global:O365_Pre_Req--
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
		$Global:O365_Pre_Req++
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		$Global:O365_Pre_Req--
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and ($AD_Pre_Req -eq 2) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($AD_Pre_Req -eq 2) -and ($O365_Pre_Req -eq 3) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 3))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$gettingStartedToolStripMenuItem_Click={
	Show-GettingStarted_psf
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>