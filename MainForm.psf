<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAALRWSURBVHhe7P1nVF1ZmuYP1n/WmrVmpmf1TH+o
qe6urq7OrMqsNBWRYTOMIkIKKeQ9AuGEFQiBhBwgCXlkkATyBmQBebz33nvvvfceLlzuxT2z97lG
SHGVqQgQAvH+tB5xj9t7n332Oe+zj/0HgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiCIOczhP/3pD34X
HK743bx1x+/KdScSiURa0Lo2C5qtfLhmIy8n5/t+1tYH/f7Lf/l/+cljCzHX+f3vfx/l4R+BooY+
FNX3orCuh0QikRasihp6kV/bjdyqTuRWd70DdSKvpgvF7JhbyI65fFj1fDMgtg58nXhe+TXvdp0K
WD4ljb04fuoM5OGFmOtccLjsV9I4gPi8WsTn1rC/JBKJtDCVkF+L8NRSeIdnwC8qG76R70JZQvqh
SUUIiM2DT0SWinlmSlnwi85BWHKJkKfqeaYvXlc8/ajMKmQU1ZABmC84Od/zK2seRGJ+HZIKZEop
bkRWZQcyK9qRXFivHE8ikUgfslLZsS8wLh+RqSVIKqxjx8Xad6K4rAp4hWUiMDYXKe8wn9TiBgSz
9fEMzUB0ehmS2HE+kRmdqUpQIeV01imcOq9CP5uf5RWbUcHqrhBZJXVkAOYLN285CwYgqaBeCPZp
pc1IyK3Gg+cBeOIXwRpQE1KKGoRpJBKJ9CErraQJwQmFsmBZ2MACGw/OM616xOdUCz3n4PgC4fiq
er7pixuasMQi4SxDbGaFME442ytXgkK5L38rp8vHTZ3/lWlTluGKy6pCSGIxMukMwPxhqgFILWoU
Gozxjl34j9//Dn/60x9hd/E6sqs6Ve4sL6XKIMxn08DKPidMj7wcCv2COk2Rb0tV00gkkmopDEBM
ejnrmTeyHnP9O1ADEnJqBAMQwvJKY52s5AK2b6tQahHrgBU2scDNTcLPlcym8XlULcuVXtKMsKQi
eDMDEJ9VKZgNfqx/KT4sG5dazDp/PF02nFbSwtLmf5uRyJZJYNNTWDmnzp8sl5AOm5ebGjIA8wxu
AMpbRMLGzixvYw0yF19/8w0+/vgj/OE/fg8NLV2kl7UqzwSoFAs0st+skbCdSBF8fjafCvGdLpU1
MkWwUjXPrEhe7rRS3vDr2E5aKwyrnPdvSFgHVlepJWxZ9pun9WvXK7mgVigHXz6J/2ZSNd/PxOoy
MbecOX52EHvL7UAikVjALG1mQWyWDEBUzt80ACkssMeyXrW7XzTcfSPh4R/1qti4F75RiEore6MJ
4AYgPKkYPsxs/C0DwI8TXiFJ8A6IwTOvUDzyjkZmRQeeBybgiUcIvAKi4RGUoJz/TQYgNKkEWcW1
ZADmC1MNQA7r6T/zj8Qnf/kLPvvsU3z80X/ipxUrEZddiYyylld2FC4eLKPiE/D4hT9zibIgzoNf
WlE1Xnh4Ipg1PL5D8cbFDcRUU6AY5o47Nr0AcWyHSONBU5j2qoFQDCvG8csUsckZ8A1LEcoglCMh
Gf5RGcJvRX6K5X+Wvzwt5bAwjpW7uB4hUbFw9wnCc08/+EakIUVuTqbO+/q6KNPn09j6JGSXIDqj
HBnlLQiLS0RYcrHgpGXG6PV6UJTlVYOVVtqE8JhEvPD2x9Pnnnjm6Q/vULYDsh2d5/FK/kyKNPg1
vzS2rSJj4+EZGI+08tZX5iORSG/WXDIA6awX7hmahozMXExOTuBnsHHlZRV4HpCAjNK2N6TxdgaA
d8LuPvJDU0MjTxgRUQmwc7wP/6BoTIyPoae7G1dvP0JcLu+QsHphy5IB+AB4/QxAcEIOfli8BH/5
y8f485/+CG09QyE4ZrOAVFJWj3QWYPjpaN6Q0spaEREdg7t37iEosYjtPDwYtyImMQX37j9EEGvc
PAgmF9QgPruCLSMLdjzoJ+ZWgN88woOut48P/GNyWD4yU5GUV4X43CqhUfKzCsLpb5YGv9FEyJfN
Ex2fBHf/OKEMXOHR0fAKTkQ6c60prKfM8+ONUzi7wNKIzy5n6bC8Wf6yHnk9K0P1y3Vh6xccGg6P
gDgk5LNeO8svLostI++9J+VVC42cz5eQw6+l1QrrwYO/cv1YPXFzEhQaIrhlPi0pv4btIHWycrD1
4+VIZOUSDIFwhkC2bvE5fH1fNQFC3oXV8Pb1R3iabOfl6SfmVcrn5/UjGyeUV6jjJmRUtCIyLgFe
rAxkAEikt5fMABQhNqOS7a9sv2LBTpWEU+Ss0/Mm8encQKhaNpnto4l5tYIBCGV5ZQjHAmboXxMP
6vzO+vSMHCHYZ2bnIz4xDQlJGUhJy4ZUKkVJSTleBCayY3f7G9JoQXhyicwAZLNjhnD848eWqeLr
04xIZnpu3XNHS0ub4C/KyiqFv/39A3C8eg/PWIeCH+Nl68HqSy7hNzu28uM5GYB5BjcAFa1Dwkbk
BqCqawzHz10S7gHgJuCxTxhqWkV4lNmMzcGd8MlhZqBE1uNMZ/OHR7Oepl8wPAOikFzSxhpzHfwC
Q1kvOpAZAGYKimsQEBYJHzbOOzhe6FGHx7BlfILhE5bInHYBnjx5hCeeQYhlDjImNYOlFwJP/yAE
xechvagGXn6BcPcOZOYkH+msd8svSUQnJsMziDVIVgauyJg4+ISnITm/DN7+bHmWRnhqGdKKquAb
FAqvADaOudlktlPz/J97+cErMAZJPGjzHTC3GC+8ApBY1MoaOe9JN7F82pCQmc/y9oeHTwiisyoQ
xvLx9AuFB8sjkh0k0liAVqyfT2gi27Gr4OHxAq5PvdgOVYzg8BiEsh0wragSPgFB8PIPZfkECQE9
ragCHp6+8A6JhruXN3wj01gwbxHqVtGjTy+ph29gMKKy6tj2aUZYdBw8fINYeQLhHZbKAnw74tjB
wNM3kNVTCF74RSKhiBmkhCRmALghapuSHolE+lviZzoFA5BZJQviLFi/Lt7JCY7LY8co1ukIjGWK
e0UeftHwj8xgBl318insGMTvxveLzpUZALbPq5ovo6ydBe5MJCVnoL+3B84u3ghOKkVYagVuufii
qbERBQXFcA9KEk7Xq06DdY7Y8YebDZkB4OO5CWGBWylmFpgy2fEuLqcWV249RkdHhxD8BwYG4HDl
HtxDU5BV2S7Mq5hfIT7M0+WmJjS5lMUHMgDzBoUByKpoRywLcOcu38aqNeuF4P/Jp59im54BIvz8
4ZjSin94MITHWS2orapngZ65Rm4AImMQEJ2BgJBwhKWznntquhAIgyOiERBXwBpVE6JTclngTMST
5x6IyaqCl7cnAuILhFPVmeUt8A8KRghr1BksSD738GKNqBjx6dl48sKP9WrL8PyFJyIyqgR3zndS
HpijE5NYQE9QGoAoFtR92U7Hxz/1ChECe2ZlG+uNs2DNdsqkfGYE/PzgH8vKEhkB90DWO2bp8PR4
0E3MyGU7dCRS2U7HzxLIxrciIT0Lj5/7IrG4DfEp6XjqGSAYlfDoGDzzDhd63y/Xzx0xecxJx8TC
JyoTOTUd8GfGI4TtgGGRkax86axMXSzNbLzwjWA7TJlwej8mn+WVX4oXnn6IL+CGRHaKf6oBiM5h
OxrrAbzwDmLrxuqtrAHezBiFpxTBxz+A1U+l8OhmaGSUcNCITUolA0Ai/UK9jQFILWkVrou3Njeh
q7OTqeMVdTO5e4ciLpc/Us3P0r2WBjcAeS8NAO9V/2wepgxm7n0isxATm8TSbcd9Ny8884vFi4B4
OD/0RENDPbKycpgBSJ4RA8BjAL/k8MDNHZUVFcxgNKC2tgZujz3w2DeGHbv+jgHIJQMw7+AGoLZL
itCkfKxcsxa///d/w8cffYQvvvgCn3/0R2zca4e/upbhI89O/MOjQXzl2421QV3wzmlGXiVrXJHR
8GONKyEjB54Bsp5wdFYNQsIjEJTIAnkK69EHRCMqNQ8e3j6IZD3Z1PxyWa88OJ41nGZmAIKYeahG
Wm4Rnjx7Ab+IRNarjkVAVBoSc0pYYGbBUjitJttJ+Sn/2OQ0lm4sMqq6kMUUEc2CbgQLsBWsTLHJ
cPdlveb0MhaA/fGCLR8YEQ+/0FihF8/NCb/TN6Oc39zI0ixhxiK/jPXM/RFX0CycCeFnGTLYThWf
lsWMRhwyq7tZYI/BE3dfBEYmwj+M9ewT8xGdlP7K+kXnNrL5ouEbnc0MQCcCWH2EJhchkK1vODMx
2ZWdzDxVsR57GOKyiuDpE4okZjT4mQ4f/2DEcTOgygDkNiGOB/XgBKEs2dWdrI6jWVlS4O0fxtJo
Zwagi5U3A94hSYghA0Ai/WJxA8Bf0MNvvnvzGYA2uD4NQHlpqRAga2qqX1FDXQ0ePWdmPo/fEPwG
A/DaGQB+E9/r4qf1fSIyERkVh96eLtTW1KCstISpFNVVVeju6kQq65S8CExiwbtDdRoKAxDJjtGs
48LPdgomYIr4cCY7FnqHpbHjrzfaW5tRWFCEi463kJ6eyQxNO9w9/fGUmY8Mdmzk80+VcOmTpZtE
ZwDmH/z9/y0i4ODxM/iXf/4fwg2An376CdOn+PxPv4P2+Uf41zDgvz7rZwZgAP/fp/34/z3vw5Ps
VhTXtCMsIhLe4WnIZb1dT/eneOQVgeyabgQEByEoqQQRUZHwZEErkQW7J8+eI5IFwfjMYiSw4Rfu
3ojNrUcQm1c4nV1YzYJgIHPgBYjP4jfSlSG1oBzuPqxHX9TCdhRZ75gH5/TCStYoPREYl42YtDzh
lH4UMx7JeeWIyy5HcFg4vENTWYBOZkEzFvE5lYhOzUcKWz4ojBmC+AK207QJ6XFlst/hzEQ8Z3lF
pRYIvfoI1rvmBsCDGY3Mym4kZeXDw4cF48xy4cZF/taw0IiIl+v39Bmi85oRHcfSYT18fr9AQEAw
QpJKmWFJZmmHCWdZgsOj4BWajNTCMjx3D2TBu014dMbTJ4AZEOba2QFBVi7W0y/lPX1/ROWwg1NR
BVtnX6F+YlNzhLMB/PGcwOAQ+ISlMIdfKpwVCE0tQ2xiEit3PDKrOpTrSCKR/rZ4IOQ37f4tA8DP
QLq5hyA0JBxRUbGIjHxVUaxT5PrUD0mFP19WkNwA+MfkISyp+M0GgOXD3xPw9LkP4uISEBMTj5hY
udjv2NgEeAg3K2cgq/zNBiAipYR10nKFGw9lZ1FfVRoT7/07u3ghLDScpR2Hcw634PwkCDfuPUM4
O17FxMTi6i1XJDOTxIM9v3GR15fshmT+W2YAwlLKkF1KLwKaN9x0uuPXPDiJc5duYfGSH/HNN9/i
888/xyeffIKPP/4Yy5avgKmhAfTuRuAfno7iflY7iqtaWYNpRQ4LLokZeaynXYrc2h4WBAsRm12J
PNbzjU3NRixrcNlldSzgRiE4OhXhCRlsB2hAZHwCfIMjEZlaiBzWm03NLYZfUIQQzDKLKhEYGgXf
kBhEsh58dnkjIpJyBOeZzfLk+cryZu43t0S49OAdxNJKL2cmpAfJOQXwCw5nPeMkoWefW9WGqLgk
Ib/A6DQhnfj0PGYSqlkarNesTLMNudUdwvV0vrxvcARLs5T1zCvZDlTAeu4drKxsfdNz2fRI+IXF
C8/MZrHG/nL90tkO0sIccA0CQyKYUShFXGqu8IRDHjNIMQmp8GVlDYpJQzpz91mltQiPz0IG2/my
y5sQmZSJ1NJWtp5tyjLlVLQwE5MJfmNRLqtX2Trz/GNZumwdmNnKKq1nRiSWlTkK4SmsTtm45OxC
RCYXIpuV+eU6kkikvyV+DIhIZYY9s/KNBoCPFx7PC04W5BGc8op4jzwyreyNy3MDkJhXJ7xxMJyZ
jTcZAC4enANicuDO0vQQ8nopfu3fNyJTuNkvjR0fVC0vMwClLI184QzAmwwALwN/nPCpbyxcPSMQ
EJfDjundiMutFk7/u3lFIiA6i3VqWFm5WVJhAPg9AJFpFcgrbyADMF/gZwDqe0aRX9ct9LAjWO/X
NyKJNa5o1shiWc+c9W6Ts+CU1oLfeQ3Au7ATFXUdwo7ClccaSX5tFwu07crfPLDm1/UgnwWs3Jou
FNT3MvUI4uaATxPGsTxzq2XL8WE+LY8tL5u/l80n+8gEL5siv6lSLKcqLS6envCRCsU8PH/5cvm1
fNrP01SWjUnIn5V/av5Tpwvp/2z92Hx8HP/4BlsXvqwir3z5csr55B/QmJo2L59i+JXxwvyvrrNQ
72ydX5aBSZ6esI5vqDcSiaRahfXdrEPD36HxZgPAr3vzafy6+5vE7x+SXSNXsTwLuNwA8MuQ4ax3
/rcMABe/FMBP8asUmyYEchXLcXEDEMkMTVB8gfCYHr/fQJUB4AGdX/rMqeLH7062DixdFtz5Tdf8
siUfx88SCJdL/4YBiM6oQkFlExmA+QI3AI1940KwKG7sQ2nLIMrbhlHRLhZU3jaE0uYBIWjl8GDI
AzSbl0QikT40lTT1IYYF/4ScWiHAZpS1zbx40GbmgN9syHvd2VXvKB+mHNbJiEmvEMxGSkGDMMwD
Ob+jXyZmIl75LTcWit98vHL+V8dns/my5dO4SUhjhiMmqxqFVc1kAOYLwj0Ag5PCJzD/loqZyhpl
f1VNJ5FIpPmuspYB1lOuQUxaBTJZbzmd9Y5nWhklLUhkeUSklCGSib8HQNV8MyG+DpEppUJecczY
vHmdWG//jcP8t6rpL8fzdYpnwT8+pw7FNa1kAOYLMgMAFDUOoHgOipeLNNfUT/qlaiDNB/FjTn5t
L+vJ1gins2Myq2dc0RlcVcir6UFaSSui0itVzjcT4mnz7wUU1L1cp2g2/hdJKO/fE0uXqbBhEIVV
LWQA5gvXmQEYkALNXQNo6nx7Nc+WugY/CLXMlrpF71ytH5J6hmZFbbOh3uEPRu2zoT6xSnX0i9Et
ks6QRt+ozv4RdA1K0D2kevpMqWtQytZpROW0X6IeVs6/p97hcZTUkAGYN1y56ew3DmBINIDBgf63
lmhwYFY0JBr8IDQ8JJoViYeH3rkk4uEPRlKJeFY0Kh155xoblX4wGh8bfefi77h/15qcGP9gxP77
+2JU1tElgHkDNwCjbKMNsmDb39//1uKviJwNDQ4OfhASiUSzoqGhoXeu4eHhD0ZisXhWNDIy8s4l
kUg+GPH33L9rjY6OvnONjY19MBofH/+74lSQAZg/kAGYHakK1u9CqgL2TEtVIJ2vUhWs34VUBeyZ
lqpAOl+lKmDPtFQF7JmWqkA6X6Uq4L8uMgDzjF9mAF4GZJFoUBmg+V8x22n56WE+39QA/ks0NVAq
0lXkNygagnRUCpFiHsX4XyhZ+m8eVorlPTQsZgcKifD7Z9N/oRTr9a6lKmDPtFQF0vkqVcH6XUhV
wJ5pqQqk81WqAvZMS1XAnmmpCqTzVaoC/usiAzDP+CUGYHCQBRkWzHp6etDb26cM3ENDIlTz92I3
tgm/FeN/qYbYAZmn39vbiz6WHx8nBFAW2Ab7ulFWUoaeAVkZhAAtHsE4MwW/JEAPs4PxMDMqU4e5
cZk6D9fQ0DA6WxpQUlIFESvX69N/qVQF63chVQF7pqUqkM5XqQrW70KqAvZMS1Ugna9SFbBnWqoC
9kxLVSCdr1IV8F8XGYB5xtsagJHRcZQk+WDNmhXQ1dPDNuMDKG2qxq1r9qjo6sclC1NceRTDUhpj
aYmEg6viLMHbiDeeEDcHLF+7Dtt0dbDP7ib6hqQYZgFHIh2HqK0IptqmaGDpujrZIzK7FsNd9UjO
yoN4hJkAFUH3VYmEPNxv2eOhTwL7zRv0GLzuXsHtF9HCb240BIPA8hydBNJ97kJP7xjEbK34OBET
P5jzQKs6jzfr9UD9rqQqYM+0Xg+i81mvB+p3JVUBe6alKpDOV6kK2DMtVQF7pqUqkM5XTQ30bxKH
DMA84m0NgHQCiH92Gcb7jqGD9f4bGpvQ29+LxoYGSMclOL/TBFcfcwMAjEqGwT9V2TckFu605sur
CvpTxXE6sgdn7/hCKhlCZ0cnBgaHhDtp21ra0dlQgN2G5qjoGUZHSyMGxBJEPzkPNVMrdA1ys/H3
grJIyOOKlRHsH4QLvzn37PbB5pK78HtifBTNjQ3oGpDNyw2AgcEJiCcnWbAYwdBADxqamiFhOwO/
4151Pqr1eqB+V1IVsGdaqgLpfJWqYP0upCpgz7RUBdL5KlUBe6alKmDPtFQF0vkqVQH/dXHIAMwj
3toAsG2b4H4d1nbXhI08IpFCMlgPWxMrVPQP4urunbjxPBljI+04d8QSxsbbYWh1GNWt/RgZ/vuX
BYBJPDxjhb3HryA1JRE5RVUYnxiBy8XDUNPRhbmFEdZvMEHnmJgFcVvhmwXHTVfjtx99iauu3hiW
jLIAqDr4yiQL6s7Hd8LU5jwSExMEWRlvxUnnYBb9R3D3ylEYGWyHjrk5Cut7UBjqhu3bz0EsbYGV
kSkOHT2ObRqbse/cbYhYhfDH+36ej2qpCtbvQqoC9kxLVSCdr1IVrN+FVAXsmZaqQDpfpSpgz7RU
BeyZlqpAOl+lKuC/Lg4ZgHnELzkDkBV0F5989in0DQ1haeuAnt4GGK3civzuAVyzNIdLQDb87x6F
+k5blJdX4KSFFnaedhEahaqgP1WcR/Z78e2K9di/by8e+iWjNMkbm7SM0TUyiprMQKxdoYuuiWFY
qWnCL7MFBWF3sG3/KeF0/d+/KVBmAO6f2oGvlq2DjY0NDtpYYfE3n8DBPRUFkQ+wQsMIBWXlcLmw
D5r7L6Mw1gsmJueZ2anFqk8XITirCWPiduhvXo9ncSWYHJeoyEe1VAXrdyFVAXumpSqQzlepCtbv
QqoC9kxLVSCdr1IVsGdaqgL2TEtVIJ2vUhXwXxeHDMA84pecAUjyvIEdVsdR39KK2vpmiPtrYbJO
F4U93ABY4FFQJq5Zb8VGg504Y3cShw8fgltAHCTyG/VUBX6F+BmAuycPwiUwS2hEnICbLI0LbsLv
iYEaWGwzR6t0EIe19BCY3YqCUGcYHzovTOcvDVIVeF9KZgBu2u7E1aexwm/O44tH4PA0DoFOB7Fk
gwbsz57B0SO2cPaKQlbYU8EADA5WwNzIGl3MaHCuH7HETfdE9mv0tTzeLFXB+l1IVcCeaakKpPNV
qoL1u5CqgD3TUhVI56tUBeyZlqqAPdNSFUjnq1QF/NfFIQMwj3hbAzA6AcQ8doDF4QvCRuY33kkH
qqC1eBPymQG4uN0Atz3TEefhCEMLW5RVVyExLhqlNcwoDA+pDPpTxXE6YoFdx6+hsDAX+aXVKExw
x5o1akjMy0XQ3TP4+KN16MEI9q5Xg096M0qj7uPHjbqoaGgVbtBTFXhfSmYALu/Xx4lbvsJvznVb
cxx1CkVFqhe0dLcjt6wGGSlxKGvsQqbfXWhpH2cGphEbFi3Gff84ZMQGYs26zUir6sTYiFhFPqql
Kli/C6kK2DMtVYF0vkpVsH4XUhWwZ1qqAul8laqAPdNSFbBnWqoC6XyVqoD/ujhkAOYRb2sAxJJR
FCQE4uFzP4ilvOc7BPFAM26fu4qa3gEE3r+LoPgiTIyK8MjxJIzMzLHX1h4ldZ0YEf99A8B3lnjf
+9Dapovt27djz6EL6GU7afjzW9A1NIDDzSu4dd0F3RIRnly5jpTiFoj7m2G3ywj2To+E8v29ewB4
HiFP78A7IkO5g4Z5uOJZcBomJ8cQ6nodxtt3wmzvEWRUtKAuNw5Ozr4Q9VfCRGsbTp85BSNdY3hH
5wk3DKrOR7VUBet3IVUBe6alKpDOV6kK1u9CqgL2TEtVIJ2vUhWwZ1qKY8C7lKpAOl+lKuC/LjIA
84y3NQB9fX0QDY9AKhkRfssC9yDGJsYhYr8lo2OQ8EDPAi1/I/Q4azCTE5Os9y8Sln894L8uPs8I
C+L8UgBvSPx94IMs/XF+2n1yEhMsrcnJcWHc2MSEcGPh4BB/QA8Y5S/r+buXAGSPJEpHxzEqESvz
5eUelbJhXm6Wl/Dea/ZXOjIsvGeAZ99Tnw5DXUu08+IxhODPllWVx5ukKli/C6kK2DMtVYF0vkpV
sH4XUhWwZ1qqAul8laqAPdNSFbBnWqoC6XzV68FelThkAOYRb2sAXpcigL5rqQqms6khsQS9zfmw
2Xsc9X0jEP/Cx/8UUhWs34VUBeyZlqpAOl+lKli/C6kK2DMtVYF0vkpVwJ5pqQrYMy1VgXS+SlXA
f11kAOYZZADeRgPCmw9VT3s7qQrW70KqAvZMS1Ugna9SFazfhVQF7JmWqkA6X6UqYM+0VAXsmZaq
QDpfpSrgvy4yAPMMMgBvI/5mw793k+Hflqpg/S6kKmDPtFQF0vkqVcH6XUhVwJ5pqQqk81WqAvZM
S1XAnmmpCqTzVaoC/usiAzDPuHbzjt8I2278G/+qAj1pZqTK3JAWjlSZQhJpPklVh+N1jYxIUFbT
TAZgvsANgHiMDACJRFpY4jczk2ZWQ0NiMgDzCTIAC1uqeqsLSarqhEQi/ToND5MBmFeQAVjY6u7u
RldX14IV77WoqhcSifTLRQZgnvFrDICqnhRpfolf0+MBkBuA16/1LRTxeujo6BD+qmrnJBLpl4kM
wDzjlxqA3t5etLW1ob29/b2Kl2EulGO+ige+5uZm4Y7rhQw3QaraOYlE+uUiAzDP+CUGgPeU+AGT
Bw9+6pSbgfchnjcvAw9k77Mc81m83nj98UfUVNHGzEFnT798SMbIMDOAohH2a0Ko/x6Wxhh/7eMv
pLWlWfaGRyVjaGltk//mb2EUoa21RTAo/aIp5ZscFx53Uyw6OTEm3HX8a5mcnCQDQCLNoMgAzDN+
jQHgUpw2lYzKnv3kSMTDP1tGIcX8/G8f+zs6xg7mwyLh9+vz/j0pytHZ2alMlwe04RGpUI7B1+af
qgH+l79ieHwCQ7/g3Qd9/QPKwMOZYMFHqLMBESbG+euQf77M3xIvt1CWX6G+vn6MsTyF+mO/edn4
65GHRYNvXZ88f15/rxuAka4aWO/UxfpNm7Bx/UrYOjwA38KSjgpsWrkKLoGxuGBtDJP9trj1wBVt
Q7Ll3oZxcQ9O79bHmjXroG64H3V9o5gYboaFziasXrEGBnsuYoi1i0uWOli5fgs0NTXwKDRdvjQr
Q2s+dlrYolduOjpL47Fn7zFwS/JrIANAIs2syADMM36tAehnv/nLNHKTg3DQ2gpH7M4hu7ZVeM/+
q0GoDwODQ8L7+vmwhL8cg/XwArweIbmwFpLhoSnzvp1UGQAe/Gty43H5phv6xPw7Aq8v14d+/kGg
sTEMdzfjyRM3VLb0Ykj0FiaABXnxYBeeOV3GQRtrWFkdxVPPCAyNMhPRUQO3J4/R0CkSPkmscvnX
xIP2iEQifCeBGxdV87xZAyzw9yHUzwc55Y3ClxaHWdmCvDxQUt8hmADVy70q1QZAChuD9dh5xgW8
Xz3c2wjDNd/ghm8Kol3PYJP+ERRnBuHHH9Yiv6EdfQN9wncf+BmBkqJ8NHYNCkOcyrJ8lNW3yIdk
iFpLcfPGPeH3xd3acA7IR/CdQ9h2+I4wzv3JE7QOdMBiy1ZmNJLQ2Cb7SqSCkaZMaGjuRJfcALQV
hGPbtl2CQRkabENeXj5rewo7MInSojxUtXQKQyND/ehqa0d9XYu8zGQASKSZFhmAecavNQDSsQnk
Rz/DkmXrcNftCW44HsVXi1cgraJD6BEr4AG3uzYPDldd2SFZCucr11DR2o/C7CSU1L4aIPgHePr6
WG92SldbPDQofOlPgeLjQq8aAB4oxnD7iAn+2z//GeF59ZiQimU9/SlpDbSU4tLle+gfHkZyYhza
+ljwmxgVgvCIdAxSZl74u/8VjLDgyqcNiMSQdldgzbff4LD9dTx84Ax9tVUwPXKNBdABJCYmoIOn
JcB64kNDyiAzMSZFP0tj6jqwvjC8XO4gLLUckyx/RREnRtm8bF0Uy/IgJhHqhPX4WQ+f10VfPwuy
Y70w09gMl/BclhQzVEMtMFy3Ev4ZdfLlZHBzMygalg+xbcE/gsTMmILe7i5hh1Ugac/DyqXL0cTa
g4KyqMfYorMbNqbr8cdPvoeZkTr+z2//iGu3H2LvoQNo6B3ARWttrFFTx48/rkFwaiH8Xc7DwMwM
xkZauOEe+cqZE05SyGOsX7Uehc19uGShiS3bTLFt6zY8jixkU0XQ2rAEatp6+On7FfCK5+NkjDRn
Q0fPEj3yCuooisLOXUfRWF0AnQ0rYb6TpWNuhc7ePjy8dBDGOy2gr6/N0ihG/DM7fPTpFzh9wY21
FBlkAEikmRUZgHnGrzUAPLBGP72Mvy7XQX6N7PptanQgcirb0NWQj6OHd2PXQdZjbO1DkLMN/ul/
/g7nLp3F7/7nP8Pi/APERAQiv6wWge73cf7cMRiZ7ERMZjU7KEvge+c8TI23w/rwMaSXNqE8Oxx7
dlvAcu8hZJbUY2RE/IoBGByWoKcmA/tsTsLz0XWYHXYUgujoyAA8Hp6DkZER3AKTEfnoDP77//g/
uO0VhsjIMESE+OPBiyDhy4UpIS/gHpKM1tocHLTaib1HT6Ggvl32hUNmAMTtJdimaYTSLnn46K/C
ujVrEJlRhMDAQFSUFeLyueM4esgBJXUNeOx0Bhbm5ngcmiAEwOqCKFhaGMLyqCPKS3Lw459+g79q
WKNP1Atnh8MwMjTE4/BUjA51wunySdgdOg3bY6cRnVWOsXEpXty/gdjsSmYIWMAe7cV+Iz08jS7A
JDMYo0Ot2KWtgZiiduQn+WCXhTn2Wx1DSUMvhnpqYW9nBfO9+xFdUIOB1jJcPH0Mx2zOI6OsAWNj
L43JSEsWVi1bgbaXDgSVsU+gsf0MMmM9cMjBi+VdB0PTIxgf74P5bnP4vnDDJjULYd6W8lyE+D3G
N//xB5juscYuAzX85evN6J6SHifo0U1oqa+DZ1Qy7E10sf+cK3IzkrBq6VokVfVhlBkhTmnEPazc
aCn08Dn8DICW5m70yYe7S2NganYEVYXJWPf9cly8fRfBCcloLorDn//l32G53wbbt67GCs2DcLt5
COZ2N+RLyiADQCLNrMgAzDN+9T0AgyLW+ZTgxd3z0FDXxqqfVuPczcesp9sP880/QXvXYRzdsw2L
Vhsh1PcBlizbiMiEMKxZvBRuwYk4ZK6J5+HpMN38FbZYnsedk3uxxuAgYgNcsXKNOvz8PLHsyz/B
yTsU25f+FYZ7TuLajfPwjcuGVCp5xQDwABHofBI6u+1QlBmGxYtWoGJgHLFu9vj+p83w9PTAVs1t
cHK6jJUrNyEuNQnb9LQRFOSH9Ru1MCAdhzULVs7uQdi5eTlMrE/igMlmfLdmOzrF48LbrcQdpdDV
0EN6dZdwZoD3VK30jXDf7Qn0TLYjjpmfP//+X+DmF4d7Z62xeNVmONrb4dNPv4ZnYBj01/6IM3ee
4syBnbA67QBLXXVYXX2KB+f2s96uBXzcn2DpknUIiozAks/+B844+8LNwQbbDjhC2leDNStWIaO2
VzAkGO3BPiN9PI8tEgzA2HA79ujpIjo9Exs/+zN2Hb2AS9fskVRUjou7dbBaZyfOHd+DT7/bhIhQ
T3z0h3/F7cehaGjpEOpSycQwdmosx7G7obLhySHs1/wR557FozDcDZanHzPjUwod/QNsR++EhSUr
93NXbFbfLczeXlWAIG8XLP3qR7wIiUKY1wPsPXgWg3ID0NdYCg8vWdplwc7YZnoOD67b4MLTRGHc
bo2tcPGLQXBAuDBcGH4Xm3QOKw3AhKgOaxd9j6QG2VmNGLdz2Kh/DJKhARTn5iA02B3Ll67EnTvO
WP79KgRGxMLv8U0cd3DB4xs2sLn8SFhOARkAEmlmRQZgnvFrDQC/9pybloimPllvrb+lDts3rGYH
22tY89cvYGRuyXq8ZtissQNJCeHYbn6czSXFLkMTVLSLcMbKAB4RKbDZrYf4GgnEVTHYbGqGszb7
cfZBtJCm05nduO6VgKIEf+zZvRv7rffAKzRNuH6uNAD8lPZoP3brLMePqzZBS1sLn//h33HTJx5X
9hnj4pNkIa1h0QCqcqJgZHqIBfQuGGzbirL2QVywtsCV27exe7ctqkpT8cW//wE7LPdh104TVnZW
1g4RRsQjzADwMwCGKGiVnzKXtkBt/ToWZCJhxsoWE+4LDcPtwqSDmiuxbKMu9uzdA+3NGjh17BDU
t+4TpvFLBL397Th/cB/8ErNxZLseAnI7hCn3j+/E4ZPnYGSshcoBNmd3MbYbm8P1zjWYH74knNUQ
LndMDGCPxma4hstPj493YNuqdYgpaUNK0GNY7N6LfYcOITo+Fmrf/xVbDc2wZ48FNm3chieuTtAx
MQW3MAM93T+7CbCnNgcGW9dji5Y21DethInVOfA50n1uY7/9U1aAMugbHxQMgBmro7qeftgf0MRa
NQ0sWbIaQSkF8HaygzozJNpqajjj6qe8BCDuroWZ3mqobdXG0lUbEJJVh8G2QuiuXoWN69djm9VF
dHe347DFFmxi6X330wqEZdfKl5bh++ACli5dDW1tbSxbsgoJbJ07ypKhvUUDZmY7sVHdCEW1Tbhv
vx+a+obQ2LgJLhEZCH5wBNaX3eSpyCADQCLNrMgAzDOmcwkg+O4JfPL9GniGxSApOhRb163FI/8I
HNDbgtN3vRD24jaMD5xGRUEcvvtyBTJKCrFt5XLc8YiCjYUmnoUkwdJ4MwLzutCW5YPFmsbwf3IL
K9cbICQoBMt++A63PELh6eqCiJhEHNBfhaUaB8FPWnfLDYBkbBJ5YS5YvcVECGqcirgn+HGdLp44
X8RPa7URGhYKXV1DBIT4YfUPqxARFwfNrRuQ3TKOqoRn+Mf/53+BnUsUxsUt0F69AteehcDnwUWh
7L3iUYiGRiDpKsO6JUtx61kg4uPCsd9oK7aYnWTGpwRbdPQQGeKJFRs2QsTyf8R69VtYkExNisF2
kx0Ij42G5vIfcOWJP64c3YNTt91wca8JLE/dw60TFtAytEJksB+W/7gGXv5+LBguYb19fkPdBFzO
WuJ//59PEZRehclRsbAdJtg/t3OW+G6tDqLjEnDn1F4sXmuIutZmPLjphNiEeGzf9D309l7AeZsd
2G3nhMTwFzDcdQgxIc+EcraygvJ7AFQ/BihFXmYmisqr5cMseIv60d3LFpqQoqOzmwXPcXR2dMh7
52PIz81CbZvi5DxQWZKNvJIG+dAUJiXIycpEXffLG/xG+juRnZ0nbFcZ48jLykJ9x6s3ASroqK1A
Jitf18DL+/+722uFcT1TxpUUZKG4UnZ5aqi/C919L29S5JABIJFmVmQA5hnTuQQwKh5EIAvYuro6
0NE2gYtPrNDbaypPx95d26Cta8F6eWWQintwdrcFrrkGItj1Bg5Y28P1yQOk55fhmettZNf0oKsq
E/Y37mJYIsbzW+dYD/YYNq1ZDGf/JMT734MuC7K79toKd76PsKDFy8ANgHR0FDE+j/DQiwXw8VHh
jIBksA1XLp5HQW0zXtw9Di3WW7zk4g+RaABXbPbhzEVn3H/0AOUtgxjrb8CJQweRWdWB0dFxVObF
wNxUC7qG+xBbWAUJy4unOTLYjstH97J11WUyxjmH+2gbkEDcUYXb9x6gIDcdV2/dQteQFCMDHbh+
3oqVWRuOLn6QTEyiPCsIJkaaMLa0RWVrNwoiPWG0bR9Kamtw7fReaGtp4Y5fHEb6mnD1ygVUtPQL
dVkZ9whf/rgBHSxODw3Kt4NIhOGBHtw5fwI6OrrYsdMGeeUNGJeK8OzeBejo6gn3Q5Q392GQle+I
jQnbPkZ4HpPDgmcOLt24ia7BUcFEvek9AAsBMgAk0syKDMA841cbAD7/AAugLLgpmGABmN/xPjzl
TvrREf5YoKznNSoZwej4hPACl9HRMQwPiVgAHxMC24D8bvXS9HBcueqMjKRwrF22TDhNPBV+DZyX
RWEA+G/+COCYVCJ/pI5pQCR8m3qIBUrFUwCT3Byw8vPT6OP8ujnLV3h2n83LEe6wf+1ufamY34Ev
e0yPP2v/6str+HP3A+jjdTA2iqGhYeFmQr7+3DAoZp0cZ+NYmcQSVsly+KN6w0I+k6wOhpXz8icG
BuTvKOCXWDqaK3HcUgcOLoGYmJwQyiFIyEOkXI6jfFpgSiH5Og0OvQzwY9IRDIqGhLrh25vXHxkA
MgAk0kyJDMA845cYAP7+dMXHYxTvUp9J8eDU3daIuJhoxMbGIiOvFCLWoH42H8tbYQDeRTnmgkRD
Q2itL0dcfBK6+oeElxapmu/XitcbGQCZAVBVPyQS6aVUxQNVIgMwz/glBoAH/9bWVuEd/Dx4zLT4
62W7unuE4CdivXf+Yp2uzg50qJiXl4GX5fXxH4p4XXT39GKI1UVPt+z1y6rmm454/fFX6y5UuAHg
9fou6pZE+lDE9w/++nBVMeF1kQGYZ7ytAeCnwnlvaXR0dM5obIxfSlA9jfR24kFwIcMvh6iqFxKJ
JBPvjHEj8DZnAsgAzDN+iQHo6emRHzYJgiCIhQD/YigZgA8UMgAEQRDEm+CXCckAfKCQASAIgiDe
BBmADxgyAARBEMSbIAPwAUMGgCAIgngTZAA+YMgAEARBEG+CDMAHzGwYgOaSNLgHxMuHWF5tNXC6
fhUXLlzA7dtPUN8pexsfp7M+H1ccL+DyDWfU9C3cZ9QJgiDmAmQAPmDevQGYhMNudfzTHxajpkf2
iuBsfyd8+vUaXLlyBRfPHcePP61BamUP+mpTsXb1ejjcuA2H80ex6Ke1yG14aQ4IgiCI2YUMwAfM
TBsA/mKZqS+X6a9Lw2G7y3jsdBan7gQI41J9nLHHzkX4zYl/Yg8921uoTPHBVyu2ob5L9l2/7LhA
JGdk4vFzH/CPDku6auHrH4LcrGQ8eXQPRw9ZISC+SJi3rToZhw9b4aLzc4hHX+avKA+JRCKR3qw3
QQbgA2YmDYBiXv76WgVe12xhc8UddflhWLlOH/wcQHbAXZgdvimbgTFQmQC1LbuF3173z0NDXRdb
1qvhupsfGyOGodoaJDVKkPrcHnvPuuCx4278aakWHjpdx/fLNFBYnIet/HO7d1xhqaeBsy4hQlpS
Kf+4juy99yQSiURSLX58f9N3QcgAfMDMlAHgDpI3kFcYH4Lx5u9Z4N+ELRpb8Iff/B7BRZ0oj34E
i2N35DMB1XGPsMnoEFoaa5Xf9G+vKofFppW46peDNO9ruOj0DBds9yKlpg9PrxzA9cBcYT49EwPc
vOYIwx3nhGFOe1e3/BdBEATx91C88lcVZAA+YGbSAHAnOZXcQGdsNbWVDwFpHo5Yb3wMmRFPsU5z
L3JycpAQE4w1i7/Hk9hSFITfwV+XbUJYag6KC3NhtnUDbvjnsNbZii2LPsMm4+NCOreOG+PsU35T
oQhr1TYhODICG5b+hLCEdNw8ZYWLj0KF+QiCIIi/DzcAU8/cToUMwAfMuzQAIU9vwjM6Tz7EGG6F
46WryExPhNFWTWhra8Nk+z64h6bKZxhD2LPb0NmmA21NQ9x6GiZ8v59zzPAnWN0OFn5H+jxAYGoZ
+yWB42UHNA0DRYlPoa2jCdN9J9Ew5akCgiAI4m9DBmCB8i4NwMwwidxYL+hqb0N5x8L9dj1BEMS7
ggzAAmXuG4Bx3L1oC9egdPkwQRAEMZOQAVigzH0DQBAEQbxLyAAsUMgAEARBLGzIACxQyAAQBEEs
bMgALFDIABAEQSxsyAAsUGbTAPDpRUVFKCgoeKOKi4vf2BAJgiCImYcMwAJlNg2Ai4sLNDQ0cOLE
iTdqy5Yt8PDwkC9BEARBvGvIACxQZtMA3Lp1CyEhsvf0vwlvb288fPhQPgSEut2Eicl2bN++HUaG
xvCOzpFPeXu6qrKx29RESMNs1x5EphcL48syI+AVpXgJkYzRgU44ntovzGt32RX9o/IJ06Q00Rcn
HV++/hiTUty7YANHV9kHkt6WjsocPPGKkA8B5UkRcPeMkw/9OrJj/bDTxJit8w4ExMg+rvRriQh4
guSSJvkQQRDzATIAC5TZNABOTk7w9fWVD6nm2bNncHV1lQ9NwkZfE6duuyMhIQFRwU+w/JvlKGj5
ZS8EyvK7i5VbdiI6Ohoh3k+x+rtv4RFTiMGeNjS2dcnnkmG7cxusrzxFWkoybLZrwMjWST5lOozi
yjFj/MdXS5BZ2y+M6SyMwprF2iipLYO93SV0vaXRKIt+Cm0zO/kQC7g37WBs6iAf+uWkB97DNz+s
h0dgFKLDfbF+0WI8iiqQT31bJnDz/AXkNg6ivaUenf3D8vEEQcwHyAAsUOa6ATix2xyeCWVC4xwR
NcJQfSMKG/vw5OENlHRIgb5qnL3phqryXJw8dgi7DQ1gYH4MXaKXETXD/wH2n1WkCZRE3oeWtQNK
cmIRkJiLktQg7LTYCfur17FvtyF2Hb+C4qpWjAz1orykFJEet/A8JE1Y1u/JfXiFxuDO9bOwstiF
Ler6yGsYYHtQD84e3I2t6mq4/iwU41O+rtldkYATF+8i3tcFJ669EMY57N6A3/z2M+zba4L/+d//
BaceR6O1tgCWZtthtHM3MqrbMdCYA5sDu2BhfQRNA+PCcpUJXjA98DLgx953wP5D9yHqacGRA7th
oKeFy4+CWM0BMd73YLx9O/Yec0TP8CSSglxgttMM524q6mIU1oYbEZDTJh8GuprKkFVWjwivu9ix
cweuPvJBaVYMTIy2w2T/YdR1DaOrsRhWZqbCWRLHe4ForEzAv/2v/wWdg9fh5/8cmTU96G4sxA4D
bahv0YJ/SiWk3ZU4wbbPnu3G0DW2RkvfiDxHgiDeN2QAFihz2wAAZ0w08NXiFdi4cSM+++QbOHmn
sLGT2GWqifgaFkTaMrFMdw9SE3zw8ddLkZCeC0uDjTj59OVp8cyAh9h94uXp957SeBgecESw1w2c
vOuLkAcnsJYFpdrGdjZ1GE6X7aCjqYE1auoITi5EW0EoNE0OYVQ6CENtXeSXFGPp91/CLSQJT69Y
wdDOCS8cD8PEmhmHgkzs3rcflV38w8cyPBytsNX8FEJ9nPD5kjXg30zM8b2N9et2o7w8HRrqRsip
KIf+j4ux49AZnDtihm9WaiMy+DF+XKeGrOIqSGXxHxXxnthhfVk2wEh4eBnHzj5D3NNL+PaHrXjq
4Q3P8DgUJwbgrx8tgr2DA/TXfwcLuztwst8FvYMOqGtSBPwe7FPfjjIVH088t08dJqfvoa4wCUs/
/gZHzzjA2mQjluvsZWYrA2fPnIIDS/uTr75BdEEx9hnoISijClftLPA0IgmHdTfjumc8cpODsHHt
NkRF+eLzb35ATEoObM00YOUcJM+JIIj3DRmABcrcPwNgAf/MeiH9GPdb2HfxvjDFcpc+cnhxhsqw
0cQGCdFe2HfuhjDtvoMtrJ0Dhd8cfgbAyv6xfAhI9XSA4QlnpIQ+xDnXAAQ/vohrPslsyggCfF7e
o9Cdx4LW6o3CB4nOHz2Ku3du4tRFVjZpC7bv3i3MUxHvDqOjZ2FrbIrQvF5h3MhwHwbE8jMQY/0w
3boahqxXb26xC99+/gWepTZgsCgShvr2bIZB7La0Q1dXDZb++WMctjuN03bHYWpuAx/3uzg09b4B
Rl2KD/S3n5APAeG3T2Pv0ScYlQzgxf1bOMOWPXLcCX73HfDFojWws7PDUeu9OH35Aa47HsGz+FL5
kpwJ2JpuhFtMhXwYqMyNR0JeJW5f2A//gm5IyyLwl99/CbvTdjh19BAsbewQ+PwRzHfvw6lTp/DX
v36PyMIqXDh0ELXs+PHwkg1c3F/ARM0Eik8yndijA4drV3HQ/pIw7O5kB4tLsjMhBEG8f8gALFDm
ugGwMtSHd1q9fLgfemqbUN49jDO7t8HU9iocrDXx++VGSI72gMGBk8Jcl46aY/cNP+E3JyfgHhYt
2yo8heB89TxWLlmJZNbtTWJG4IiTJ/zuncTx+6xHOimBjcEGbDayEcpwar8+ttvYC6fTiyJc8aff
fYa4ShbkRRXYsk1H1pMPdMamAw6IfnYVG9RN4XLvJtZu1UNVt1SetxM0zWSfMeZURN7FStaLLkoI
xJaNh9mYQWz5dilcfOJwkgXKE9dd4f7QEQeO3UJa5GMYHjwrW1DO2EAjtq1fhMPnb7D1uY2lP36J
8Nw6ZEV6w/7qAzx7dBVff7MZMdFRMNi6Hs99A3B6/w64eCfjlv0u3PCTXcpQUJrki0Xf/gTHmw9Y
2a9h2V9/QHR+Pa6fNMG9yBKWXwO2a67G7cfecD5/EBdve+DWMTPo7zuL4EAP/PHPf0FQQS1O66vD
7roP7Nm053F5uHpAB4bWZ+B86STUNK2RluCDbZY2Qp73zu+Hkf0T4TdBEO8fMgALlNk2AIGBL3vm
quCPAE69BJAUFYmqVh5qZaTFBSOvsQ+S1gqcPnoEd11c4RuVhpaGCkQmyT4YlJsai/j8GuE3p7+5
HBfsTsLW1hYnzpxHaVOfML6uJAOprPdaU5yOtCL5/GNiPLlzUZjX4e4TDEvlF/Pbslkgk/dqxd0I
iQgHD/GdtYXwjcnkYxH0/K6wXDwLiAqyY4IQn1MlH2KM9cHT0wslpSUID+GXM1gvni13+3E0xkf7
cOnMMdiedkB9nxgDLWWISJKlPRVRezkunjwi5BWWUiKMG+ptwg3H0zh69Bji86qFcXWF8cI8V1y8
IJkA8tKikV/z8nq/gqayTNgds4XtkRPIKGkRxmUmRaCwrkP43d9SjBMsnVNX76JfMomJoRZcOnsM
Zy9ehssTTzT0j6IiNRiOl10RnxiDitZBTI4O4KaDHWyPnkFVlwRj/fUIjU0S0ivOSkRUFv+cM0EQ
cwEyAAuU2TQA169fx+3bt9HY2PhGXb58Gffvy07zzxX6mgphprUWNzzi5WMIgiA+HMgALFBm0wBE
RUXB1NQUNjY2b9SOHTuQlCTrKc4VepuK4PbIC3TfOkEQHyJkABYos2kACIIgiLkHGYAFChkAgiCI
hQ0ZgAUKGQCCIIiFDRmABQoZAIIgiIUNGYAFChkAgiCIhQ0ZgAUKGQCCIIiFDRmABQoZAIIgiIXN
2NgYGYCFyEwaAD4Pb0gkEolEmj8Si8UQiRRf73gVMgAfMDNlADjcQfKzALwhkUgkEml+iAd3qVT2
/ZLXIQPwATOTBoAgCIL4sCAD8AFDBoAgCIJ4E2QAPmDIABAEQRBvggzABwwZAIIgCOJNkAH4gCED
QBAEQbwJMgAfMGQACIIgiDdBBuAD5p0aAGkHrExNkFDWJQwOtZXi2mUnqH7dxKt4XT+JA+fd5ENA
YYwnNqttwdatW7HDdD+CkgpkE8ZEeHL7DNTZeL3tpgjJKZeNJwiCIKYNGYAPmHdqAMT1+OK//7/x
lYYNxtmgqDoBW9X00SebisnJCfmvV5kUNcJ86xosWqOFso4RYZznFVts2+eA4uJiJMX6Y/niHxBZ
3IJUz0tYqr4XDc2NyE4JwNKlK5HX/PoLLSblf6f+kjE5oboMBEEQBBmAD5qZNAD8jVISiUR4rzRn
sqcMlub7sHe3MS4/TwL6S2CkvwtSTMDz9jGsWbsem/UtUNzUK8yvIM3vDpx8EpHoeQ2n7gQJ47xu
2uHE7UDhNyfpuSPMTj1EWZI/lq5Rh6t7MKob29DR0YrawiTsO3xWCPbFsS/gePsRPB46YpuhAdat
WoGrj6LYlEm4XbPCqnUboGlqg+p2mWkYHx8X1oG/FINEIpEWiibe0BkiA/ABM1MGgL8KuLe3V3gb
IH+tpDCuuxRG263Q3FwJHTUtJKUn4eD+Y6ynHoa1qzRRywK2u6MtNM3smCV4iZXOKuw4dhX3zu3H
599rCOP8b9vhyDVv4TenNPIJNA1PCr8rcqNgd/gQtqxdC3PrcxiUDmGn1mbktQ7g+iEjPI3Kh/0+
NZhd8ER9TgR+UjNAuO8TrFyjh7rmdjy8chbusflCWnxH4OswPDxMIpFIC0L8GM/fCKgKMgAfMDNp
AF7/GBA3ANt0zMDH5oa7YfXyH2Fhcx5hPq4wtb4tzCOuiITalu1QvISyrzYda1Yvx8kTx3Ds+Eks
+/prhOS3INrtIs7cj5DPBTgd2w6ra+5IDnFHet3LfM3WLcOd6Cqk+dzEsRNnsXePDQZHgXMHjRFU
wMo/Uo2tO81x+/wpmB++L1todBANbbL7FAiCIBYa/MwnfQxoAfJODUBXETZv1EOjRDZsveET/PNn
muhtr4Huyh9ge/wM1FevxJl7wbIZGLdsjXDk9svhTC9HqJufRJCrI776SQP29vY4bLUXP63XQ5No
FLlBTvji28U4fNYe544fx2Z1AxQ2DzNn0Yivf/NPsHSUnTU4aLYFT5IamcMowpLNmiguycGWFd/D
9uRZrFz2E55EFwrzEQRBLDToc8ALlHdpACDpR0pyBob5HYCMoY5ahEQkCr/7Wktw4/o1eMiHFaQn
RqGhW3YJQWCkF/FJKairLsP9u064du0anj4LQr/k5e18jWVZuMHGX3NyQ23ny2UtdNYiKL9d+F2Q
k4r6LmYMRvsRk5gkXHLoac7FdbZccJLs9D9BEMRChAzAAuWdGoD3xfggLlrrwHD/eeWlBYIgCEI1
ZAAWKB+kAZgQIzosBC39sqcRCIIgiDdDBmCB8kEaAIIgCOKtIQOwQCEDQBAEsbAhA7BAIQNAEASx
sCEDsEBZCAaAl42/nGiu6U1v3iIIgphNyAAsUBaCAeANmJdfVRB+X+J1+qYdjiAIYjYhA7BAmQ0D
oGhAfPnu7u5ZFc+zra1NeL//XILvcLxcqso8m3pf22UmpCj3fF6H6YivM193VdMWsni9dHV1zel2
wY+XcwkyAAuU2TAAfHxHR4cyndkUz5PnzXvdrzM5KkJpWbV8aHbh3xx4X3WiEP92Q2tr63stw3TE
y80PptxIzdd1mI74OitMpKrpC1W8XnjAmovtgpenvb1dePXuXIIMwAJlNgwA/8gEd+S8AfWxtKSj
rPGz+QUXPDkO0aBsvKp8f614eYfEEoyNSt5oALL8b+G//ePvkFY/IB/zbhgb7EBSaoF8SAY3AIqd
qq9/ABOsKsakYuVBQhD7PSgaZuswyoZl4/l0iXQUI8NDr877K8SX5wcjoQzs94iUH5QmMcDy4sPD
I7LXKIkG2bxTl2XTRENiSMTDGGZ1LJW8LDf/OySWfcJZ0csZEU+/rKrEy83bJN++inUYGp6a9yTE
Q6Lp5c2W5esqHZFdtuFt/GfzTBHflqPjE7wAQhkmJ8b+7r71a8XXma87rwM+zPOWjr3ctybGZe1m
ZMbaC993x+R1KtvWr7QRXlfy+h8WDb6WH2/LQ5CwehSxIDEqGRG2Ff873XK9Ll4v3BQp2gUfN7Vs
Q/x4w8rfz6Yptif/OzAljf5BEWvXErbth17Z/96kny3/BvHy8P2eDAAxJ5hNA9DPDlDjE+PIivHG
diM9aGlq4ZzTE/QMsYMB2yl5PryRvdyR2G8+/FrDk417fZ6p0wYwIhlFTqwPnJ75CQeeEXbgeRUx
zh49CLsTh2Blf1c+DuhvL8XzZ8+QW9UqDI8NNcPD/Rnic8qFYYwPIND3OQJiU4TB3pYqlNY0Cr+r
yovR3S9CQ205cjPi8MInACMsFqR4XMDHX/yEvFrZa4k5Lw2ACOPSfpy12gVn3yRMjPGDjWxdhsRS
NBWn4NLte+gRSVn9DjCTMALvR7fgn5CPUWYYptbNq/Xysi7eNMy3qcIAjI5K4XPPHtvMj6BraJQN
jyEv2h0amvooauxlAUSkXF7M6jY/MQAPvMKQEeOLB94RwvI8WIqlY+huKMJha0toaWlh1+ETKKpv
ZwFU9sWxqfkL6cl/84Px1PHK6XJNnTZ1+lQDwA/w3Y1lOHHYApqamth34hwq2/sxwgKWcll5Oq+n
xdvR1PGKv3xdi1OCcdPNE8Ps99TpMr1MUzByE6OI9XeD/jYdaOro4voTP4gkUojkeU1Ne2o6r6b5
ctyr4xVpvJz+0gAMMGM4guSQZ9DXU8dWbV3c8Ytm+9sEay83hfbC287LtF5P/+dpv5zGxH6PjYjw
+P5VRGZVYHRkSAgayQEPsXXbTtR0yoYbCmKhqa6O+IIGNs+wMh0RM4p1hQm45eaBwoxo3HMPRlZ8
IO55hApt7Y3tlv+eMv6VeeS/lcPy6fzv6waAb7u63CgYbt+H2m5mXJlBmbrs1N/coHTXF+H6nQco
LcjEVef77Bg1yo6RL8ukatmp415PUzHM/5IBIOYMs2kAJKMTKIh9jq++XozHfiFITU7CLu0NMLG9
Ibyyd4LtFLynPsb+Dg8NCgf0SWYYeAMcG2MBhh2kRtm0ETaP8JcFJdGwBONjY0LjHWW9HwmbNsKC
ECf4/glo7T8jDL9uAFrzwmBhe0l4bbCehi4aWOegvy4N65cvwq69+7F4+UaEJSbBUmcVjHftw8pl
K/AoKBrn92hjm4k5tDatwinnEIQ/Og7jY1eFNK3NtRCWUYa9Wt/hR/XtMGLz7DvrirDHZ/Cnj75C
WPbLyw0KAyBmddKQF4UfP/tPrDOyQo+E1RfbFhL5OtSn+2GttiG6eOdlUvbUwJkDujjjJvsyIu+d
iFhvha/71HoRs6AjZb2rEdZDE3pbrFfOz4aI2d9xFqwVvXyFAWC1D/vdG/EP/7d/RFxJm5C2477N
+If/678gtkT2pURZ3Y4K26KtsRbNnb14ftUK24/fFKYPisQY7qqCxsol2HfuBlJTUnHfwRZLVuug
qmuIFX+SBSEWDJkhG2OBiW9rbgj5wZifSRB6jWwb8+3NyzQ2PimsA+918h6scp3YX75OvF0qDQCr
A/5Vxz3bNsL81B0UFxXC3sYQ6/WtIGJVyduRsm3x/EZ4u5GytCSsTBLWGxVDLPSSmWFg+fO2LB2b
YAfqMXS21KOmqQP5MV6wPnkL/P2SvCfL648vL5zBYsvxnn+cx3V8+d1K+IZHISU+Fnrrl+PgpecQ
zkewdRbWg20TnrdYXoZBVnZ+j4ribAPvYfO2PyGUmW0v1r75PjTKyiLUGdvWsgD20gCIpeOozQrA
14tWIjQ5G1mpkVix+Gt4xxfB4ZA+rnglC9uIbzvBdLKyioeHhTMGYtZeeG9c2I9YuhJW3/ysjvCX
refA4JCwndjOAmuzLbgdkMl+yu6pcb+ynx3s/y88iy0Shj2vWfGDPx5HFwvDUlaXfH3HWNpdbY2o
belEvPsl6B9yRKDreeywcxbm4wGR16NkdFzYxjxvbnB7+VkHtn14PYyIh9kwbxdTjxMioU1KeHlZ
kB9lf3m7eN0A8LI/tLfCb3/3Z9zyjmfDk2gpSYDlgXMYHu3H8f1WSC5r4QcyoSyDvR2orGtGcdwL
bNAzwxDbgHw837eGWVkUbZWXd6SzAgf2HERxSz8m2Ty8bfIy8b98e/I6V25Hto5kAIg5w+wZALbs
5AgOG2zCZQ/ZwUhgYgiFBSUs4A3j2Z0z0Nmmh52HT6OpdwgBro4wNDHChrWrcPamN9tpxuD/+DJ0
dPVgut8WNR0DCHI9By0NbVy+9hjPXW9AX2cbS8MUsflNSPS6gu1HHIVe3OsG4NF5C/zHX77F1q2a
+MP//mfcjyxF2O3j2G33TJg+2NWM59eZgTA+IwxPDvcg1vcutmgdEIYhroaBjiluXDmGAxdkBzE7
GxOEpxXCykIbqfwEQkMiVhjsQXt1LnbstRfmUaAwADzw3rE/BM/oDFw8aIqnMfzAOYnsyGfQXL8J
m9aswlqjA2wdRLh22BTqm7Xx7dd/xeOwdLhdsYKOhh6e+sUj3M9ZWS8V7X0oTgqAkaEm1DZvYcYl
Gc2V2bAw24atahthf/sZhthBmZ/WfGkARuF4fC+++nE5Lj8OZZulERb6GlixZi2SipsR4HIF+qxX
qa1rgrC0KpSmBeKOeygCHp7FHvt7QpmZl0HEgzPYuuMEG2ZrJrsCgKrSEnR3tuLsQUNs0zRCQHQ6
ntw6ijVr10HX8iia2ba+f+kQvBNLMMYMhN15B5SWFGGfuR62aahDTU0HeXVdKEz0g6EBXyd1uPrH
sYOW9FUDMCbCUbaM7q4jSMoqREdbM/ILCllwG8Tj26eEtmVx9Cwa+6Vor0iGsf4GrF63CU9CMhD0
5DKcPCLYwXoAly6eQXpeAY7v1YGR3j7cueOER16+OMcM0n//l49x5NRJ1pP1F9bt8TU7PPSNFwLc
+Eg3dmxehacJVcI0Dm835VUNKErxh/bWLdhvdRm5Bckw27YZa9atx00WjLpqMnH4+HH0saAXx9rY
fZ9oJPg/YOXdhi2rV8H2/D3W6+zF7Qs20NXRgoHZfpQ29ghmQmEAhiVjaMyLwZIly3HV1Q8VtY1o
qClFY2sHbpwwxYpNrB43rMU5Jz8MDXTg8nFr6Orrsf3rAMqaexD0yJ713LVw2ckbGan+MDTUgZ7Z
TsQU1GFsqA2nd2+DxmYt/PXrr/E8roTVtex0+vNbp/Hl90tx7IoLGxrGEUtjLFn6g2A8UoMew0hb
BzqaBngclIHW8lRcuf8cSQH3YXHqBuJ9nLF4xWoYbN0Is32n0S+dRGb4I6htXIm1GjqILqxDVrAL
rM/dQ0djASwsrNDYI4Ln/bPCtjRnx4nGnkFkhPOzHlrYorYVz8PShHYx1QAMDjGz2JiHvVbHkZ8Z
jW3b94Lbl6cXzfCP//SvsDlmg//zT/8E41O3cf/qEeiy8t687owbro9RmB6FVSuWwGCbNjQ0DFHR
0gO360fhHpOPsb46OFy5Cg/Xy/inf/zvOHQnAFX50di+XQe6JiYIySpHT1MprC0N2bbfBFv72+gd
Zm22iwwAMUeYNQPQ3YuJsQ7sWLMZwVn1zCmPIdr7LvQNjXDkmhuS2cHioz9/htP2F7F60V9gceIe
Lh/Vx+odZ5CfEITvl29CeIgfvvzzX3D8zEVo/PRXaO+5jMtHNLHJ7DBa21rx7L4jjpy2h8H6Rdh6
wBGJAfdgevTSzwzAWF81tNTVWGCrRXV1NTKD72HjNkv4uV6Fmt4hDLJG7PX4Ppyv2WP9ekN0Dgwj
3v8Z7t27DvV1Wqht70d1oifUdffD0/UCtlmex0BXCzat/h6RGcU4uEsX6awzMVAUhJXG+1FfGI+N
GrsxzHqUCrgB6Orpx1hvLdYt/gaOrt44ZLgRauYXMCZpx5bly5gZyEbww1PYssMGviwAb9K1RGl5
IQw3/whXFtR3qX+Ow7c8UBLvjU/+/Im8Xr6G9t5zOLVDAys3m+CZpyuisgrgdmoXPvtmPZ56PsHj
wDD0s9766wbg7MFd2Gl1iNXhZaTH+mEf+73TcCui8xsQ8PgKG38OxpsWQ233OST534XJsasIeeyg
NAA83j88sReHTj/mq4imklSY6unBzNwaeaxHvuXH/8A1rzjEPLuKlat1UFhchmM7dGBz7j4OW6zH
VR/Ws+woxGYdPaSnxuPbLz9BWFIeHpyygNnhCzhixIKmxk489XCBX1yacGBSGgDWfgeHJJiQ9MHl
xjmY6G/DupWr4RqcjNwwN/zxz1/gDGtbK77+GBbHr+GwsQYOXnVHTqw/Dp5yxIn9Oth/6RErtQiG
29QREhOH5V//Gx5H5iPu+SUYHDqPBB9mAI2OojQ7BBvUt6O3vxNa61cjoqCFbTMpRvoqofuTGjLq
BzDBDqg+DxxgYLQd5139EetxCZ/88BPK6xphuXUtC5jPUciC0cplm/D8+QOs27wRfSx3r+vWsLn2
DE8u7sJqnX0oy8+GBjNhzvfv47s//JkF8Ae4+8QVJfUdQm9UYQD4/slDSm1hAmz27of6quXYygxq
ZdsALh/SxQYLe+TFB+LrH1Yhr6oOzpdP4KT9Baz6+o849SAEt201sHnXCcEoLvvsI5gdtMNeg/VY
tNYYzg7HoLPzGMpL86DO2rhbZKHSALg5HoGBpTUOHjmJnPRYHLA6iN0mW/E0Ko/t0644dNIO+ww3
4we1HchLCoSWxWEkBj2Chd0NRLtfx08btqEovwCmautw8fZ96K5dDY+obEQ8uYqlqw3QynriB022
4Itvf2A99zhUxLvjT3+SHSfWLPoUO1kbtNZazfbbfXji/hBBSdmQsHYx1QDwc2lRbvb4YbU2/H1f
4JuP/gK/nDY0Zfpg1QZDlNcUQXvDJoRmlMJC/QvscXBDc0EM1AxMkZkSjaVLfkBCRj6u2xhizwkn
HNuzGRdfJAK95VDT1ERaViozR9pIzGHb6vsv2PHgCGwttPDZkq14eO00/vLREri6P8VDb1909Q+j
mwwAMVeYvTMA3ezXGC7s1Yb1NS9h/EBPOyJfXMfnKzfD+dJpfPbValy4cB4H95jjwo0nuHhqD+6E
5LFo2QR1A33cvnoBn3+yBOfYPLZWljhx8T7OHzXG+SfRwFAL9hjrwua0A46asV7HgYusN3VHpQEo
jHqGfcevy4c4ElhbmCC+oFIwHSvZAXeTkRWauvvw5Op+/LR6DVZtNkB+bTuinl7EylUr8NPa9fDP
qMYo6wXorFyKzdrbsJr1oHLK6+B4mgW8tkmIKuOw3fYchvtasWXRD7jgIjttz+EGYGhkDBlBd/Dt
4uU4sH8f9u8xw5eL1iMpJYr1xkyFXoqoIh5m1ofgcNQadndly18/uQt3vCJx0GwjQot6UBR0G3/6
aLGyXqyO30BTcx3uXj8PG+vtOGh3Gy1dbcwgXcex43uwc98pNHSJWE9w4BUDcGovq8uHXrh2xhqa
OgZ45h+KfUZqCE/JxbHdhrA+dQEnLPSx1fIMM1cPYXnWCcGPLioNgGRsEum+t7BayxxCbY8OoTgz
HssWfQZnz1DsNtqAvI5J+F45iD1nZWdayiIewMiEBT3W23aNqWSdyBpoGxojJT4SBrv2C/O0ZftB
TWMHapvqceeqPawOGOPw2TvoY9u1r1dmAPh9Hv0ddXBze8xCuIyhsjj8uGwTzp88iC+/Wy+0LZs9
Fjhrb88CmQayW3loAHq6O3DeWgvH7wYIw+bbtRESxXqK2htRw46JOQE3YXr8KvKiPWFiLbvcc8TS
DOfOnoX5gdMYZr5ucGBQeKrEigVNITgwutub4eV0Ep9vMEaIx03oH7BjY4egyUxwTpssABw30cKZ
8+ehY2QoDIfcO4qjN56zdncIjvIzZRd3acHBLRx5icGwO3cK2wwNERhfjFGp7AZXvl+KJRLkxAXC
LzZHWIbjbGMA48O3cPPCPuV+tEFbEyHhkTDV18Zphxss8K7AcScf3DltggsvkiCtT8Inv/sIR86c
x6mjB7Hf5hh2GxvByS9bSPOUlSHuhWQpDYDLBSvsc3gIl+t20NiqjbvP/WFnqYknIcm4wdqaxeET
cLTdi1VaO5HFjLyx1SlmANyEMwAhT67g4PUXQjoelw5DT1cXukaHhE91Y7wF6j8tRxXLJuLmfvzf
/x//G41sh4h9aIc/f7lKvi3NceyiC5rqK3DT8Sz27dHHCUc3DEpH0dsjNwDCmaFB2JhsYscQc+zd
tx9aa36Aka0z+uszoGNsyzIbgdk2I5S3D+CQ6To8T67HeHMmdEx2IzUmCAZ7DvESoTruMbabWOHg
fj3cDSti6TZBa5sOSipLscNkPyqq8vDDf37E9r+zOHPSlnVuLFFU2wL/Z/dw8rQNjHZaCWdu+lmb
JQNAzAlm8x4AfiNOW2UaVv+4CNZ253Dn7j0c0NuE33yzTujxaaxfj7tuT2FhoA2XoCTh2qX9M3Yw
7a/AYhaEIxMSobd5PW48eAzrHXq47h6FSwe34JBzIEaac/Dd5x/h5qPnOGS0EWvNTiHa4zozAmd/
dg/AKAu+8rPTSvjd2ix+CfCe8VQGB2S9KwXioX6IFTNzJqUQye+G5m/349duhany64kCY1LhOrcC
fl1bIurEji2r8DBSdr2Uc85CHZanr8PWVJP1wi7CfOsafLXFQrhx8sfFa+B48TL+8Jt/xX3/BFjq
LoFbbAUG6rOhvnaNvF704ejmhRd3ruDi1fs4c8gEP23cAfdnrjh59jqcrxzBXz5fgcLmQYhFg1MM
wBgOsZ7WicdxiH98HP/tX79EC+t96a1fAu/gcKz57lNcdX2Ko6ZbsNLoCOJ8nGB89Cr87tvBRH4P
QD+/tizpxeEdGthgsBNOTs64bHcEv/ntv8HVPwIGat8jqrQfDdlBWL5oERwuXcOapUtx2zsBbuf3
YJW6OexYgPn9ojWsV5iBH775HCcu3WDbfDVO3HqMp06X4Xj9IQtCBli0aju6pRPCwVRhAMZGenHI
cC1+2LoDt52ccMLSFPp7ziAvMxab163H/UdPYcYCn2tYCu6f2onV2jtxznYPNHYehcdDRyxZqgHH
c4fx2//8DNHx8diw5nsUdgHpXpegbWWPskQ/fMR6c6nFzcgLf4h//K//BNfwXLbR+eUU1iZYO6vM
DMaS7xfhxAUH3HO+A5ONP+IvG3Yi+Kkj1hvsEurpKutJbtDaAYfTh1iv1AAFxTnY+MN3rEd+Ccu+
+h0OMIPse/MQvl6jg6uO5/DjWg0EhIfjxMEjeMZ6/z9++RnsXSJZ+xpXGoCR0XFUpfnj6y8+xz5m
gp1v3WBtYi2ehmbi4iE9nH8u24+WbdgIlwe38f2i7/DMwwNaK/4Kq6seuG6rBZubPpgY6YCF1mYc
ueSMS8f2YL/DA2aknfHj0s24dP4i/vV//yvcoljwk98D4HzKHPp2j1Cd/Bj/5f/zLyhq7cMBnWW4
7xUCvdVf4+iVe7hyxBxfrtFDZqwvNM0PIdb3HgwPOyLqmSN+8+liXLl+BUuXr0ZgYhoOaK+GxcHT
rB1rQ2v3eeQmemOzmiEeXDmPDTqWyM+Kh/q6dbLjhKEubrsHwIV1DK7efoTDFppYutkSg2yX65Mb
gJHRCZTEPcfydduY9ZIx1sYC9ffLEBETge8/+pqZpkQYr16Ko8xMGGv/iPsRpcwIpbD8jJCVHIk/
/eF3OHX5BrauXY7L7Jjz/LI1lm/awfYtU/z2ix8FY7rp66/hcN8TRywMsPf0Vdy2t8XOow6ICvbA
4aMX4XLvAj7+eBHiituY8e4lA0DMDWbTAPB0+KNmnQ2FuOJwGra2R/AiIBSh4THoHRpDaXYEbA8f
xo2H/hCxHk1KdBBSi2oh7m+Du5cXWvulqCtJxDHbw3C87Y5+1jDTov0Qm1nM0pUgI8oHR2xtccP1
AYLjM1BdnImQuFThZh1+09Bcgt/53MV66Z7sIFzfOSg8BcEfW6wtTIVXSBw6Gspw5vgx3HC6B9+w
GIwyAxHp+QBHT9rD9fFjFJbXIjrEC3kVTcKNXFVFCcp66WV1V1ucinOnbXHCzgGl9Z3obi7D1Uun
cOToSSTnlAuGiG9ThQEQi4cQHxGI+LxqdNUXwds3EuKRQQR6P0cN6xnlJwTgKKvb6y4PEBSbhpqS
HIQnZqI0NxkRSVlC/XLjNDgkxuhwNzweO7Hta4trLs8RFh6FwpJyhAZ6oLyhC2PjY8hJDsBhtq3v
eYdiZJwF8pZqOJ49jqt3XeEXkYDKnBis3bQGZ8844ModT4jGRlFdmIQzdrY4eeYSSmpbIWFl5m1S
6OmxdeCPTEoHu+D+6I6Qt8ONR2jpGWJtcwIF6SFC27rlFogBfnObqB1ud+xhy+qzsKYDY8M9uH/1
HOyv34GHfxCqqqvh7+uB5l4x6kvSERSTjKG+TjixnmdwahWkrZlYvnINyrtGmZGSHRiFGwHZtmgs
T8f5Mydgy+raJyQCUfHpKMlPhX9YlHAzpniwAy7OF3D4hB0yKhoFw5gZ4Y0jJ07D7YU7csvq4eqw
F+rbLXHe7jwisiohlYgQ4HFX2Gdcnwehn9Uzv6FMYQD4Y5r88dCG0gyW90lWt8fgG53F6noCSVGB
yv3Iw9sHzd29CHe/x8p3As6PXZGcW4bMhGDEZRYJT890NpXA4Zwtjp9zQnVHPybGhuHndgvH7S7C
7elTFFa1CDcO8m2ekxyF4IRcDHXXw8sjAANsn4wKcEdBTRtqCxJw4ogtLt+7C8/QGDRUlyI4Kh7V
pbkIS0hHbWkOnG5dZdvlGDwjMwWT3dlYjItnbXHqyi20i0aQEOSBoKRCNkWCpw/uoqSpF5V5US+P
E2y/L8uJxakTtjhz/hoqGvmlkSHlJQAxK09hWiz8I5PYusluHJWMiBDq74HMoir43rkh3EOTFR2A
q1cfwD/YB/lVrRB11sE/JByNDbV4+vA2Th47jhsuLL+xMQy21eKK/QlcvuMCz4AQdA0MI/rFQ9y4
78e2QwtuXDrG2tVVlLX2YqCrHs437XHkyDG2n+QKN3vyYEoGgJgTzKYB4A2Ip6N4VpszwW+eYgd3
fle6WCI7Jcvv2OWP+PA7gSViEdupBoU7qPnd8YrnjvnNc4PCPOPCI2Y8XX7XtgDrfsvu7OZ33spe
uDPXDIBwE2CX7I1giueS+Trw9eN36fNHkRTwRwP59Cm3EAgH4FE2Qjwke95aPMLvTefI6kXxzDOH
Xyvmd3Ir4HdK82W4FAZAqD9elyyo8iA+MTGGfpbn+ISsfLyHKcDqdnxUVrf8sTJ+VoP/5csLbYX9
5add2eaSzz8h3P3M7zjnwWiIBUu+LhLhnQMMlg/f9jx4y5CdWWkpjIbp/sOQjWVti6U9NPzyDAo/
yPP8phoAZd7KkzOs7EJ+/Fl4edtivWaeXz+rD8VsvH76B162Xf7EAD8Y8jvlB9m8wpMmbJ0V84z0
N+O0tRHO3vbAOFu/V/cT1kannOnh686fvuDjeDvnZeFlVOQtFcvarkS+cXl74DxwPIhrngnC7zH5
ne3MW8hg6yDsr2ydFQZAmffIlLx5mXnabNsp9iN+hkrE9lPlCSz2l+8/vH4U+9HUtqO4231cOT9/
t4KszQn1ygwDf3+FUJ+sLgbYuFE2M59nWNkmZW1YNMTfaSFl21Gs3D8VTIzJn4KYMk7W7lj98fbF
ysC36zDbnvySngzZcWJYrDgmyPYLXhcKA8B/K5744OUV6omJt0X+1AevdV5PvI54ZYwr9il+Nott
O/7EimLVFfkNTGmr/MklPm6UzzTJzAGbXwFPh58VU8DbAZ+XDAAxZ5htA6Aq7XcpnidvvHPSALzl
TvWuxLcpf1va+yzDG9XXqzxr9CbxcvM2qTAxquaZaQ0wE9DT2YryimoW9Ib/7n7zaySsFwtg3T2s
B/k30ufz8XVXGACSTLxeuAGYzXbxtuLl4fv9XPsQGBmABcq7NAB8HG80/EDOd0b+lzek2RTPkwe5
ufgtgPdVJ1PF6+Z9l0GV+E2jvL11qZimEC837+XN9jrwsvH9obv73eXZzdadmwBV0xRStG1eB6qm
L1S9r3bxNuLl4fs9P6byY+P7EG+7r3eIyAAsUN6lAeCnufiy3O3y6e9TcxFV5SSRSB+++DGRHx/f
h3gg52dIpkIGYIHyrg3Amy4LEARBELMPD/SvH8vJACxQyAAQBEEsHMgAEErIABAEQSwcyAAQSsgA
EARBLBzIABBKyAAQBEEsHMgAEErIABAEQSwcyAAQSsgAEARBLBzIABBKyAAQBEEsHMgAEErIABAE
QSwcyAAQSsgAEARBLBzIABBK5pIBmJB/omxiRIyxqV9UGx7CuPIrgG/LJEZ7OjFUUwNRVTWkoteX
n4S0uxPjiq/S/Q0mJcOQdL953acyOSbFGNsJJsdGMTY05Yt+0pFXhgmCIN4HZAAIJXPBAEyI+9Hu
64miq3cw2NKF7vAXKL7jJ58KNN46j/LHUfKht6UPWbrqSDUyRaaJCZL1tqOzpEk+TUaz3zP0t6lu
9FMZbSpGnX+wfOhvM1wQiYIbDyFtKUbMomXorh8QxveGPUP+6XvCb4IgiPcFGQBCyVwwAJMj3cjf
rYvgr1agvbARPRFPUXDNQz4VqHM8gZL74cJvUWk+ujPzMSZ8gJuZB1E3ulJSMNwta7zSvm4M1VVD
VJKKHCs7KPr9vWH3kXnGCeNiEUZamzFYWQlJbz8mWMMfHejFSHM9enKKlN/+nhjoYOmmQirmn+0c
g5R/S32EnwnoQH9eNgYbO2UzjkvQn5OB7qxC4dvi4oIw5F5wgqSpBPGLv0fmyRtCmr1BLsg+dFNY
RNJch67kFAw19wrDo309GGlpRG9eiTAsKs2DqOXlxzr68zLRW1It/J5kZklUXa8sJ0EQxC+BDACh
ZG5cAhhHb0462uLiMTIgRXfIIxTe8JJPA+qvnEaFZyK6Qp8hzXQ38vbvRvmLMEhaalFosx95hw4i
e78t+uraUXluFxK27UCdjwdybU6iu7IJ4uYm1Fw+iCLXEPTFP0fs+o0od3JGvt0x9FY1oHCvNlJM
DyBNcwtKHkdA2lqKLGM9ZOwwReqeY+hKCmfluQ9RYTxiflqKnANWSFLXREduNVo9nZnRsEXeXgsU
3vHCcGkS8i7dgbgyG0WO91B55ThqovIhSvZDnt1DSFrLkW+9D/mHDiPd1AK9dV2oPm+JRL2dyDDY
hrTde5FvtROJ+qYY6u5F471LyLE5jNz9+1DtFYWxzirUuvkIZoMgCOKXQgaAUDIXbwLs8LmPotsB
8iGg8foFVHokoSvkCdK270bNE0/0ljeg+eFFRC1VQ4m9PVLVVrJlnqLM4ShaSnjPegTp6uuRor8d
6cbGyDt9BRLxJDp9bqCABWpOsZ01ukqqkG+zEz2tE5hsSUfm4TOodDyDUrcYYZ6B4lx0Rfug4Opd
9KeHsB79FWF8b4gzss/cYL3/RBSdOolCazPEGVijNztOmFdcmYVcu7sYF7UijwXwWtcHKDzngvHB
DlTfckDhieNIWLMcNaEZLL+DaMrtwHhtIlK2HxDSr7x4BjXunkhavhJ5J86g0MoMsVsMIP6lt0IQ
BEFMgQwAoWQuGoCBeC+kmR+V93LHkW+hj7qoYkg62tFXUIjmR1eQYnwYNXcdkWpui96CAtQwk9AQ
kogyx6NoK+8DxpqRvfcIptxLKNDmfhXFbkHC76KTVugsqkDhKWtWTrZIVSKyjl9E1dVzKHIOFObp
SopFR4SXzABkhCL79FVhfIfHTeSdtUfOrt1oiMtEZ7ALEvSt0Z0eifzLzhBXZCLb9pIwb1+8NyK/
/AKFN33QEeSC9P1n0ZuTg5ztuqj0SUDl9eNorxyAtDweuScuC8tUXLBHrbsH0jS3oiU5E12R3sxA
3MAodf0JgpgGZAAIJXPRAEA6iPIze5CiZ4z0bbrItnPE+Bjrvfs9RLrpDhZ0d7LevgckXW0oOmSG
DDMmcyv01bSh8uoJtAsGgPW8D52G+LUb7zv8nFH6NET4XXr+GLpLq1FifxSD/WyR6hRkHbsCSXs1
8iyMkLpNB+kH7dGbGYvi264QFcQjbu1KZFqYIcVgN/pqW1BzxRbpZruQf2AnknaeRF9OPIpuPYS4
Ogd5dreEfFjtoGiHGrIvPMdQWRrS9XWQe+gYEtXUUBuegRrns8wA9ENamYT809eFJSovnkVbfhPa
vG8gzcQUGSYmqPaJxVh7BaruvqBLAARB/CrIABBK5qQBkDNUXYnBqnr5kAxxY82r4yYkGCgrw+iI
LCSODQ5gYoz/nsDowCArlzBaCb+RT/GI4ZhokM07Jvyd5IuMS4Wb/QRGh1m65RgXkh3H6NAw68m7
I+fCDQzVVEM6NCrMxlKBqLIcI129LN0RTEglGGPz8scARwdf7lCTYxJIB2TDo92tGKytF9Icl0gx
PiwSyswfIRwVyebhZeKmhyOur8ZQS5fwmz+SKG6T34BIEATxCyEDQCiZywZgrjGYFoDie8/lQwRB
EPMPMgCEEjIAv4CJcUyydSIIgpivkAEglJABIAiCWDiQASCUkAEgCIJYOJABIJSQASAIglg4kAEg
lJABIAiCWDiQASCUkAEgiHcPP7g2NDSgqamJRJq2GhsbhaD8ayADQCiZKwagubkVNbX1qG9oIpHe
uyqratHb2y9vndOHH7BzcnJQXl6OsrIyEmlaKikpQUFBgbx1/TLIABBK5ooBqKmpFxrh+PgEifTe
1dPTJ5jSmaK5uVkI/oreG4k0HdXX1wtG4NdABoBQMlcMQH19EyYm6AW3xNxgYGAQra3t8qHpww0A
P2Dzgze/FEAiTUd1dXVkAIjpQwaAIH4OGQDS+xRvJ7zNTB3HhxXthwwAMSOQASCIn0MGgPS+xNtI
dXU1CgsL0d7eLpzub2trQ1FREWpqaoTpZACIGYEMAEH8HDIApPclfp8ID/pXr15FdHQ0C6rDiI+P
x5UrV4TxZACIGYMMAEH8HDIApPeplpYWVFZW4vLly3BxccGlS5eE9sPH8+lkAIgZgQwAQfwcMgCk
9y1+2r+iogI3b95EaWmp8nIAn0YGgJgRyAAQxM8hA0CaC+KXA7q6uoT2owj+XGQAiBmBDABB/Bwy
AKS5LDIAxIwwlwwAT4Mg5gKDg6IZNwD0IiDSTImfDSADQEybuWIAqqvrIBaPQCKVkkjvXZ2d3Sxo
z9ybAPlBOz8/H1VVVcLNXSTSdMTNJH9M8NdABoBQMlcMQFtbB+rqGtHQ2EwivXfxV1PzywAzBd+H
+A1d/DluEmm64kaSn1X6NZABIJTMFQNAEARBvHvIABBKyAAQBEEsHMgAEErIABAEQSwcyAAQSsgA
EARBLBzIABBKyAAQBEEsHMgAEErIABAEQSwcyAAQSsgAEARBLBzIABBKyAAQBEEsHMgAEErIABAE
QSwcyAAQSsgAEARBLBzIABBKyAAQBEEsHMgAEErIABAEQSwcyAAQSsgAEARBLBzIABBKyAAQBEEs
HMgAEErIABAEQSwcyAAQSsgAEARBLBzIABBKyAAQBEEsHMgAEErIABAEQSwcyAAQSsgAELMNbysL
gYWynsT8ggwAoYQMADFb8LaQn5+P0tJSlJSUfPDi68nXd3h4WF4DBPH+IQNAKCEDQMwW3d3dKCws
RGNjI+rr6z948fUsKCgQ9h2CmCuQASCUkAEgZgvefoqLi9HU1ISGhoYPXnw9i4qKhP2HIOYKZAAI
JXPGAIwO4Ka9LdTU1aGlq4+wxBL5hF/B5AQkEql84C0YF8Hp4nEhb02dbQiKK5JPeDN+T+/ALSJX
PkS8DWQACOL9QwaAUDI3DMA4rhwyxBbTkyitqEBuYhBW/LASiVXdssmT42yOv8/4+ITwd6A6Dbv2
2WFQPswZnfKbo5gXmMCt46bYaHgExSzv/JQwrPx+OWLK2uXTf5732Ng4Lh3fjQN3QuVjJsFGyZkU
1ptu//o5H5oB4Kf5W1tb0dLSojztP3WYDAAxFyEDQCiZCwZgtLsMuupa6JQPczra2MG0T4yc6OfY
uH4tVq7ZCL+EUtTnhePCvefCPK5ODngRm4Nnziehp7cda1Yth0tgGsJcbPE//vm3cPYMhMPpfdhm
tB1bN25GSHqNsNyFk0cRXdwm/B7vr4aexlY0szpQ0NnegJbeYeTHe2ITy3vVmvV4GpbPpohx4aAJ
Nmzcgq/++iWuBeehsTQdO7YbwdDAEC8i85hX6cK1k1fRMSJLi3jJh2YAeLAPDw9HTk4OOjo6hINk
YmIikpKShGlkAIi5CBkAQslcMACDtanYoWUFiXxYiagWmxYvR3xZsxD41bdsh8cLZ1jaXRUmnz1s
jiueMTiySw3H7kWhpSQCizV2oKwoBQbbD7Eyt0Ft40+ILm1CccRDGNtchaijGFo6pugbFZKAuCkL
Zpp78LP7tMVN2LJkOSKLm9BYHAutrfq4Zn8WO3Y7CDezHTDShMNTf+xZtxw65rawP7kPv//TZ8hr
GYJoQIQJOgXwMz5EA5CWloazZ88Kd/ynp6fj3LlzQtBvbm4mA0DMScgAEErmxCWAkXboqq1AXMXL
u6U9n7ogKswHWht2yMcAlibauHrdAfsd7wvDF45Y4JpnFBxP70V6E1+Jcqw32ofy4nRYHHBgcwzB
zMIMbTzYT/Tj5OEjsD9zEjceRwjLC4x2wVB9JcKLuuQjAJ9nLO8If2iv3648/X9otyZ01A3g7JUl
DN+7fAKnbt6D7rLvcdzxJpycrsPMxAIlbdT1fxMfmgHgp/n5gTE7OxsnT57E+fPnUV5ejvb2droE
QMxZyAAQSubKTYCpvnex6PtVOHnmDI7sN8VqFnwbu3tx1mILdC2sYG2mC9MDN1FTkYrFXy3DmTPH
8Iff/wa3/JNw+pAxIksHgO58LNEwQUNjOZZ/8j0eu/vCaKcRauTH34SnF/AfHy1Fbb+8+y8nI9gF
i75biRMs72NWO7FytQHqu3rgsE8TWmYHcNBCHyb7riE/IxRrvluOs+dO46P/+C0ueqXgxbVDMNp/
ArcuncKOPefQOzKAwOf+yjMMxEs+NAPAxQM9P/2fm5srrFtbW5swjk8jA0DMRcgAEErmigHgNJZn
4dbNm7j/2AODrEwC4yI8e+iEW64eGJLft5cd5oe7D9wQn5KB2tZOlBXnoIMvIO1HQlo2+GzxQV4I
iUhBXnEBhuTBuCHVgwVre9nAazRX5gh533V7jn7FAwQTQ3B3dcath88xIC9PQWIQbt95gKjYeFS0
MtPB8Hv+ELecXdE+PMmWGUR0QBQGyAD8jA/RACjEb/zjp/2njiMDQMxFyAAQSuaSAXiXVGWFYO3S
pQjPqpePIWabD9kAqBIZAGIuQgaAULJQDEBHXRHik/md/MT7grcf/opc3lvmwfFDF19Pbnj4/kMQ
cwUyAISShWIAiPcPbz8ZGRmCCeCB8UMXX0++vvzASRBzBTIAhBIyAMRsMTExoWxLr7evD1GK9eTr
TRBzBTIAhBIyAARBEAsHMgCEEjIABEEQCwcyAIQSMgAEQRALBzIAhBIyAARBEAsHMgCEEjIABEEQ
CwcyAIQSMgAEQRALBzIAhBIyAARBEAsHMgCEEjIABEEQCwcyAIQSMgAEQRALBzIAhBIyAARBEAsH
MgCEEjIABEEQCwcyAIQSMgAEQRALBzIAhBIyAARBEAsHMgCEEjIABEEQCwcyAIQSMgAEQRALBzIA
hBIyAARBEAsHMgCEEjIABEEQCwcyAIQSMgAEQRALBzIAhBIyAARBEAsHMgCEEjIAxGzB28jQ0DAG
RSKmIRKJ9Gs1KIJEKpXvWb8MMgCEEjIAxGzR29uP8ooqNLe0oYVEIv1qNTW3oqKyRjju/lLIABBK
yAAQs0VXVw96+/rlQwRBTIeGxmYyAMT0mCsGQDIsQltrC5qbmwX19InkU96WCaGMo2PjkEhGWHnk
o4k5Q3d3L7q639yGCIJ4e+obmsgAENNjbhiACZwx08aPK9Zi06ZNgi49CJZPe0vGB+H26AHqaytg
Y2uNlmH5eGLOQAaAIGYOMgDEtJkbBmAEB0zMkNHMCjIF6Qi/4WUA1aXFaOuXApJ+5BeWMLsgo72u
Ejk5OegeGBWGe3p7IO0oh4GpMZpF42isrsOwVDE38b4hA0AQMwcZAGLazA0DMIZDBprYd9IRd+7c
EVTa3Ifesmh8+9032KatjUUr1mKv1W6sXvYNLjyPRG1+HPR19bB7925sMdiDurZOHD60B/nFRdi1
dxfaRUNwdbiJmm6JPA/ifUMGgCBmDjIAxLSZMwZAXx36u2xw6tQpQdk1XWjLDcAaw73CHLbaq3A/
qgriqlhs22WHjqZynDluA2trG/znx58gICUHRw9ZIreIGYA9O9Gkui0T7xEyAAQxc5ABIKbNXLkE
YG22C8Wv3SBenvgcZkfOC78v7jNBRFE/BspisP/oJdw+c5BNu4r42AgsW7IUnjGpOHJ4D3ILC2G+
2xSNZADmHGQACGLmIANATJu5chPgEb1NWLZODTo6OoLO3vVCbU4YLI7JDIDD/h0IK+hGf1ks9h27
gWi/O1izfjP2HtiDT778HoHJ2Thx7ADyi4uxh43jlwDcHPklgF/3sgxi5iEDQBAzBxkAYtrMDQMA
9LY3oSAvB9nZ2YIq6lowNipBd2+fML2/uwti6QQmRsXo7JadKqgpK0BBcZkwzzBrpL38JkCpFN2s
nBMT42ioqqWbAOcQZAAIYuYgA0BMm7liAIgPH24A6EVABDEz0IuAiGlDBoCYLXp6elFRVYP2ji50
kEikX6229k6UV1aTASCmBxkAYraYmJgQzgD09Pahl0Qi/Wp1MzPNP6z1ayADQCghA0AQBLFwIANA
KCEDQBAEsXAgA0AoIQNAEASxcCADQCghA0AQBLFwIANAKCEDQBAEsXAgA0AoIQNAEASxcCADQCgh
A0AQBLFwIANAKCEDQBAEsXAgA0AoIQNAEASxcCADQCghA0AQBLFwIANAKCEDQBAEsXAgA0AoIQNA
EASxcCADQCghA0AQBLFwIANAKCEDQBAEsXAgA0AoIQNAEASxcCADQCghA0AQBLFwIANAKCEDQBAE
sXAgA0AoIQNAEASxcCADQCghA0DMFrw99PTydtTLxP+SSKRfo+7uXojeELD/HmQACCVkAIjZggf+
yupadjDpRmcXiUT6tero6EJ5ZbVw3P2lkAEglJABIGYL3mvp7euXDxEEMR0aGpvJABDTY24agAk0
1tVDMqEYHEV7Ryck4iFU19ZiXD76rZgcQ01pIVJTUpAiKBUdvcPyiTLaG+vQ2tEnHwKkoh5U19Sp
zKezpR7tvYMY7OtC/7BEPvYlrQ31GBD/fMmJ0RE0tba/kmZfdyc6+3/dabz5CDcAXd1vbkMEQbw9
9Q1NZACI6TEXDcBQcy7+/Pv/hYcxRbIRA3Uw3WWOivpGvPDyglg29q0Y6yzB8s8/g5aeHvQEGSGh
oFk+VcaBtZ/j90sMme2Qccd6C/7rb/+KHsWIKaTH+iOlqBbO5/fBNapAPlbGpKQTy//6b7C54y8f
M4XOQqzU2YGuKQ7g3sWDsLkbLB/68CEDQBAzBxkAYtrMRQPgddcBNgcPYJfVWVlQHqiF0Y7tqOkW
o7m1VZinoSQXfn5+SEovE4YxLkJYoB8Cw+LB10fBYE0aTHaflg+pYhJndunhz4vWobhzlA32Ycfm
pfjrRj10s3Q6akuFfKIT8oS5+7vb0DM4jCunzOESmS+MU5Dq/wCHbA/C1Gw/epRlGEdsWAACXtzH
ch1z8HMPfS3l8PUNwMF9pjjpGo6u9kZkZyQjt7xeWA9/ll9MRrFscUgRGx4Av4BI9ItlO3tmchR8
/fzR0iUShod6GoQyphWz5TmjAwgJ8ENwRCJ4MURt9cjNKZdNe4+QASCImYMMADFt5pwBELdi705L
DEilOG6hi7iqPhYDm7HD0hLFhVkw2bsfzQ3lsLYwxqFDh7B+9Vr4pRXg3uFd0Ny+H7t3muJ+UCIL
6zJG24uwetEPsDpyBEeYjtlfRsfQq6foz7PxFpZ78DAoG33VSbDevw+WR4+ipqkep6zMhHy2blgF
l/Bs+Nw9Dmf/JLhesXntDMAoTuw1R3m3BK5nd+FBBJ82gTun9mPzNlPs2LYJX2zYiaaaQuhtWAtL
y7346pOPcCsgFdePbcP367XxxNMDJyx3wfLgIRht24pHQQnwuHQcG7V34MCunXAKiEOC+z38tEYL
tjZ7cPT6I7TWVcBCV1soo5aGFoISs3Ddaid0dlhhl5kpnsZmobMsCy+eRciK+R4hA0AQMwcZAGLa
zDUDUJ3sid/89g/Q0dHFZ3/6P9jp6MPGDsgMQFEOzPYfQG9vB5wuHsGuXbuwYvFnsLkfiDBXBxga
msL5gRsyixuUBkDSmo9NK9fD2c0NbkyP3X3RPzKOm/YsqG/dCpewODgcP4WnLPg6XroBV6erePTc
CzaH96OhpxdPbp8V8tm86ltsv/gMAY/smcFIgcvlVw2AuCUXn/z+36Guo4OlX/8nVphdwKSkGVvX
GMsuWQyWQXOXNa6eOoFT10KFZR462uL843BcsbNAVPUIBvOD8G//+xPs2r0LhprrobbDBiHPH8BI
fztu3nmI5LwaZIe/gL62ARyv3UFsWgmiXS/i93/+HrtZGTU3LIPZMUf43HGEsfFO3Hn4BNmljUJe
cwEyAAQxc5ABIKbN3DIAkzi7Vx+OzyNRXFyMopRArFi3FU1tTdhpaY6iwixYst560KPbWKu2A0VF
hdhrsBEm5x+hqrIcRWyZa4cM8OM6a+XNdqLaNOhvPyQfeklzfbWQR2tPNw6bWyCxpBHOJwzx7UYT
tLTWY4/1XoT5PMPKlVtZPkU4t18PeqcewtvlDO4GJOH+xX2sly+7LMB55miNAxcfopSlWVGShY1r
1yE5JxvGm7RR3itFa7YfftSxgMv189hteweTE2M4aLYV5wQDsAthpX1oz/bHdz+sRHpuEYIf3cBp
h4eoralGYWEJnl+zwTffGaCsrh65bHpUgDO++kodj5wvY/VmPeSxMj6+ehbX7vuiuqJcWDfH/bpY
sfmoYIZ+zYFipiEDQBAzBxkAYtrMJQMgbi2CqZGFcO1dwXlrU9x55oNzF86hvKwQR8+dR31FHozU
10FTSw/r163Chafh8Lt3HhvUNKGpoYP7PgnypYGJniqo/fAt1m3ciI1yvYjKkU/lTOL84cPIaZUi
7M5x6Oy/ysYN4dDxo6iuLRcMhqamFrZsWgNbZ3+Ee93E86gsuN89A4/EUlkKkm7s226M3JaXTwW8
uGSNMy7BSPa4haVLV7NybcAq4yMY7GvCHvXV2KSugSU/LoZrWAYeXD+B8IIWlpAULo4HsI6tx0b1
rYhKL0bks+vYsGkLtDW04OQeg/RYX2zctAm6upo4fNGV7ZR9cDxijC2amti01QgZxVV4cuUYNqjL
6uJZRCZac+Nx+6aXvGTvDzIABDFzkAEgps1cMgDj0hHW2F57tG5iFKLhYYyNjWFiYgISiWz6xOgw
2ts7Mc7yHZPfrd/V0Y6uXtmNcVMZHuxHR3s7m18mkfjVPEalUpYO+8F3Jvn+pMgHE1JhmVE2w/j4
BMbHRjHG/o7J/wqMj7KG/+qjhfz6/+CQ7HmFvq4ODI2MYoLVh4xRtHd2CTc48joaYzvfOFs3BZ1s
PQZGXt6nwJfv6Hz5mOLwQLew7lPh6yd+mYSQRnefbIcek4jZzqt6555NyAAQxMxBBoCYNnPuJkDi
g4UMAEHMHGQAiGlDBoCYLcgAEMTMQQaAmDZkAIjZggwAQcwcZACIaUMGgJgtyAAQxMxBBoCYNmQA
iNmCDABBzBxkAIhpQwaAmC3IABDEzEEGgJg2ZACI2YIMAEHMHGQAiGlDBoCYLcgAEMTMQQaAmDZk
AIjZggwAQcwcZACIaUMGgJgtyAAQxMxBBoCYNmQAiNmCDABBzBxkAIhpQwaAmC3IABDEzEEGgJg2
ZACI2YIMAEHMHGQAiGlDBoCYLcgAEMTMQQaAmDZkAIjZggwAQcwcZACIaUMGgJgtyAAQxMxBBoCY
NmQAiNmCDABBzBxkAIhpQwaAmC3IABDEzEEGgJg2ZACI2YIMAEHMHGQAiGlDBoCYLcgAEMTMQQaA
mDZkAIjZggwAQcwcZACIaUMGgJgtyAAQxMxBBoCYNmQAiNmCDABBzBxkAIhpQwaAmC3IABDEzEEG
gJg2ZACI2YIMAEHMHGQAiGlDBoCYLcgAEMTMQQaAmDZkAIjZggwAQcwcZACIaUMGgJgtyAAQxMxB
BoCYNmQAiNmCDABBzBxkAIhpQwaAmC3IABDEzEEGgJg2ZACI2YIMAEHMHGQAiGlDBoCYLcgAEMTM
QQaAmDZkAIjZggwAQcwcZACIaUMGgJgtyAAQxMxBBoCYNmQAiNmCDABBzBxkAIhpQwaAmC3IABDE
zEEGgJg2ZACI2YIMAEHMHGQAiGlDBoCYLcgAEMTMQQaAmDZkAIjZggwAQcwcZACIaUMGgJgturp6
0dvXLx8iCGI6NDQ2kwEgpgcZAGK26O3tQ3lFNVpa29FKIpF+tZpb2lBRWU0GgJgeZACI2ULWRkTs
QDJIIpGmoX6mEYlEvmf9MsgAEErIABAEQSwcyAAQSsgAEARBLBzIABBKyAAQBEEsHMgAEErIABAE
QSwcyAAQSsgAEARBLBzIABBKyAAQBEEsHMgAEEretwHgy0mlUhKJRCLNkPix902QASCUvG8DwOfh
aZNIJBJp+urt7YVYLJYfYX8OGQBCyVwwAKryI5FIJNIvFz9W86D9JsgAEErIAJBIJNKHIzIAxFtD
BoBEIpE+HJEBIN4aMgAkEon04YgMAPHWkAEgkUikD0dkAIi3hgwAiUQifTgiA0C8NWQASCQS6cMR
GQDirZkPBmBiYkI+99/mbRooiUQifcgiA0C8NXPZAPAGx5d/9OgR7OzsYG9vr1JnzpzBjRs30NHR
Iczfz5YbGhK9TIeNmzo81zQwKIJINHfLN3Pi22UIAyqnvWMJbWJI9TQS6QMSGQDirZnLBoAvy/Pd
tm0bvL29ERUVpVIRERHQ1NREWVmZ8Aasvt5utLa2o48FHN5oe7u7hGEeBFTl8241AKlU8sb65eXr
6epAW8fb7WDzWn29aGltRW+fimnC9D4MDg1DKhkRfquc5y3E28yQeAQj4iHhN98G/b09aG1rE9qE
qmVIpA9FZACIt2auGwCe5759+zA2xgr5Nzh06BCKi4shHZ9EU34MTHYeQduQlA1PIDf4MUyNjqN/
YlJozPxd2cNDImGdeO+bD0tGxEKeItEQMxEseAjDsldrilhQ4saCzzckGsQwmy4EKTY/b/CiQb5j
DLCAI0tDmC7PY2igB/m5BegeGHqljhXzsCIh1us6Dpx3EtZjRDwsBD9FuRTmgQ8PDw9jRCKRl1UW
2EYksnl43gNs3CArP19OSEeelxBYhfWSrYPqPGQ7t3hEIozj69nHAvXUdeH1INSbMJ8sP6FuhnnP
egASnharF97DV+TH65sfOKTjgLStGGp6pihsYeUeGlSWS1EGETsAdbU0IL+oUkhfYQL4eg/Ly87r
WrFN+LB4mJ854fUgqyeeHm8rjdXlKK1uYuvK6n2IHcAq02BquQd13RK2DrJlZXUky0O23qwe+XrJ
65vPo2wXfN1ZOfg6iuVtR6hbEmmOibdNMgDEWzEfDMDevXuF/P8W1tbWKCkpEQJNY044NHT2oHVo
FKMswmb63MPWzfsgYfPVVxUiJiYWNQ3t7KDPAv1QLxLjYpCWX8YCxyjaWxpRVVmGzOxc9PSLhDK0
NDeivrYKiQlJ6B4Uo7IwExl5pUJwqKutRltnLwZ6u1BeWY0hFohqKwqEPBrbB9Fbk4zlS1bBI6FI
CDg8qEpZgGqoKkJsXDyGJoB490swP+GA0rw8FFU0YJQH0Z5OpMTFIi4hHf0iCXo7W9HEypGXlozc
4hpIWD6jUjHys5KRlJyF8ppaDAyzINjTitiYGOSzdMbZ+sgC/SA62ppRX1eDpPhYFFc1YWxUioHu
diSzPOITM9HH1ks6KkF5UTZiYuPQ2NotBLuGmhJZfTW2o7W+GrUNLSyADqK+ug69zNR0tNSwQFuP
8dERpCfFITGrgG2DMXS1N6OmugIZWTlCnRTlZiIl0htLN+siv1lmAHhvv6+zBQmxMUhIzQX/fEmE
y1ks32iMms4BZkJEzEz0orGpAXWVpYhPSEHPADdBUnS31bFyxaCsoROjQz3IYttLJJnAAEuvnG0/
B2tjaFmcQ//wCNvOo+gsS8JWAwM0sOYoGehEHMszv7KebXMpO/hJUFaQwdJPR1lVDctDDImoB/Gx
scgqqRbqsaW5AU2Nday+4lDb3IURZnr4tlTVbkmk9ykyAMRb80EagNwIaOvvVxqALL8HMDQ4gYrc
RGxatRq7LEyxbfdhNHa044qtJfRNdkFHRwPPQtMR9sQeH3/xNaxOOaJLJBXSfnhhD/6yaBnU1q7A
jxvVYbZdC19+8y3i8ytx+pApfNLrMNqcjQ0GuxAVFgi11euwy3w7dhw+j8jA+/j33/wbLM67Qsx2
MunoOPKiX2Dl0uXYqrYWmpZ2iPJ/gE8/+xLbtm7FN0vWI7uyAW6Xj0DPcCcMt26GzZWnKM8Mwuef
fw7drdr46tufEFfajKhHl7B05XposHL98QcNlLEAf9TcGGa7LaGhoQO/uHxmEkYwNgkkeF3Hb/70
F2zV1MSi735CUk4ZHlw6DH1jC+irb8SR2y+QE+2H1Ss2wGKHASxOXkExMxdb16yBxS4zGO0/hkfO
Dth59AbEXSX45Pd/QFq9CA/tzHHq9jO4OVhj+drNWL50Mc45ByEj/CE+ZeU9cOoC3G45Yjkr59bN
q/H7b9ejvJP1pNmBYmSwDecPW8Box25obV6Pi25+cD6pj9/8/mN4Jhaxg9IYJoe7Ya6zAotXqGP9
iu9hae+CjoZS7NLXwS5LS6jrmiCtoBzHd+vCwcUH9lbGsHdywc7Nf8UfP12FnNpOFuQn0FmeDD0z
C9SzQL5PbwM2a2rjh2+Xwje+BFmhbli2bLVQht98ugzZVXWws9DCWnUtLPn+BzwNyobf/eP4+Msl
0FbbgJ/UtqO6axhi0aDKdksivU+RASDemg/RADRkh0HHwAZd0glmAICC4CfYbnAaRenh2PDTBpy9
5ITgqBTkxnjiD//zT7DYZ80C7Wos0zDDnWsncMDRRUiTn+Jma4arx01x4KYf0FuCld8tQ6MEeHzB
BufveuPMETNmAOox0ZaPdfoWCPZ3x6YVm2B/xRl+ofEQ9dRhp5E5CltFrNfLdrCJQezdsgE3vdNZ
2hOIZT3K5/fPQ93imJDnERbITj+JRmbUC+zdsxfmBmr4ywYTJES8YOnvYqUBrpzchb32l7FDTR+Z
zWzjdRVgrY4J7l21xx9+91ccYHWhtvJbrDU6CDFbf36ZIcTtHNT3nRHy8Ly0C2ZHLyE5wpPlsQ9m
ehvxhYY54vyfYv1qdVy+8QBhcRkoSQnG5qXrcOLiTfiExqG+NBmmu/bCy/0Bvvryc9x76o0j1nvg
7vmC5aeNdpb2eEsutDS0cePaOZgdu8LG9GHrss3IaB4FOguwdJ0mCloGhR60eKgPPo+uszJYwVBj
Bb7VP4SS1DCYWTkIZwMGBgYxKWqHvvY6eKQ1Y6Q2AatYHd8+fRh/+ngxrKytsOr7T2B8/C4mxZ34
6T/+CStNzvFVhO+tczh+i20zxuCQRDAApges8fTmJWgbnhDGF4bch66BLgzUDBGcw0o/2YbNWnq4
dvkCNDUPCPM0pnhBx9AcjvYHsev8YzZmDOpq6/A8qQIT0imXWUikOSIyAMRb86EZAAmL+L21WVj3
4ypkNAwI0x6ft4Du7kusAfciPSUd4YFP8MOXK+F04waWLPoR/rEJcL97GcfP3cGDGydwwsmDLTUh
lAGTE7h+yhyXX8RjvKMAxnqm4LXgZn8YVx764uBefbxgwWmoIhJfrVBDTnULctIzEOrniq8+WorY
5FSYbTNFHgt6Ehb0MCHCftbjvuqewlIZRVhEBOtZn8Weszd5UXHMyhx2N+/DeNMGuAXFwdPpNL5Y
b4qIoMcwOywL4JdP7ofVhSsw3boNWS1jGKlPw0ptE9y5cgaLl6shLjEZzheO46SDC8SsFz3ODEDo
I3sY2zoIyz+9uB/m+w5g2yY1PAtLwLMbx/HZaj1UNLUhMy0N/i9u4cuPfkJMdgUKsrMQFeKBRR99
i9DUUlw/YYFFK7TgHxQAg3VLYHjoKuqKU7Bq8SY0SgFpYxY01ZkBuH4e1hfvA+JWqDNDxMspqU/F
NyvVBAMwOjqOtpI4rFy8HP5xKXA+uw/f6x5EZrQnDM3PsDDL2+QgxgdaYG6qjcTKfua/orHR5ACu
21lhhZoxEpOT4HjUCjefxaCzOgfLv/oLNuofwABb+IXjERy65Cms7+AwNwBJ2L53P57dvgINvYPC
+NyAO8wA6DHzZ4CQvA52ZKzBOlanN685Ql3dgrUAoDbhBbQNLHD54hFceBzOxoigpaWBF0nlGCcD
QJqDIgNAvDUfmgHgN4uNSUfw+Jo1Fi9ZwQ7W6li8YjXSa7pQmcZ6tOs3wXSHMevp7URJTRNunDDB
Rk19bN60Fg99EuH78IzMALDAz8vA/946t4cZgFiMthfA1MAMnax7+ujiUVx9Ho3QBxfx9Xcrob1l
Gb7exAJ1uD80Nqphxw4jqOnsRkVjM/asXwpNC0eIWDDmlwAK4r2x+qflUN+0CjqsVx7kfht7z94Q
1uOkzS44PAnEhQO62KpvAmPdTfhG3RKx4S+w0/asMM/VU/tx0i0U8U8u48elq2GkuxEf/aSN8oYG
HDHfwnq427Fu3UZ4ROawHVsiXAKI97yGP/zlM9az1cDSNTrILCzFcTM1Nq8pDLU3YLH2XkQEe2Dj
xi3YYaoHffNjiI0Oh7baZlZfptjAeskFjYNIfGyHj3/QEHroRiu+gKWjF/s1jlsnzbBkxVr8tHQJ
rrhGI97/Fvaeuy2U1/2SLb5fvBKaaqvxxx82o6JrGJIRCQZbK7BTcxX0TUyho7YKS42PobkyE1/9
4RPc8U3DGDcvA62wNNdHXFkPekqjsdZgL2rqSmC+bS0Mtptg3WZdRCenYZfOBnjEF8KNbau9Fx8j
PeABPvr4e8QXNGFsbBydFSkwtLBEY1sz9husxVo1Dfzw3WqEpFchK/ABFv+wFNsNt+KPi9Ygo6Ie
Zyw1sHzDFiz5fhm8IwuYcTiCc24hbG0Goa+vC6+USjIApDkpMgDEWzPXDUB3dzf2798vn/vNHD58
WHgKgN+p3cd6jhNjoyjLy0JiYiIa2vqFG+v4Xek15QVsXBIa23uEG+mk4kGks55kVnEVK8so2pob
0NjSJuStKENLUz2a29gO0NeNuto6If3WpkY0tnayXv0g6/GnoKSiBvVNzRjieZTlC3k0d/IdUYym
+gpk5xSjb1CEfuEmwHE015YhKSkFPSIJ+rtaUceMAs+rsaEOLWy5wb4OpCQlori8Cg1NLehob0N9
Y5MwT3NTAytPO0oLM5GcloVYb2cs3ayNVjHrgYu6kcyXq23B+JhU2G5jrCsb7HYeZkfPoyA/HzUt
XWyHZ9NYvnzekooqlnazcOc9vwkwMTEZbT28ly5FfVWRUIf1rV2QiIfR29WOxuYm4Qa9lqY6tHZ0
sTKJmOkSs3pIRmpeCUYnxtHV1sTqo0Uor1QyjPzMFOQXlwv5dPf2C08KDLGDRU9HI5JY+vzmOz6/
aEjE1isXpZWNwrsR+GWY+vpadPawNtHTiaqaWgxJ+A2MrcJy1a09EPe1I7+gFMPSUQz3dSI/vwg9
fT3Iy85GfXMnRKwMfT1dqK2rwwC/KXCwR1ZH7ECFyVFUFGcjISUVGZEeWLpuPYra+amMQaSwdpFX
UYcJ1i54G2hq5e+Z6EdtbS3au3re6oBIIs22yAAQb81cNwD8r66uLq5duwYXFxeVun//PjZvZj3L
igrBAMiWH5A/2iV7hE3xuNfUx9qEO+RZMOd3u0tY4ObT+WOAPLgp7vDmf/kjYPyxOJ6mLH3+GBqf
j42TLy9m42WPw73MY0j+qBsPdJIR2XKyssmCH5+HP9YmPOInf7RsiKUzJIyTPR7HTQtPlwfZYZan
bB4xJscleHzjJDasVcNPy5bg8rMIjDLTM8jKzpfj19gVeY2OTyLS/RoOX3ko1LmsPlj9yh/BU+TB
x019DJAP8x2aDyvri5WDr6uiHLLHBdl68XpggVnx2BxPW7FOfBq/c58/qsiXVbwISFG3Qhmm1B9/
pE+5rFCGYVn7ZOmIhUcYX5ZdKBdPnx2keLq8fLJH+Xh5JMrHBvk8im2neMRvhA1zkxP85Co2rtmA
1T8twbGbLyAdHRPanjCP8KjgyzbAy8zTkT36KVsPEmkuibd3MgDEWzGXDQBvcHx5/qIfHuRVBX+u
Bw8ewMfHRzhboDANH75YgGOBrraiHFX1TcIOPNVgTBWvx57uLnR2db/VTryQxN9pwI1CY3UFKqrr
WPBnJuoN9UgizQeRASDemrlsABRSvASI5/Em8e8FLLjgxtaX90aHWc/5771el78LgJ8KVzWNNCCc
eeF1yV8CpHoeEml+iAwA8dbMBwNAIpFIpLcTGQDirSEDQCKRSB+OyAAQbw0ZABKJRPpwRAaAeGvI
AJBIJNKHIzIAxFtDBoBEIpE+HJEBIN4aMgAkEon04YgMAPHWkAEgkUikD0dkAIi3hgwAiUQifTgi
A0C8NWQASCQS6cMRGQDirZkPBoA3vLeRqmVJJBJpIYkMAPHWzAcDwD9Wwxsn/zrcm8TnIRNAIpEW
usgAEG/NXDYAfFke3E+ePImdO3di3759KmVpaYk9e/agpaUF/Et+/Mtv46w8CvingPmX7FTl8S7F
vxzHvxQ4PCT7ipyqed6neJn4V/qG5V+5UzUPiUSaXyIDQLw1c90A9Pb2wsTEBKWlpWhtbX2jduzY
gZKSEuFztv3d7YgM8IariwseMiVll7MGLp1lEzDAzEg/crIzUdHQpvy87lzSsGgA6SmxKGE7LDcB
quYhkUjzS2QAiLdmrhsAnifv5b+pcSqwsbERDIB0HGgvicc3//kXmOzag72W5vj/t3feYVGlC56e
v/bP/XOefXZ2dufu7ty5vfc6M/d2um0HO9ltxowgQUWSARUwYKbBhBkFFQVREBUTopi1MSOYAQVF
RUIVOVSiigJ/+32H0KUWdmErTVX9Xp/3kUrnnKo6Vd97TqV+33yP9CsP0GJuRsd+gWajQblOxmZx
AUFrS7MSCIYmk3IYL8xinnqxfGblfCZzC5r0WjRq9eK8ZuXB0NI+MXl8Q6MWZnEecUMov1Fvam07
bbLXWEQfyxFXtKntgWlshllcZ0nHMugMRuUwWuV0Ncp0tBpxm8s9GWazuG8aO5fTbJLTaVB+s17u
5OiYhlSjMyjnEQuh3J/yMvJ0uWytrS3Kg7Nj3mJmMBk0OHF0H7Lyi5Xllveh3FuiM7Q/eYjlkT8x
/Mt0xZMH9xZQ2qtVnmcYAMQW7CEAZsyYocz/TYSGhnYGQPHNE/AKWNJ+CpC+fT7cF8Wguakeu2Oj
EbV6DS7lFMIsVvqcSyewOmoVUo6cUQbix7nXsHZ1FHYkp+FpYR5OnDqv7CbPOn8OdwtVqFcVIi3j
JPRiYD2SHIeVq9bi7rMqGOpVOH8mA9t3xKOgtAKXTqQgelM0ho4YiR1n7oqRu0kJg7s3r+D0iXSs
XbUaV24/RktrK0oLb2K1nGfqKbElXidOPw5VrR5NmhqcEPOq0BiQcyENUVFROHU9XwziBly7dA5J
uxJw4mJO23skxLLXqx8jZt1qrN+RgkZxp146dRA/3yoSj+Aa7N+fivvi9jl3+jhiNq5FXNJRNJma
kXv7Bp6VqnArKxPJuxNw+tpdlBfdEbdJFBIPnxXh04palZjuhrVYvWEbHpVWcW8Bpb1YBgCxGUcM
AFXuBQz5cQQSDxxB+pH9GDesH7amZ+HqiZ3wC5iO8LAgfDPSG5cyz2LAp59jUeRKBM2Zjxu3bmD8
t18haH4EgkNCcTBtH1zHeuB5VTUG/Pt/Q3D0cWSnbcL4qYuQtGExBo6aiCVzp6L/oMm4mZOJLz75
M0IiNiB+3TIMGzIGEREL8f/+9J/YnZkvAkBu5bcgfNpw/LnvcCyaOwX9hvsgL/8+JroMQ8jCcHiM
HoKVW5IQFuiGhLMFqLx9FCO9Z+Ds0f0YNnAEwsPDMXDgMJy8moNJIz/HMK+pOH31trKlr699jhnu
Y+A3awGm+ozC1IXRyP45FSNdJyJi/kxMDluPh9eO4J/+5Q8IXRQOl68/xaadRxE+zwep53Mw0+Mb
DPaajv3JCfAaMRrzloTD1WUQopMOY3mgJ0aJ5Vg4JxjRe4/DKMLB2v1FKf39ZQAQm3HEAKh8eBn9
/vYhJvgGwNdnEqJ3H1V21988fxiBvhMR4DsBf/jrFzh14w7WzJ4K/xlh2Bi7B8/KnmNbRCg8JwVh
1ZptKCotx/IF07Bi3QYEeo7A3Ig1+GlRKHanHYOvGOBvlLa9XBA50w1Ll69EYPBs5fBCbw8knRdb
3oKZUyYi5vjNtgBoMSI8dAI2H78jTmnEGG8frF+9DH3+70fwD/CH++ihGDdtMS4eS0bYim1I2rgU
cUd+RkzwBHz81VD4+/th8PdfYsXGOATP9EXWM/mAbYZeXOmn19Pw53/6Iyb4B2Cix1h8OWA05C2/
d6k7/ss/fgR56xWcT4RHaLj4C3hyMRFefoFYsigEh89nYd6MCbihasGd1PX4w79+ggCxPONGDoLX
zKU4mRoPH28vLFsZhdMX70DXpEejlfuLUvr7ywAgNuOQLwHkZGCMRwg6HgIvWsXo39oInx+/wMKY
Q7iXlYG/fPQ59py5hswLF5F76wq+/su/Y9H6fbh2+YqYzm14fPspApak4F5mCv75v/8f7D1zA+tm
jcOfPh+HqnqxTCN+QGT8caif58N14FDE706Ad8AU6MX81gR5IXhZElQl+fjy879j66m7yuCPViOW
zPLAprQbgP4ZBrt6ImFnHAb0H4Srd/OREh2B+csTYdRVINh7JAaO9kOJxoRd4QEY5ROCBw/ysGTm
dBxKP4Mp/u44d18Fk0ErBuRmqPMv4fu+n+HQxVs4l7oVM+ashrqsAL7jXTF86DDEHriM4uwj6D9i
HJ6VVyBucSBmLV6H8AWBSBW3Q+jU8Tj7oBb3M7aj33dDkJP7AAmrFyNiTQKuXb2Cm3dzsX6uNz78
YiIaWgGtlfuLUvr7ywAgNuNoAWA0t6I8/wrmLohChdYorlfbSmsymXDhQAwGDRgMT08PDBkfgMwb
2ZjtNw4jRo7ChKkLkPewAKvm+mPYiJFwG++HK/mlMKjuwnXUGBTWt+J0fAS8ZixX3kj45M5ZjHEZ
hIH9v0dEbDpqnt9BWHgkappaUPHoBjwGf48Ro0djoIsrjmc/RovJgJZmA7atX4J9F+6hRVeKaSFz
kFdeh9TYhfhh8DAMG+uJs9mFyvSTo4Lht2Cz+FvcrpVPMSfQFS4uLpggtsifq8uxPCIMWYUVaNK3
vR4vH8BnU6MxcMBADBwxBocv5IgBfA6W7ciAtiIXPn6zkJ6WjK/79cXwEcMxeKw/HpfVIm7DUpy5
fhcboxYjM7ccrWYdtkeFYMAQFwx380FOfhEOxa1QXnoYMdINu9Ivw2g0vnQ/UUp7jwwAYjP2EADy
M/5yBX0T8lMAeXl5YgXUo0GsqPL7AyynJd+5Ll+7bqyvQ4NGC5N8t7vOIP43oKamRvn4oLFJHDYZ
USsOa/VNMDXJaWnE5ZqUkNDq9OLBoEe9mF6TyQyjXovaunqYW9reqS/nKeejF9NqMmhQ19Aoltv0
0u5yjThPR5TI8zeK6yjf9V8nrqfGYGx71744TWfQQ2/QtZ1PLEuzCBh5WxjNZuV7BTTiOjRa3Gf1
cl5iOvL61Wv0MDfLB624Xgb5rn6DmMcLXE3bgvEz50NnegGD0STiQafMXz6wlWWR02r/NINcHl2T
SdwG8jYxob6uVlwfcVqPf5ySUtodGQDEZnp7AEgnTZqk7AVYsGCBVefNm4dRo0bh6dOnbQEgLtvV
yto2zV++Olj+L4979XDHIN1xnPK3+L/zb+X4tuXrGOCtniYv035cx3k6Bu5fzm99ni9P7/Xl7DjN
UmU64vrJv9sG97bjm0wtKLhxEitidkBvav3lPHI+Fv+3TefV5Wk/LGw7TCntrTIAiM305gCQypXu
0aNHuH79OrKysqwqT5Nb/3IZbVlJnVJx22i0OmUvB7fgKXVcGQDEZnp7AEjl59zl685yRbRmx2kc
/Cmlzi4DgNiMPQQApZRS22QAEJthAFBKqePIACA2wwCglFLHkQFAbIYBQCmljiMDgNgMA4BSSh1H
BgCxGQYApZQ6jgwAYjMMAEopdRwZAMRmGACUUuo4MgCIzTAAKKXUcWQAEJuxhwCQK6b8jv9f09pl
KaXUmWQAEJvp7QEgV7qysjI8ePDgjRYXF1u9PKWUOpMMAGIzvTkA5GWlAQEBCAwMVH7z35ozZ86E
q6urEgEdewLk8ja3vMCLlmbl71en/f6sR6NGhxazGY3ib+vn6VCcrtGKZTQrDxyzeBD+2g/1yOti
am6B0aBrv15t82sV03jT/OobNHjR2gqdplH5OWNr56GU2r/yeYEBQGyitweAnOe0adOU36t/E8HB
wcovAnYEgEms0GdSdyDh4Bmxcptem/a7Ut4u8vf2Dfq2AVmj1aO6OB8JyXtQUW8Qt2vXDxo5cNer
ipC4Lw25924g6cARNOqN4oFm/fzSJoMe508cxKXbheJvHRq1OlSXFCDlwCFUNuitzk/+LLCutgyJ
SXtQWFYDnfbXH8iUUvuUAUBsxh4CYMaMGcrhNyH3BOTn5ysBIAdWU6MKvqM/x38McEdZo9jC1ojp
icG5A7OpCQ2NGrS+aDv8wiwjoRHmlvYj8AJasbVsNJlh0GmULWi5lS0fJB2XaeMFzh9MQnLGdfGn
2IIX06ytKMHVrCzUagzt5xEntf6yhd4WDca24yvv4fNBY5Fd8BQ3b9+B1mBSjpe0yHARD7qX59eK
RTPcEH04q/0woLp7GkNc3VFc3yoXpx25/OI669qXwVSGbwcOwdk8NZoN2s7bmFLqWDIAiM3YSwDI
+b8JywAwml8gKz0eEevjsG5RMOKOXFNeCtDWlWL5glnw9BiP/eduigFWhx3rlsDT0wObUjLQ0tqM
Y8mb4OHpidDIGNRpm3Bk73ZcvF8MU91zrN+agHu5dxCzMQphQdPgF7QU5eoSeH3/AT74cBjySmth
MhlR/fwBdu87IJa9GjFRi+A7eRKWbdqNep1RuZ31TSaoi24iKNBHnOaNviN8kH33Ng6kn0RdVRki
F4Zi8iRvbNl7Eo31NYiLWgp/f3+EzFulLFNM5DSM9xXzF+eJ3X8edU+z4e7jhxrTC2Sm7YSfOO+8
FbGo1bdAW/kI82b4w9/PBx99PxzXiqphYgBQ6rAyAIjNOF4AyC1eM8IDx2HhpgNI3TQXA7yClfOs
m+kF98ClOH4gHt7TQxGzcjFcxvji1Imj8Pb1x7bN6zB0wEhknDmDKSOHIGJjCpbMnogdp3OB2jz0
G+aO02ePok+fPohLOYJpnsMwe9MebF7gC/cpEajR6GEwmVF+7wxc/aciIzkOH/b5CrHxO7FhaxyK
Kuph0OnRrK/A9FEjsHBDMlK3ROLDH71w5kQKJs9bggMbI/Fx3+FISEhAbPIBFD97iMjFoVi9eg2G
fvcJlu46hR3LA/G1WxBOZBzCgK++wp7U/Zg+dx6unUnHVx99hWXivGN+/Bwzl21G1KwpmLZoM47v
3Yw/f/Qtrj8VkcIAoNRhZQAQm3G0ADA2t0JTdhc/fPExRrm6Y/y4UfjX//xKbJ2XIGDISFwoaHsp
wdRUKQbhkdh+7L5yGC+asGLqJIStPqIcLMlKwQS/QISFBWH/9WLxCCmBi4cvMjIOwid4rnKew3ER
CFy1C8cS1mFV4hnlOI3eCFXuBYz3m4JS8aCJX7cSobPnYO7cKOX19yZjs9hiv45RgydCuTWNxRg5
MQgZx/fCN3QxaqpU2LhsCWbPno2IlQl4eD8bwYE+mDVrFoZ81xcz16dgy5rZ2P3zQ2V+GxdMQFh4
JOZFhCNxbQT6fPgdQoJnwd/HG8Gzg+E+0hcFyl2gw9jxHriQr2YAUOrAMgCIzThaAEiSVwXDd8Em
5W9JzHxvBITHYvvSILgFLMax/dvhPS0EsVFL4DJ6Mk4cPwKvyX7YHrsBA/sPQFrGSQSOHIqV2w5h
zfwAeM9Zj5To2fgff+uP0ycPwtXHH+Imw86oUExYloDjW37CULcQVNTr0NS+B2D0BB9c+PkiNsfu
wtkTe9Hnf/fB/sxC5aWIZq0aAS4DsWh9MnaunY3/9dkInM4QwRE0G5lnTyF25wGxjNH4618HYOOq
cHz3w2hcu3YNXi794LMsEZuXTMCPXrNw4mgKBv3ggrSjh+A1ZSqunD2GoYMH4VTmFSwPnYKY3Uex
bKonpi3ejIMJK/GPf/wQV4pq+B4ASh1YBgCxGXsJgF+bjtxizs9/ALPZgN2b1+FsziM0G/XQNZlQ
knsJy9fHob6xGqsXh8LL0xMHzt9Gq1mPhA3h8PLyRMy+k2hpNSMjZTM8vbwwZ0UcGk2tKM+7jine
3pi7cAFWxO7G/Xs5iE9OgcFkwpXTh5CYcQUVhdfhO9EPl+89h0kcX/UsFzuS9qDk+RP8NGc6Jk6c
hGgxGMu9A/Id/gZjM57du4QAb0+EzJuPZTFJyL2bhd0Hj6Lk8T2ETPfFpEk+SM64Cm1jDTZEhMLb
ezIWLQ3HwXPZuHo2FcEzApXrkXQiG7qqJ9iakAiduQWZaTvE8out//B1UDUYUFt8DzP9PBEUOgeL
V21CoaoOeq3G6u1NKbV/GQDEZuwhAOT3AJSWliorqDXlRwSnTp2qfAxQp9PDJAbCjs/JS7X6JrSK
LW+N5pcV3Gw0vPQpgNbXPgXQqtwm2vZ36yuIQJDTl5/Xl9M1GE3KdDRi+hI5sMrj5acQ5Hm0WosH
VGsLGtuvlzyPfCNgJx3TFfGgFf93IJepUX5PQPthSXOTXgmIDlqaRVSI88jvHZDTNplb209p+xSD
vO6/II4T14nfA0Cp4yqfXxgAxCZ6ewBI5da9n5+fsifAmnLwnzx5cmckWJsWpZQ6gwwAYjO9OQAs
lSvgm5TnsWUFpZRSR5YBQGzGHgJATsMWrV2WUkqdSQYAsRl72QNAKaX012UAEJthAFBKqePIACA2
wwCglFLHkQFAbIYBQCmljiMDgNgMA4BSSh1HBgCxGQYApZQ6jgwAYjMMAEopdRwZAMRmekMAyGlT
Sin97dbV1cFgkD+Lbh0GAOnk9w4AeTmj0UgppfQdKAdss1k8qXcBA4B08nsHACGEkJ6DAUA6YQAQ
QojzwAAgnTAACCHEeWAAkE4YAIQQ4jwwAEgnDABCCHEeGACkEwYAIYQ4DwwA0gkDgBBCnAcGAOmE
AUAIIc4DA4B0wgAghBDngQFAOmEAEEKI88AAIJ0wAAghxHlgAJBO3ncAaLXa9kOEEEJ+b/R6PQOA
tPE+A6C1tRU1NTVKBMiVi1JK6e+rfE5mABCF9xkAElmbcsWRp1FKKf39lb8aaAkDwEl53wFACCGk
d8MAcFIYAIQQ4twwAJyUdxkAcgUhhBBiX5hMpi7fsM0AcGDeVQBI5AoitXytiVJKae9WPsfLgd4a
DAAH5l0GACGEEMeCAeDAMAAIIYR0BQPAgWEAEEII6QoGgAPDACCEENIVDAAHhgFACCGkKxgADgwD
gBBCSFcwABwYBgAhhJCuYAA4MAwAQgghXcEAcGAYAIQQQrqCAeDAMAAIIYR0BQPAgWEAEEII6QoG
gAPDACCEENIVDAAHhgFACCGkKxgADgwDgBBCSFcwABwYBgAhhJCuYAA4MN0JgLq6uvZVghBCiDNg
MpkYAI6KrQEglSuBTqcTd7KeUkqpEyg3/hgADkp3AkDuAaipqaGUUupE2jL4SxkAdoatASBXALki
qNRqqNUVlFJK7dWKbijOX1lZZXVceFUGgJ3RnT0AefkFKH5ehucl5ZRSSu3U4uIS231eity8h6i0
4WUABoCdYWsAyN3/RU+KYW4FjOL8lFJK7U9zywvodFrl/Vy2aDQaRTSUQaVSMwAcje4EwOOiZzCY
xMrT1EIppdTubEWTsVk8p9e/9hzflTICnhWXKC8FMAAcDAYApZQ6iwwAYgEDgFJKnUUGALGAAUAp
pc5i1wGg0WgUXz2eAeDAMAAopdRZtB4AcpB/8OABCgsLlb9fPY0B4KAwACil1Fl8PQDkVv/Dhw+R
mZmp+Pjx45f2BDAAHBgGAKWUOosvB4Ac6NVqNS5evKh83a9Kper8uyMCGAAODAOAUkqdxZcDQA7o
crCvqKiAVqtVlBFg+fW/DAAHhgFAKaXO4usvAchB3XKXv/zbcqBnADgwDABKKXUWrb8J8E0yABwY
BgCllDqLDABiAQOAUkqdRQYAsYABQCmlziIDgFjAAKCUUmeRAUAsYABQSqmzyAAgFjAAKKXUWWQA
EAsYAJRS6iwyAIgFDABKKXUWGQDEAgYApZQ6iwwAYgEDgFJKnUUGALGAAUAppc4iA4BYwACglFJn
kQFALGAAUEqps8gAIBYwACil1FlkABALGACUUuosMgCIBQwASil1FhkAxAIGAKWUOosMAGIBA4BS
Sp1FBgCxgAFAKaXOIgOAWMAAoJRSZ5EBQCxgAFBKqbPIACAWMAAopdRZZAAQCxgAlFLqLDIAiAUM
AEopdRYZAMQCBgCllDqLDABiAQOAUkqdRQYAsYABQCmlzqL1ALAc2F8d5BkADgwDgFJKncXXA0A+
t8v/5eCu0WhQX1/feZyUAeDAMAAopdRZfDkA5IBfXl6OmzdvKn/L43JyclBZWdl5mAHgwDAAKKXU
WXw5AOSALrf4s7KylIH/xo0byv8dp8n/GQAODAOAUkqdxddfAujY0r9+/Tqys7OVw5YDPQPAgWEA
UEqps2j9TYBy0JfP8XJvQEcQdMgAcGAYAJRS6ixaDwCpHNytDfAMAAeGAUAppc5i1wHQlQwAB6b7
AQArKxWllNLe7wsGAPmF7gRAQWGRWIHM0OqbKaWU2qF6g1E8p9seAFqtFkVPnkGlVjMAHA1bA0De
8Y8fP0HhoyLlf0oppXZq0VObfSTO/7DgEWpraxkAjoatASDt+HgIpZRS51GrffmjgV3JALAzuhMA
lFJKaVcyAOwMBgCllNJ3IQPAznDGAJBvaqHdV74bWP5v7Tal70f5slvH7e4Myutqy65m2jtlANgZ
zhYA8smlsLAQ+fn5ePDgAe2GeXl5ePz48WvfFEbfj/J2LisrQ25urtX7wxGV65jlD9FQ+5IBYGc4
WwDIr7q8ffu2MpAVFRXRbvjo0SPltuMWWs8ot4ZlrN6/fx9Pnjyxep84kvI6yvWruLhY2Rtg7Tah
vVsGgJ3hjAEgn1BLSkpoN33+/Lly2zEAekYZADJUZQSUlpZavU8cSbm3Q+4BkOsZA8A+ZQDYGc4a
APJJhnZPuWXGAOg5OwKgoKBAGSCt3SeOpIwcBoB9ywCwMxgAb29x8XOoK6vQIAZEOSjW1VajtMT6
ed9k2xaQ9dOkcuCV86msUCl/y/lW1tSgQl2uHLZ2mfchA6Bnfd8BIO/P0nI1Gi2/36OhHmWlJco6
Znm+CrH+VajKlMNvWld/iwwA+5cBYGcwAN5O+QRZXVOLnMzjCPDxgLvbOETF7IWqsvsRUFpWJp78
un6Cr6xSIz1lJ5LSLqCqskIcLsOejRtw+OR1JQqsXeZ9yADoWd93AKjUlci9ehqTPcbDzc1N0d17
Oq7dK+oc7KVynUvdtRn7Tl5GTXXlG9fV3yIDwP5lANgZDIC3Uw709zIP4rOPP0PkhnikH03FmK+/
RFDkDjSIJy85n8qKCmXLqba2BjUiFqoq1SgpLVd+V6G6ulr5X9tYg22rIhB/+CIa6+tQq5xWo1xG
hkSxmFdDYy1Wh/ojaNlOsYVWhwaNGrOGDEZ4dBr0Bh1qa8T0a2uVGCgpLWufRnX7NEpQKaZXJ05X
lZcpg7i162OLDICe9X0HQFVtPU4nrkG/H91wKD0d+/buxd79R5BX+BRVYv2Re5gqxHou16ubN67h
kYjeXRtWYeuBC2iorbQ6zd8iA8D+ZQDYGQyAt7NeDMTLg8ZhztpktLSYUN+owZP8Gzh65hLOpSfB
Z6IXZiyIxLXLZ+HrPR7jxk/A4fO3oXp2D3MCfTB+/HgEBK9A7r2r6PfBP+ODbzyR+6gAqxbMgLu7
G5as34XyiiqUKvOqwcaFMzF3TTIa6mvFvNQIcx2L9YlncffiUXi4jcMwlzHYffwy6iqeYXlY2zQW
rk1EVUUJ1kXOgYenB2KS05UwsHZ9bJEB0LO+7wCorKnDqV3r4RG4BKViK/9JURGKS0qhepqHkOkB
OH3zMdLjV+KnjTtxOHUXUg/vx8C//U/822ejcOtRyUt7Cd6FDAD7lwFgZzAA3sYSMSiXYa6bOxIO
X0NdjRrPnj1DRU09JNsjA/G5ywTk3LiIkX37wtU3FPNneKHPp9/jzKVMLJk3E8uXLUPfT/ogctdh
hAd6Yt7GZGxZMA2ffjEEq6J+wkd/+SNW7DyB+tpqJQA2iDCYty6lLQA0FVjg5oYtKScxz3UAho2f
hritsTh84TK2L5mFjz8bJKYRgU//4wOsiUuGm8uXmL8uEfkFhco7ra1fp1+XAdCzvv8AqMflg1vw
b3/4E34cOBD9+/eHx9QwlNXqcSJpHQZ9+w0GuLgju7AUK+Z4Y+XOA1g23Qv+CzdDVVGh7F2yNt23
lQFg/zIA7AwGwNtZ11CPqBB3TIuMQ0trC3RixX+QcwF7088jYX0YwjanwlB6C3//45/gFxSCkJnT
Mc5jEhITEuDj5YEFC+fjm75/w5L4NMSEz0XS6Wv4acIwfD9cxMDc2fByHYU18YdRUyMCoLEOm8Km
YVZkIl7If60NmDlyBDbuuYhnuZcQOT8U0wMmY2NsCkI9h+O7Ye5iGnMwwW0sNsRsw5Spk3Axrxy1
lb/tTYMMgJ61J/YAnExch0mzVkLXbGp7KUmoUlfBUFeCL/7lv2KA3wolapfNmYhNB85im1hX1+w5
B4OmRqwP1qf7tjIA7F8GgJ3BAHg75e75gqyT+PrvnyF40SrsjI/FoE8/QcT240jaMBt+S2NgElvq
09wHIWjpesRv/AkBM3/C1uWz8fUANxw/dhhfffIXhMQexNawAIyatAgJ6xbCxdUThw7thfsoVxw4
dxvVlSqoq2tx/Vg8Pvv7x4iKSUDUoun49Lv+uFVYjC1iS39DXBIWTXHDdy7TsXd7FIaMGiemsR8e
Y92RlnEaHu7DcDzrMapUpVavi60yAHrWnngPwJlda5S9Tlt37MCm6GhEb9qC+wWFiAjyQODsn+Dn
Ogyb95/HirneWL33FOIXTMEPo6ajsLgM5WW/bX16VQaA/csAsDMYAG+vztCEksLbiFw8F8HBwUg5
+jOaW4Br59Kw79g5VIsn2OcFNxEWPAV+00JxIacA1WWPELVEBMKUGVixeg2OXbqNvKsZmDZ1Hu4/
LsaeLSvg5+eH2JTjUFdUoKR9XlXVVTh3eKdyml9gKM5l5SovB1w5fRBT/f0wZcZ8XLpTCG1DFXbH
tk1jk3zNX1WMXbt24OaDpyj/je/eZgD0rO87AMrVFSjOy0Z42Dxl/Q0JCUHI3EW4ePUSNqxZi4fq
BuReTsea6HikHdmHM9fvIf/6SQRNDcWVO4+g5nsA6CsyAOwMBkD3lU9U8mtLd+7ciYTEXUg9cBAH
Dx5Eyp4kxG3bhutZ2Wioq1XeF9D2OWsttBpN25umSsrQ0KhRDsvlqRTHlakrxRNeI8rEdGtq236s
qK6mSszrl9318tMAldW1ymnyt7kr1Spl+qqKKmjaj5PTLy4uQU2d5TTE4ZpaMe22aVhej+7KAOhZ
32cAyOnJ9Sdl334cONS2/rZ5AImJieI8bW/yK1dXoVasR5WV1agoF+uqSq6rGiUm+RIAfVUGgJ3B
AOi+HU+ely9fRmZm5mvK6f+WN9v1VhkAPev73gMgvXr1qtV1WM5XDsjWLvO+ZADYvwwAO4MB8Paq
VCqo1erXdMTBX8oA6Fl7IgC6Woff1/zeJAPA/mUA2BnOGADy51Xlkw3tnnJQYAD0nB0BIH+FUUal
tfvEkSwvL1d+EpgBYL8yAOwMZwsA6c2bN5UIkFsb1Hbl4H/r1i3+VnsPKQNADv5yfc3Pz7d6nziS
8jpmZ2czAOxYBoCd4WwBILde5ZaG3J3dseuR2qa8zeQuY+4B6Bnl7Sy/udHZ1lX5Fdlcx+xTBoCd
4Yx7AOQWrNzCoN2XW/89qxwIrd0PjiwHf/uVAWBnOGMAUEopffcyAOwMBgCllNJ3IQPAzmAAUEop
fRcyAOwMBgCllNJ3IQPAzmAAUEopfRcyAOwMBgCllNJ3IQPAzmAAUEopfRcyAOwMBgCllNJ3IQPA
ztgUu/2IGP/RZDAodx6llFL6NjY3t+BxSSUDwF5YvmL1mbLqRhSIapPlRimllL6NRWLwv3W/kAFA
CCGEEEIIIYQQQgghhBBCCCGEkF7KP/zD/wci9YLKnOh/sAAAAABJRU5ErkJggg==</Preview>
  <Form>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
dnNQoqYEAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$Lookup = @()
						Add-Logs -text "LOG: Getting License selected for user"
						$License = $comboboxO365Licenses.SelectedItem
						Add-Logs -text "LOG: Getting AccountSKU Domain"
						$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
						Add-Logs -text "LOG: Looking up SKU for license"
						$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
						If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
						{
							Add-Logs -text "LOG: No SKU found during lookup"
							$BackSKU = "$LicenseDomain$License"
							Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
							$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
							If ($CheckSku -ne $Null)
							{
								Add-Logs -text "LOG: Assigning $BackSKU to User"
								$licenseforuser = $CheckSku
							}
							Else
							{
								Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
								$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								Add-Logs -text "WARN: Assigning $ReLic to user instead"
								$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
							}
							
						}
						Else
						{
							Add-Logs -text "LOG: Found the SKU for the license"
							Foreach ($Item in $Lookup)
							{
								Add-Logs -text "LOG: Checking License $Item"
								$BackSKU = "$LicenseDomain$Item"
								Add-Logs -text "LOG: Looking up $BackSKU in tenant"
								Add-Logs -text "LOG: Verifying $BackSKU in tenant"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: $BackSKU was not found in tenant"
								}
							}
						}
						
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						
						$Lookup = @()
						Add-Logs -text "LOG: Getting License selected for user"
						$License = $comboboxO365Licenses.SelectedItem
						Add-Logs -text "LOG: Getting AccountSKU Domain"
						$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
						Add-Logs -text "LOG: Looking up SKU for license"
						$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
						If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
						{
							Add-Logs -text "LOG: No SKU found during lookup"
							$BackSKU = "$LicenseDomain$License"
							Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
							$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
							If ($CheckSku -ne $Null)
							{
								Add-Logs -text "LOG: Assigning $BackSKU to User"
								$licenseforuser = $CheckSku
							}
							Else
							{
								Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
								$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								Add-Logs -text "WARN: Assigning $ReLic to user instead"
								$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
							}
							
						}
						Else
						{
							Add-Logs -text "LOG: Found the SKU for the license"
							Foreach ($Item in $Lookup)
							{
								Add-Logs -text "LOG: Checking License $Item"
								$BackSKU = "$LicenseDomain$Item"
								Add-Logs -text "LOG: Looking up $BackSKU in tenant"
								Add-Logs -text "LOG: Verifying $BackSKU in tenant"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: $BackSKU was not found in tenant"
								}
							}
						}
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$gettingStartedToolStripMenuItem_Click={
	Show-GettingStarted_psf
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}

$testToolStripMenuItem_Click={
	#TODO: Place custom script here
	Add-Logs -text $Global:O365_Pre_Req
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>