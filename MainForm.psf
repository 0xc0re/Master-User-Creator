<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
eqj+6Z/+P/t2ETSpT4NkAAAAAElFTkSuQmCC</Preview>
  <Form>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
yF170qaA506jvs/AWFh0+FP79f8AtJTrc2a9AgA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
							Start-Sleep -Seconds 30
							Add-Logs -text 'LOG: 30 seconds reamining'
							Start-Sleep -Seconds 25
							Add-Logs -text 'LOG: 10 seconds reamining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
							Start-Sleep -Seconds 30
							Add-Logs -text 'LOG: 30 seconds reamining'
							Start-Sleep -Seconds 25
							Add-Logs -text 'LOG: 10 seconds reamining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>