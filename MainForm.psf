<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
CYBliqIEALdhJgKk4Q6zb2DwzbsBMDMtPJI3PsXc5ew0RoX8s0Icnzty/lggv9Of323PF+lrKsEN
Zyekpqdiz/b1uO4RIxQjYZI5P74NEgHA08OjY5ieFN0x39/PbGBIeM5/eGj+OwoG2HbxyUmWd4oJ
B/4xCz6SwRli+863YULqsYRRtrxQJrOBoWHxXBEz06LluTiYGB8Vnh6YYPvD88/d2c97qMPC9khK
5Xf2C2ELBs8/Pjl31//w0IDwBAR38IP9PXh19yyMD51A7/iMcLLNHYMB4UkLCVOToicEpMvi7wWQ
3uYZts9cHEnef/D2Y4ArCxIAZGQfZyQAlikfIwD4TXfCPQDitEJtcFCITWemJiI+Ph7JGbnoY05r
cHB+Pv4iG4kAkLwISJlskAmE/t4OpCYkoLKhHaOCiJCd90OM1xkJgO7FacNkZEpg0tf8dxkJgGXK
hwoAyUdUWlpaBAfCL6KKtS50dfdgaJi/4Eb0kpvenm50db2dl28HFyIL5yuH8dcs92CY1cHgQN+i
vHaZ1x0fhVmp8DdJLk4bJiNbnsavM/y6yv++jwggAbBM+RABwBsEbxi898iHkbnz4GnpYdQfS0um
PyT/u9Ly5l+pacn0wvlDQ0OCDQ8Pz0tLT0vbwnzLOS1pu7Lq5VNIS6Z/bP5PpSXT75uH0h+Xlkwv
TL9PHklaMv2+eRSV5n/5NzimpqYEYSyZ92NGAmCZ8jECQDJszHuQmZmZKC4uRmlpqWCKTJeUlKCs
rOzN/HelZeWXleZ/f2r+u9Ly5ud/+TKKyC+ZL9lP6bT0/r8rz7vy87+8/KKiojfr/NA0L+un5stK
8+2QlV+yffyvrPT75PmpNK8Xvk5ustLy5pGVlqxvYfp98kjS/O9ipPk6Fs6X7JusPLLS0vklaf5X
Vvp98kin5c3P//Jl5M3P90eS5vMldfGu9Pvk538XI83XsTDNt+Wn8rwrP0/z+fxvTk4OqqtFT/7w
0QASAErMxwgAPjTPaWxsRH393JvaCIIgiOUJv75zIcAhAaDkKEIA8PsASAAQBEEsf/j9XXw0gEMC
QMlRhABoampCbW2tkCYIgiCWL1wAlJeXC2kSAEqOIgRAc3MzCQCCIAglgD8Vw+8N4JAAUHIoBEAQ
BEFIoBDACuJnHwEY68CF0+dR1S1+7nxmCHcvnYT5wYMwN7fFC9+YN2/K66ovwCl7Sxw8aA6vuEzx
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</Preview>
  <Form>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
ebrwdQR8n6cusqfOsY+Of6q//h9Xwmp0iroCAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
				add-logs -text 'LOG: Done'
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $User to $Group"
						$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Find if user should be added to any mail groups
				add-logs -text 'LOG: Getting checked mail groups'
				$groups = $checkedlistboxDISTROo365groups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Mail Groups found'
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $User to $Group"
						add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
						Add-DistributionGroupMember -Identity "$Group" -Member $User
					}
				}
				Else
				{
					add-logs -text 'LOG: No Mail Groups checked'
				}
				Add-Logs -text 'LOG: Done with Mail Groups'
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $User to $Group"
						$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Find if user should be added to any mail groups
				add-logs -text 'LOG: Getting checked mail groups'
				$groups = $checkedlistboxDISTROo365groups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Mail Groups found'
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $User to $Group"
						add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
						Add-DistributionGroupMember -Identity "$Group" -Member $User
					}
				}
				Else
				{
					add-logs -text 'LOG: No Mail Groups checked'
				}
				Add-Logs -text 'LOG: Done with Mail Groups'
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	$textboxO365EmailAddress.Text = $textboxEmail.text
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	#Address PAge
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" }
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
	}
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>