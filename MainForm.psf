<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text)+($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$gettingStartedToolStripMenuItem_Click={
	Show-GettingStarted_psf
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>