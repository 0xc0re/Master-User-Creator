<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
KACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8o
AERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQ
ok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMo
AIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygA
RFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCi
TygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygA
hBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABE
UygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJP
KABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACE
EKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERT
KACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8o
AERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQ
ok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMo
AIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygA
RFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCi
TygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygA
hBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABE
UygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJP
KABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACE
EKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERT
KACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8o
AERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQ
ok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMo
AIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygA
RFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCi
TygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygA
hBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABE
UygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJP
KABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACE
EKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERT
KACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8o
AERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQ
ok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMo
AIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygA
RFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCi
TygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygA
hBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABE
UygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJP
KABEUygAhBCiTygARFMoAIQQok8oAERTKACEEKJPKABEUygAhBCiTygARFMoAIQQok8oAERTKACE
EKJPKABEUygAhBCiTygARFMoAIQQok8oAERTtBSA9vb2ni5CCCG/loaGBgoA0Q4tBUAOo/Z+hmEY
5u+ntLSUAkC0QysB6OrqQnNzM8MwDPOaaWlpQUdHR89etT8UADIgtBIAQggh2kIBIAOCAkAIIcaE
AkAGBAWAEEKMCQWADAgKACGEGBMKABkQFABCCDEmFAAyICgAhBBiTCgAZEBQAAghxJhQAMiAoAAQ
QogxoQCQAUEBIIQQY0IBIAOCAkAIIcaEAkAGBAWAEEKMCQWADAgKACGEGBMKABkQFABCCDEmFAAy
ICgAhBBiTCgAZEC8rgBUVVWhrKwMlZWVDMMwzCDEvA+mAJDX4nUEQEZucA0NDWKjqlNeMwzDMAOL
3J++currlajtn9VCASD9eN0jAOXlFUhJTUdGRhYyMhmGYZiBJftXJTUtA3l5+a8sARQA0o/XEYCG
hnplw8vNK0JDczvqGloZhmGY10x9o0hDA6qqq1FdXfNKqaisVCRA7o/V9tN9QwEg/XhdAcjPL0Bx
SQVaO4HG1i6GYRjmNdPS1o2mlmbU1NSo7nPVUi2GlUcCeASAvDYDEYCi4nK0dAgBaOlkGIZhXjPN
QgKamikA5A1DAWAYhhncUADIoEABYBiGGdz8kgDIu63khdd9+1MAyIChADAMwwxuXiYAsrjn5+cr
r/tKAAWADBgKAMMwzOBGTQAaGxuRnp4ODw8PxMbGKoW+twRQAMiAoQAwDMMMbvoKgDzsn5WVBR8f
HxQUFCAoKAgJCQlKf/N+mAJABgwFgGEYZnDzMgGQxb9Z9JfP+09LS+MRAGJZKAAMwzCDG7VTALLY
m4t779fmUADIgKEAMAzDDG5edhHgL4UCQAYMBYBhGGZwQwEggwIFgGEYZnBDASCDAgWAYRhmcEMB
IIMCBYBhGGZwQwEggwIFgGEYZnBDASCDAgWAYRhmcEMBIIMCBYBhGGZwQwEggwIFgGEYZnBDASCD
AgWAYRhmcEMBIIMCBYBhGGZwQwEggwIFgGEYZnBDASCDAgWAYRhmcEMBIIMCBYBhGGZwQwEggwIF
gGEYZnBDASCDAgWAYRhmcEMBIIMCBYBhGGZwQwEggwIFgGEYZnBDASCDAgWAYRhmcEMBIIMCBYBh
GGZwQwEggwIFgGEYZnBDASCDAgWAYRhmcEMBIIMCBYBhGGZwQwEggwIFgGEYZnBDASCDAgWAYRhm
cEMBIIMCBYBhGGZwQwEggwIFgGEYZnBDASCDAgWAYRhmcKMmAHV1dUp6d5tfy1AAyIChADAMwwxu
+gqALPYVFRXPJEAWedndez9MASADhgLAMAwzuOkrAI2NjUhOTkZcXBxaWlqQkZGB6Ohose9teLYf
pgCQAUMBYBiGGdz0FQBZ1MvKyhAQEICIiAj4+fmJfW7+C8WeAkAGDAWAYRhmcKN2DYBs7ZeXlyMw
MBB5eXnKUYHe+2EKABkwFACGYZjBjZoAyJiLu1qRpwCQAUMBYBiGGdy8TABk+l79bw4FgAwYCgDD
MMzg5pcE4GWhAJABMxABKCmtRFsX0NzWzTAMw7xmWtuBltZWZf9qvvXv76VW7KMpAGRAvK4A5AkB
yMzKQ1VtAyqr6xmGYZjXTJX8v6oaZWXlKCuveKUUFZciJTVd7I+f3xr4S6EAkH68jgBI+6ysqhIC
kI2srBxkZTMMwzADSy6yf0UyReu/qKiYRwDI6/M6AiAjJaCxsUGxT4ZhGObNRu5/X7X4y1AASD9e
VwAYhmEY44QCQPpBATCl98U1zKtFbT0y2kXtM3gbo7bszMBDASD9oACYUlVVxfzKqK1HRpvI28PU
PoO3Mb/mVjjm1UMBIP141wVAtjji4+MRExOj/M+8Wszriy02bSPXryyK8odg+n4Gb2Pkj9/IbUtK
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</Preview>
  <Form>gSIM15pLM7ICACODCAAAAAAABADtfVmTqkjX7n1F1H8g9sU53/e6uxVx7NPvjsBZywHnsm46EFCpQrAAx19/
MhMtKQuQQTHdXewOu1BIVq581lpPrhz4uzV+FThd+/X4QBB/GyeEvl0I//3R3Wq6MP9zKMq8stb+
LCnq3Pj8SVj99JMYCKomKvJ/E3/G4L+fRH4p6UtV+K8sLHWVlX4SzHIsidyTsO0pb4L833E6zSa5
ZIrMUgkhlsn+IGR2Dp7cYEUZlvmD4GaixKvg0h95RdZVRdJ+IEmBrIyqLARV3+7voZe60uVYSSiI
c0GGcoBLyWz8JwE+/o4erj53d0PhhR+/CgvR3S3iDlzdU5eC68uNB5RVZU3LfHemivLb2XtzLPeW
VyRF/fFrr4azt+QlUZB1Qz4yFksCNcTTmbO3VTlFPmgY/JoTZVbd/qJpOkfTfboIPmm6SFfpnAL/
HEzhL9MR+j1P0yL9RtP1RBGcT6vw0jY9pZ+mbfBzuQCubRRo+vHBKCGv1MD36VmC3h+ohJe1QtO1
F1iCYjwLHPnj7/ujePgDlna5w6E0JhqNrl/BR6YKPqJ5F+ePD/tvyvAbevVxRQmdozsK4COSgOcr
eJ7ewfOM1fnjg/ENhW6GHzP4sYXFRuBlUQE9oQKfgH5Pw3ObA8j26Yhs4ecYPiGmwhLi8DwLz1MT
eJ7/kDneg3++oNtW1qUdDx7esYMyZVPwXELfyvCjDz+m8HcKFpPJwfOqUVri+aOCUataUHVYom5f
P3Sk9m36oWmjFk/omagWr8eL4Z9Z9NgarDAJH5vNwvMIvD4Df8ryRk2HUyt0oCeg5kkxH8WiErjJ
x++oZRropx7SWwSphEZXWJaI9CIdSzwemTT8GKL7DbxtEZ5Q26CPPRqOx1GGAlK6bKW3Dfx4fGhG
P0ttksk4Nx0fv2+QoN3TIg29ZeEzY4UTmRyO4xNRc8Um5tKOB2qbLzLZH8c65Ay9JS1NBdWictoy
Dochm0lqAX4jwhLSsAIRJD9j0uO546tHOrYEalvDl6zclXhVb8nstY90hRx07tPvDfhRWI+A10/k
we8tGlxfmDLg+kQhA0szvllPwDcRJnMoEcWBMrqZNko9xoGaS9kCHvdbGkIHQjD0mHsvvrI/NyzL
6YpjiSZPcHxCzmyFhmzwGwVFknH04O8W8I7Us/vzFbJTFIsiyGnJ8M8tsgHjHH6kkBfvHW3kqIXs
5LNx28csuyOCPmEtoyjeJuETUNzMZE3+zbj2GC9NMlAun2Qv2xLWYoc0jaLfE9I81BMiCaZaRgoH
CSAPOcowQJe5lcRKtvdja7/DbzrwPAarmo2hJ3/EqoiCfocfMdQyhrdCLYd+Z42apq2im8NhSABv
ivDoC1TrV0NvqZOLkWIMz4swskGqOPpgJFMLfiB0RdfHmrqUQXQj86fSqKOFnsZXxBAjRn0O0kfT
J4Xt8faG7kBcCMWqGTxPIA6AuFPkGNbQExDbSqDrI04+5ESmOIJS4kQGEn4MTiPPHm+F6FdEZlGt
3Hm1owSPD0XEVCq2mkU2sU5/ksGQwOAER6vM7lvBbJeWxwnTGRzR8+k4tqnBbKjPejNKQEwaGUYW
ymiwVisJvsZTM2tVHNj8x5F8NenNVAJSXhnWYoOU2fSohbpR0/XXJ3490vLHE+0K9hABjzK0YInb
ydcHWthpGqGh5iSDB9mOMrRhiTs33goR1oPevMpgJwEsba8HNzIgr5F5spPAIw857ZG4i6cJGCq/
9hfOHU6yHe0SVS2zs1UA6sgAyCC9earsOdlOPOQW+VT0OAkaWBIynewSniNDcODm98st/12lfbQ1
9JgNDn5VgR855EE505WFfWmovZlEZbYG3ZsEBzo3rQrNTAvgPEFPMnSEroASp7noxzkDzgFU1oVI
zoSuj3hKP8ESUe9n37WC+bX9UaTdHffdCt+l/btKgzaAqGwCBrNI04gyrzD2JCj0TZBzlH87vcJI
YB15LerjiCYZ4J+NVdSSvyGmvLUNSB4OL/3TiJFhRtlbIwF5/A1xTs6Gh6Duy5VkQ/0DFBIzqM+M
WOwG6jkOo6Ph33qGf4uqx/ugZkkTmz9Bg3209yDb1yOLZEKcJo/6E4jF1ozSch/5jixK3UZOuDhK
G39h0uh61DJxJpBsFgdp6G2Dev5ILyUo0waxLQ6eI7Zv9NxOeo9GLx0JtkF6FgzZKkeGh65QVx91
83x8qSnK9pfQE5CVIWAkUNIAIRb145NRC3Ejhp1Gp/AEXZs9lmhipYgM9qDMadSMp/1Ve9m+HiiF
lEFPQBrM2OdL3LZp+7PVmXqXhY/xhmjRKC1i0ctxOkiUeUcyI6TtbPLk7o+shS+24L0bxHtH8FxF
vgQ9Pnmm8KYhWxH+D9mZ4b9QRsXI8M3RT6gWJs2jruv44/cF/EAZv8jUC39DdUBPrKGsZOGLgEe9
IX2itjGNgH3JjCJLb8Fzk2dAKB1GTfzNdEf1nLhWaJEM2cgzmYA35K0QGuy1EEN+NGVGCNR0lkVX
+Dr2/dPjMxKuYIxcf8tiBOMz3nrMx8XGgaxGtayl1eHYr0fhPe5GWnREhuY8uVWJWRTyjMyToWn4
MbTJuJxD72k+DmWibOO2hdWjzJNRS3O5HyVuUHYWabiP9IqeyBmluVKvtV4R4hcmGLjzSMiKUAwK
YzzroAVop8j7nGaQXR2jEyxcj0Uf0ZBHjumr/zp3wFbIIh96adksjiMaEHfanMlc2SAkbuSRLiyb
xYG0gmRGdltyIZvFwVn0D4LL9vUw58kRb037GdnJIodyadksSzvhPqKbrLbpSKOaRnfu/b4H2eyO
o8woo0c5IPjLvBrEWvPnMu3+ZbM4UFueRKLYvp9lqW4E9AWKA+mPlrmObPalfZYa0Txj3IWCH8ZM
nPHqIO0+q+0znnqV7bu079LwLs2aA4Af8o8PBWghU+gtqwz8Bp5X95NokPEwqATkToE1iXkmQjPA
b00LoH++poUC8AiVaTRC55APmcLx+wRdiRrfmM6j6HwNzyPHKUpWxxalrddGTUdIEjgndH/kTX3l
K+vtu7Tv0r5L+y7tu7TfqTTEe1Hi+nmCYhaJclv84Zsg548PQUswnxu89/mUe6M5BWOrO1CuHuVo
1qjz76g3xApMKTOUWTfyRqvz51A2b3c4nYPSzlyBsj7kcf2Cket6tbp+389CCwe25+Y9Iy28Rx2O
y43LBC8NVZVEGWbzPK645Ux9dCSOM2HPaUHGpaZGnhx18j6GdGBpx5Q/mj24zwHCz7NaQFgw9GZl
C5/0MPUq77X09ooynWh9DBoO6aDcfO/jHE042xzHS6208Fk2NOyFpoedQ4MximIv2yUOd6W9uMyP
HOeTn0ODMTfbegzEXBryHQq8Y+0xE+Wvpk7Hi2mliYfxrPirbYlJ5Bl6Z+e/mWbUoRwiKjF7vZo6
l/ZysroAyUShEQo0siigc/njHIXIdMFBtgyak4dWE6ASDS+D4ilyMxO0Iuwk8myejTw58kZxU+y5
XE2djlMtDI5jST5KO3eYSoskjsA4mfNZ+5g/HnUc2rucbC8T8/w3+M2pHrweLmUza8HK6ozVV4v9
fCR0h70dBpftHBq8leb6MGnBKZ7urQaJhEbQEEt1GkbzJ5udFq4es2zQYI+O4xyDx4cW/CaJ/BMa
Xfcx4epEtlM9oLFxw18bE9XQouD6yflX73WsqUHAx/YlwI9sw7H29jHrqBfEz5DvGMLPJEIwGk85
nfNi16bIytAMErSuyDyP5mMmtjHSXT0yQtEoDaUjKfsRMlTLHVrFMTst4Xh+jXFn1GNFS7MybngI
os/Z46w/1+POH3c4sAbUq9r3RsPo13/ItDGm37moPzoOCImgZSkFFyOuX7UgfyntVA/R6LXHnU9m
d1DG1BGrmjoeiAsZMxGde8RH2az04FULl0KIIfPeTpE/s1/xde5AgNgwLtd9uNUCnG9prwevh+N8
JCSTscWCO6ZjjRA0HY+cfJToVgv2eEO+06MWfK8zasHnrE78oc9Yn0L+rHqqBYf19aQRpqKHP/cJ
RfixRDbxdQ7CBb2lOS4g7u0qLjgce72hxdOZzakebLVgzINGWjBmGKNcxH7+mzGD81yu4fxxJi4Y
Wjg3q/S0pmePrHROC/ayXbamTsdnLURGfmrqdFitE79NTZ1LO+oBxkdjVwC/h5XeIu7WxIZQU6df
jzKi6dbq13qcr6nTYUzgxn1ezVFGlNNZ+6mpoxb6LteJX72mzqUdZUSz4n0lRZz0FuG8auEWCDnR
Aumnpk6Hkdg5neuNiy0cDrMW0Lo2/ykyG70Ze0p82akq9Jo6l3bUg/c44QYh7uPELRFylBFxpy8b
NwTxlhBYxrg0DjV1UdqxR4FGvNyv8/h6mPSG+qfGGglsaup0nPQuORTp7Xu85xGCVrfEmaib3iVe
CDGtoDBqmkAuPuYRDMiq0NiRsWvPRWT7fISaf0OrX4ydhDSUxjcWE0Y//nz9OE8Y/YUUJKBGoiaH
eVxwdZzYSH4/iozySGiksIPG61EfGKXTq6jWpvH568n2Xdp3ad+lfZf2Xdp3aQFKO6wUMfZXNXiM
wQGM+GX9+5ENHsoZFQ453xzawxUdZdrxdyZi/I5ki8JdX9GiD2NfV7QWxRhhhnuFG0tTaGb68Xt0
+vE7/HP/exSu/T9cEU3QE/SMAhTUeAIDqgJuYFAtp3Rl/3uEpif73+Ev+9+hbIX9FYYGPq4w9BQx
NAQ/E8ffpza/V/YjUOiKyZcrLJ8AZdz/HkE3fdRhn6E9cg1/bXn4HbZCvtYvJiuFtsLm0ZIcstYt
drr0YYOpNl1FfzAv6VErBv5Qlt1+JzeovLJpnsyypbRU5iabNPVWfXyoPrel2dO2H6v0JalWrz09
lYvqalbR54OW3ByL4rzJL8ihPEzx2lZKxnK54mK07kWLtUpOKdPyelxM8oNCv9cplB4fxqo6LHWk
gqY/JdV3nX9iU73evPm83IgThp9E2Ce9Nk9yci+TSJLUcyvyTEV2nL6jhEmEmQjJHUUJ7WIH/Xt8
6BTd/au+vWfycZEnB7NSJb5KlPP6qCcKPN+s5TZrIRpr0f3Hh2JyN6+Vs9upziXXs6mc13fTXq6z
Fkixybynpxy5edqt61G9Uexk1RaT3M266ypbH7G6vmGSohgdRtJjZjweDZKPD82YyL5E4vHYc1JP
b+OpzC4ak1/JJU2Od+OF3NhmF5oYjZEbNjVpzUaZl1HjqT3Mlwv8627+3IvMtkyumlX4XHnIPz5k
3wvZZpZZMpHlhFeWpJDmh/V5PpudV1vyc3QYjawXw0iFH63m9GjExLPZbSqa2kbjbC6e65ZGu/GY
je8kapWUXx4fVpHNU4fL8yN+wk422xSV2WlU+qVWfM5J8dxz/FViKHkTK81m7Vwn+yJHqYI2eW3t
yEism06R7SH/oq+oyRJ+9/hQSu3GQmz1Vs1OWdCUCXrECIN2/rnB7sh2m4u/tLKpSVRmBE4or+p8
OTkQn6NcOU2lJqNB4plvP+VmuyWdqq+Gy8eHkbKoxwdqREmUaDL2POqu2M1WXT6x7fQmInQT/Kby
kn9t5IdVcpWL6JFUuTmOcwLwIaVpjl9musnXXO+ll8mVym1gC7lXbv2mrp7mL+v8C/g1Mxu+0fn1
a2uZBVeWCuNxf5loa522TBcrlFDjNiLTZoTasL3o0Hltmlxm2ORskNsJACFCP7bu6M1UW9xFd6DE
9YSblIoiePSmLFFcjSNnBZHLNHNTkdafWyS/JnfsvFXg1/JLvkPTraVM1edFQd6qq8eHej6XX1Oq
AgSZVd41Jc2WpjO6EItFXvj16yb11CKT6/Y0JxailfT7uLdMdLUO/Up30rH6vMl1JXn+/FbrV+nB
q/j48Nyne9VFSu5W+/lYbqfTr7X+rKZtS6P8UyQxo+iB1KFri96sVH6vCYmcBtxC86lYzSS7w0g5
mtFXtSWVr68LMXrz+NCrTI2yh7NEKUsXc11a7b7EdtRrP6a0p7PxSErTtCo+C5m89l6lm0Xutd0Y
NIWZ0C61h9PWMJssJelBjqWBLSyAxNvie5HOdWaJDTvbLF6K+WKBXyboealVauvA/dASXZxPO/Mn
Jr1uvb/RLy0pm17X5wOeS7Xr/QVdgz/tho8P+V2pM+7Pi3StE59JsWKxXW1TMYDU97dhpz2jo60y
qRdaIGxV2nUNPJLO9yOMNnhOtGmZqS6VhiLmivTr9KkB/BvN09VEfpanW7UJx4NW2E4H1XZh87qu
xRrirLfI1KKr7aiulcYdZTrNvVe5aJVd0y/5RYRuJJVSMi91ORaiCcSFebvWGJSWb3Sh9zp4qvHt
6mjeapVAe25bQkdoy206122ps2a0oFLTwVsNuN9pIZsu7fJybipAfLZe6XxjNkjUAN6qrVdKhFeN
6NdVa86vpV0r955avg2fiqPcZqNu6vNGc1SU4/xoVgJ4yr8k6OdVeT4eJOqTA4rpl0wLWJbeoaQS
eIQ2awNdT5JvALFadlZ/5zNCJd+nF9QrB2zhhZxIgyIw5xe+DEvMLXby4pnrN57FFVVQcnQ9roE2
3clNDrjoYuc51aO65Sk/fpptBDIqA0XGt+Paa4lcpElNG5PLspqIkxN5md6MF+UYtawPX3I8iGPp
dSpWXjU2uceH9OZpWxLf6ER0110mOovUai0+CSRJt7hSHhjsMtbiy4V0o7KE8nMKMPeNvBotR6PF
iOM21XeafuM7iRaXrCQeH7qdxCrR36Wr78U8ndtN+WxCkustOZpr0vmcQCfpNTNLT+Ojar2TkRKV
VmkIImguLTSH6RxgO3Vq+QzcWYLuzOTHB7KuFVOvW27Q6g7JZ9h+uVo2tlxv5NehsFu91QZr0IZ8
Yr163pUT63mxn228dGtTulYtK6kkaNfIJk5p42Seh6ymWigwrXE83ibjmdGYymkzZgulf2aTK5Z5
bRSz/VG7oqxqMFonUrt2g2VK9WU3Qy9LhTbdfYnz9TlDV5+TwBYWQjYah4E9KiXTi+jLqCyQq1Uk
RycL/fiLnK705quMJBrfrWku8V7imHikW9ly0moqaS9KsfBW6I02QpF7fGCoHCON0tHdWuPoFiB7
kZf4WM5zkcwiU4jktPaUm077k5d5tlVhBu+DDBXtzdoJutZitG1r0NHeo5t24bkVJTMKQC9A3mqy
jmUykdGo2n6lphRZ7CVADah0ZMiUK+mnMTXop6MFbTUBZgCaer2YRrqtTL5Va7xL7/U3tQ3KkKKz
zuPDyzSrVoZcYjtpThvJGUTmIkPmyrXEq8o0cjtqSe0G1Sndrjyxy10r2X/WGCYlz9NMJDOdtum3
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
M7ICAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxhidefromGAL.SelectedIndex = 1
	$comboboxO365HidefromGAL.SelectedIndex = 1
	
	$Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
	
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False

	$Netbiosname = (Get-ADDomain).NetBIOSName
	$textboxUPNDomain.Text = $Netbiosname + "\"
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$Forest = Get-ADForest
	$UPNs = @()
	$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
	If ($extraUPNs -ne $Null)
	{
		foreach ($extraUPN in $extraUPNs)
		{
			$UPNs += "@" + $extraUPN
		}
	}
	$UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)
	Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
	$comboboxDomains.SelectedIndex = 0
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					add-logs -text "LOG: Proxy list is empty"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					add-logs -text "LOG: Proxy list is empty"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		#If user UPN is not entered display a error message
		If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
		{
			
			$InfoMessage = "Please enter a UserPrincipalName as it's required"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		#If user logon name is not entered display a error message
		If (((($textboxSamAccount.Text | Measure-Object -Character).Characters) -lt 1) -or ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1))
		{
			$InfoMessage = "An Active Directory logon name (pre-windows 2000) and Office 365 UserPrincipalName are required"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365Initials.Text = $textboxInitials.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365pobox.Text = $textboxPOBox.text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
	{
		$labelo365password.ForeColor = 'Red'
		$labelo365password.Text = "Passwords do not match!"
	}
	Else
	{
		$labelo365password.ForeColor = 'Green'
		$labelo365password.Text = "Passwords match!"
	}
	
}

$buttonConnectToOffice365_Click = {
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		If ($credential -eq $Null)
		{
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			Import-PSSession $exchangeSession -AllowClobber
		}
	}
	Else
	{
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		
		
		add-logs -text 'LOG: Loading Office 365 Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text

	
}

$tooltip1_Popup=[System.Windows.Forms.PopupEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PopupEventArgs]
	#TODO: Place custom script here
	
}

$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={

	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxConfigureOffice365Us_CheckedChanged = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		$groupboxNoAdSync.Enabled = $true
		If (!($ADSyncModule))
		{
			
			$groupboxADSync.Enabled = $False
			
		}
		Else
		{
			$groupboxADSync.Enabled = $True
		}
	}
	Else
	{
		$groupboxNoAdSync.Enabled = $false
		$groupboxADSync.Enabled = $False
	}
}



$checkboxconfigo365user_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) -or ($checkboxconfigo365user.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
		If (!($ADSyncModule))
		{
			
			$groupboxADSync.Enabled = $False
		}
		Else
		{
			$groupboxADSync.Enabled = $True
		}
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
		$groupboxNoAdSync.Enabled = $false
		$groupboxADSync.Enabled = $False	
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) -or ($checkboxconfigo365user.Checked -eq $true))
	{
		$tabcontrolUserProperties.Enabled = $true
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click={
	$console.Text | clip
	
}

$clearLogToolStripMenuItem_Click={
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click={
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}




]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>