<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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
s69NOZte1+b9sZBq1XoLtgpv7QaPD/ldqT3qzYtstU3N5ESx2Kq06ARA6sf7oN2asfFmmTQKTWC2
nlo1HbySzfdinN5/YVqswlWWal2VckX2bfpcB/qNHbMVJj/Ls83qRBiDXthO+5VWYfO2ribq0qy7
yFTjq+2wppdGbXU6zX1UhHiFX7Ov+UWMrSfVUjIvdwQeognYhXmrWu+Xlu9sofvWf66OW5XhvNks
gf7cNsW22FJabK7T1GaNeEGjp/33KlC/00I2XdrlldxUhPhsvrH5+qzPVAHeKs03WoJPDdm3VXM+
Xsu7Zu4jtXwfPBeHuc1G29Tm9cawqFDj4awE8JR/ZdiXVXk+6jO1yQHF7GumCSTLaNNyCbxCn7UA
ryfJd4BYPTurfYwz4lO+xy7oNwHIwis5kftFIM6v4zKsMbfYKYsXoVd/kVZ0Qc2xNUoHfbpTGgJQ
0cX2S6pLd8rT8eh5thHJuAIYSW1H1bcSuUiTuj4il2WNociJskxvRotygl7WBq+5MbBj6XUqUV7V
N7nHh/TmeVuS3lkmvussmfYitVpLzyJJsk2hlAcCu0w0x+VCuv60hPQLKhD3jbIaLofDxVAQNpUP
ln0ft5mmkHxiHh86bWbF9Hbpykcxz+Z203GWkZVaU4nnGmw+J7JJds3N0lNqWKm1MzLz1CwNgAXN
pcXGIJ0D3k6NXr4Adcaw7Zny+EDW9GLqbSv0m50B+QL7L1fNJpbrjfI2EHer92p/DfpwzKxXL7sy
s54Xe9n6a6c6ZauVsppKgn6NbShaHyXzY+jVVAoFrjmiqBZJZYYjOqfPuC2k/oVPrnjurV7M9oat
J3VVhdaaSe1adZ4r1ZadDLssFVps55Ua1+YcW3lJAllYiNk4BQ17XE6mF/HXYVkkV6tYjk0WetSr
kn7qzlcZWTKvrVmB+SgJHBXrPG0FeTWV9Ve1WHgvdIcbsSg8PnB0jpOH6fhurQtsEzh7sVdqpOSF
WGaRKcRyemsqTKe9yes823zi+h/9DB3vzloMW21y+rbZb+sf8U2r8NKMkxkVoBcgbzVZJzKZ2HBY
ab3RU5osdhnQAjodG3Dlp/TziO730vGCvpoAMQBdvV5MY51mJt+s1j/kj9q71gJ1yPFZ+/HhdZrV
ngYCs500pvXkDCJzkSFz5SrzpnH13I5e0rt+Zcq2np755a6Z7L3oHJdS5mkulplOW+z7khPmcbUr
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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxhidefromGAL.SelectedIndex = 1
	$comboboxO365HidefromGAL.SelectedIndex = 1
	
	$Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
	
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False

	$Netbiosname = (Get-ADDomain).NetBIOSName
	$textboxUPNDomain.Text = $Netbiosname + "\"
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$Forest = Get-ADForest
	$UPNs = @()
	$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
	If ($extraUPNs -ne $Null)
	{
		foreach ($extraUPN in $extraUPNs)
		{
			$UPNs += "@" + $extraUPN
		}
	}
	$UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)
	Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
	$comboboxDomains.SelectedIndex = 0
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Grous'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false
				
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365pobox.Text = $textboxPOBox.text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		If ($credential -eq $Null)
		{
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		
		
		add-logs -text 'LOG: Loading Office 365 Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 1
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text

	
}

$tooltip1_Popup=[System.Windows.Forms.PopupEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PopupEventArgs]
	#TODO: Place custom script here
	
}

$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) -or ($checkboxconfigo365user.Checked -eq $true))
	{
		#$groupboxNoAdSync.Enabled = $true
		Import-Module ADSync
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" }
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling user creation'
			$groupboxNoAdSync.Enabled = $true
		}
	}
	Else
	{
		$groupboxNoAdSync.Enabled = $false
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) -or ($checkboxconfigo365user.Checked -eq $true))
	{
		$tabcontrolUserProperties.Enabled = $true
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click={
	$console.Text | clip
	
}

$clearLogToolStripMenuItem_Click={
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	
}

$linklabelGitHubProject_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
	
	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>