<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAK7rSURBVHhe7P1neFRJvu6Jnk/3w5w7M+e5d2af
Pfs8Z5/t2ndVdXVX1a7qshSF90KAvAFZEJKQQCA8woMAIbyEkwN577333nvvvZSpNHLvRKzMxGZV
F7SgZP4/nhflchGxYsVa/zeW/S8EQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRDzmEO///1vQy5cuhpy
4+bdkKvXb5NIJNKSlst70PvKh+t95HX7jnvI/v0OIf/1v/5vIcrYQsx3fv3rXyf4hcahom0EFa3D
KG8ZIpFIpCWrirZhlDYPorihH8WNA+9A/ShpGkAlO+aWs2MuH1Y/3xyIrQNfJ55XadO7Xacylk9V
+zCOnTwNZXgh5jsXLl0JqWofQ2pJM1KLm9hfEolEWppKK21GbHY1AmPzEJJQiOD4d6ECIf3ojAqE
JZcgKK5AzTxzpQKEJBYhJrNKyFP9PH+/eF3x9BPyG5BX0UQGYKFw+45bSE3nONJLW5BRplBWZTsK
6vuQX9eLzPLWZ+NJJBJpMSubHfvCU0oRn12FjPIWdlxsfidKKahDQEw+wpOLkfUO88mubEMkWx//
6Dwk5tYggx3n05nReVFpavRsOusUvjivSq/Nz/JKzqtjdVeOgqoWMgALhRs37wgGIKOsVQj2OdWd
SCtuxP0nYfAKiWMNqANZFW3CNBKJRFrMyqnqQGRauSJYlrexwMaD81yrFalFjULPOTK1TDi+qp/v
7xc3NDHpFcJZhuT8OmGccLZXqTSVip//fjZdOe7F+V+a9sIyXCkFDYhKr0Q+nQFYOLxoALIr2oUG
s9NsD37z61/h97//HU5dvI7Chn61O8tzqTMIC9k0sLLPC9OjLIdKb1CnWcptqW4aiURSL5UBSMqt
ZT3zdtZjbn0HakNaUZNgAKJYXjmsk5VZxvZtNcquYB2w8g4WuLlJeF2ZbBqfR92yXLlVnYjJqEAg
MwCpBfWC2eDH+ufiw4px2ZWs88fTZcM5VV0sbf63E+lsmTQ2PYuV88X5M5US0mHzclNDBmCBwQ1A
bZdI2Nj5tT2sQRbj8y++wIcffoDf/ubX2Kali9ya7mdnAtSKBRrFb9ZI2E6kCj6vzadGfKfLZo1M
FazUzfNepCx3TjVv+C1sJ20WhtXO+xMS1oHVVXYVW5b95mm97XplljUL5eDLZ/DfTOrme02sLtOL
a5njZwexn7kdSCQSC5jVnSyIvScDkFD0kwYgiwX2ZNar9g1JhG9wPPxCE14WG/c0OAEJOTU/agK4
AYjNqEQQMxs/ZQD4cSIgKgOBYUnwCYiGR2Ai8uv68CQ8DV5+UQgIS4RfRNqz+X/MAERnVKGgspkM
wELhRQNQxHr6PqHx+NNHH+HPf/4YH37wR/ywchVSCuuRV9P10o7CxYNlQmoaPJ+GMpeoCOI8+OVU
NOKpnz8iWcPjOxRvXNxAvGgKVMPccSfnliGF7RA5PGgK0142EKph1Th+mSI5Mw/BMVlCGYRypGUi
NCFP+K3KT7X8a/kr03o2LIxj5a5sRVRCMnyDIvDEPwTBcTnIUpqTF+d9dV2epc+nsfVJK6xCYl4t
8mq7EJOSjpjMSsFJK4zRq/WgKsvLBiunugOxSel4GhgK7yf+8PEPRWA02wHZjs7zeCl/JlUa/Jpf
DttW8cmp8A9PRU5t90vzkUikH9d8MgC5rBfuH52DvPxizM7O4DXYuNqaOjwJS0Nedc+PpPHzDADv
hN3zCEFHWztPGHEJaTh12R2hEYmYmZ7C0OAgrt3yQEox75CwemHLkgFYBLx6BiAyrQjffPsdPvro
Q/zh97+Dtr6REBwLWUCqqmlFLgsw/HQ0b0g5Nd2IS0zCvbtuiEivYDsPD8bdSErPgpv7A0Swxs2D
YGZZE1IL69gyimDHg356cR34zSM86AYGBSE0qYjlozAVGSUNSC1uEBolP6sgnP5mafAbTYR82TyJ
qRnwDU0RysAVm5iIgMh05DLXmsV6yjw/3jiFswssjdTCWpYOy5vlr+iRt7IyND5fF7Z+kdGx8AtL
QVop67Wz/FIK2DLK3ntGSaPQyPl8aUX8WlqzsB48+D9bP1ZP3JxEREcJbplPyyhtYjtIi6IcbP14
OdJZuQRDIJwhUKxbahFf35dNgJB3eSMCg0MRm6PYeXn66SX1yvl5/SjGCeUV6rgDeXXdiE9JQwAr
AxkAEunnS2EAKpCcV8/2V7ZfsWCnTsIpctbp+THx6dxAqFs2k+2j6SXNggGIZnnlCccCZuhfEQ/q
/M763LwiIdjnF5YiNT0HaRl5yMophFwuR1VVLZ6Gp7Njd++PpNGF2MwqhQEoZMcM4fjHjy0viq9P
J+KZ6bnp5ouurh7BX9TU1At/R0fHcPmaG3xYh4If4xXrwepLKeE3O7by4zkZgAUGNwB13WJhI3ID
0DAwhWNnnYV7ALgJ8AyKQVO3CB75ndgS2Y+gImYGqhQ9zlw2f2wi62mGRMI/LAGZVT2sMbcgJDya
9aLDmQFgpqCyCWEx8Qhi4wIjU4UedWwSWyYoEkEx6cxpl8HLywNe/hFIZg4yKTuPpRcF/9AIRKSW
ILeiCQEh4fANDGfmpBS5rHfLL0kkpmfCP4I1SFYGrvikFATF5iCztAaBoWx5lkZsdg1yKhoQHBGN
gDA2jrnZTLZT8/yfBIQgIDwJGTxo8x2wuBJPA8KQXtHNGjnvSXewfHqQll/K8g6FX1AUEgvqEMPy
8Q+Jhh/LI54dJHJYgFatX1B0OtuxG+Dn9xSPvAPYDlWJyNgkRLMdMKeiHkFhEQgIjWb5RAgBPaei
Dn7+wQiMSoRvQCCC43NYMO8S6lbVo8+takVweCQSClrY9ulETGIK/IIjWHnCERiTzQJ8L1LYwcA/
OJzVUxSehsQjrYIZpLQMZgC4Iep5IT0SifRT4mc6BQOQ36AI4ixYvyreyYlMKWHHKNbpCE9mSnlJ
fiGJCI3PYwZd/fJZ7BjE78YPSSxWGAC2z6ubL6+mlwXufGRk5mF0eAh3HgYiMqMaMdl1uPkwGB3t
7Sgrq4RvRIZwul59GqxzxI4/3GwoDAAfz00IC9zPxMwCUz473qUUNePqTU/09fUJwX9sbAyXrrrB
NzoLBfW9wryq+VXiwzxdbmqiM6tZfCADsGBQGYCCul4kswB39sotrF67QQj+f/r4Y+jpGyIuJBSX
s7rxX+6L4VnQheaGVhbomWvkBiA+CWGJeQiLikVMLuu5Z+cKgTAyLhFhKWWsUXUgMauYBc50eD3x
Q1JBAwIC/RGWWiacqs6v7UJoRCSiWKPOY0HyiV8Aa0SVSM0thNfTENarrcGTp/6Iy2sQ3DnfSXlg
TkzPYAE97ZkBSGBBPZjtdHy8d0CUENjz63tYb5wFa7ZTZpQyIxASgtBkVpb4OPiGs94xS4enx4Nu
el4x26Hjkc12On6WQDG+G2m5BfB8Eoz0yh6kZuXC2z9MMCqxiUnwCYwVet/P188XSSXMSSclIygh
H0VNfQhlxiOK7YAx8fGsfLmsTAMszUI8DY5jO0yNcHo/qZTlVVqNp/4hSC3jhkRxiv9FA5BYxHY0
1gN4GhjB1o3VW00bApkxis2qQFBoGKufeuHRzej4BOGgkZyRTQaARHpD/RwDkF3VLVwX7+7swEB/
P1PfSxpk8g2MRkoxf6San6V7JQ1uAEqeGwDeq35tHqY8Zu6D4guQlJzB0u2F++MA+IQk42lYKu48
8EdbWysKCoqYAcicEwPAYwC/5HD/sS/q6+qYwWhDc3MTHnv6wTM4iR27/oYBKCYDsODgBqB5QI7o
jFKsWrsOv/6Pf8eHH3yATz75BH/54HfYZHMKnz2qwQf+/fgvHuP4z+BBrIsYQGBRJ0rqWeOKT0QI
a1xpeUXwD1P0hBMLmhAVG4eIdBbIs1iPPiwRCdkl8AsMQjzryWaX1ip65ZGprOF0MgMQwcxDI3KK
K+Dl8xQhcemsV52MsIQcpBdVscDMgqVwWk2xk/JT/smZOSzdZOQ1DKCAKS6RBd04FmDrWJmSM+Eb
zHrNuTUsAIfiKVs+PC4VIdHJQi+emxN+p29eLb+5kaVZxYxFaQ3rmYcipaxTOBPCzzLksZ0qNaeA
GY0U5DcOssCeBC/fYITHpyM0hvXs00uRmJH70volFrez+RIRnFjIDEA/wlh9RGdWIJytbywzMYX1
/cw8NbAeewxSCirgHxSNDGY0+JmOoNBIpHAzoM4AFHcghQf1yDShLIWN/ayOE1lZshAYGsPS6GUG
YICVNw+BURlIIgNAIr2xuAHgL+jhN9/9+BmAHjzyDkNtdbUQIJuaGl9SW0sTPJ4wM1/Cbwj+EQPw
yhkAfhPfq+Kn9YPi8hGfkILhoQE0NzWhprqKqRqNDQ0YHOhHNuuUPA3PYMG7T30aKgMQz47RrOPC
z3YKJuAF8eF8diwMjMlhx99A9HZ3orysAhcv30Rubj4zNL3w9Q+FNzMfeezYyOd/UcKlT5ZuBp0B
WHjw9/93iQCHY6fxP//H/yPcAPjxx39i+hh/+f2voH3eA/8rBvg/fEaZARjDf/MexT88GYFXYTcq
m3oRExePwNgcFLPerr+vNzwC4lDYNIiwyAhEZFQhLiEe/ixopbNg5+XzBPEsCKbmVyKNDT/1DURy
cSsi2LzC6ezyRhYEw5kDL0NqAb+RrgbZZbXwDWI9+ooutqMoesc8OOeW17NG6Y/wlEIk5ZQIp/QT
mPHILKlFSmEtImNiERidzQJ0JguayUgtqkdidimy2PIRMcwQpJaxnaZHSI8rn/2OZSbiCcsrIbtM
6NXHsd41NwB+zGjk1w8io6AUfkEsGOfXCjcu8reGRcfFPV8/bx8klnQiMYWlw3r4/H6BsLBIRGVU
M8OSydKOEc6yRMYmICA6E9nlNXjiG86Cd4/w6Ix/UBgzIMy1swOColysp1/Ne/qhSChiB6eKOrbO
wUL9JGcXCWcD+OM54ZFRCIrJYg6/WjgrEJ1dg+T0DFbuVOQ39D1bRxKJ9NPigZDftPtTBoCfgXzs
G4XoqFgkJCQjPv5lJbBO0SPvEGSUv76sIKUBCE0qQUxG5Y8bAJYPf0+A95MgpKSkISkpFUnJSrHf
yclp8BNuVs5DQe2PG4C4rCrWSSsWbjxUnEV9WTlMvPd/52EAYqJjWdopOHvpJu54RcDVzQex7HiV
lJSMazcfIZOZJB7s+Y2LvL4UNyTz3woDEJNVg8JqehHQguHG7bshneOzOOt8E99+twxffPFX/OUv
f8Gf/vQnfPjhh1i+YiVMjQyhfy8O/8V7Eu4Fvahs6GYNphtFLLik55WwnnY1ipuHWBAsR3JhPUpY
zzc5uxDJrMEV1rSwgJuAyMRsxKblsR2gDfGpaQiOjEd8djmKWG82u7gSIRFxQjDLr6hHeHQCgqOS
EM968IW17YjLKBKcZyHLk+eryJu53+Iq4dJDYARLK7eWmZAhZBaVISQylvWMM4SefXFDDxJSMoT8
whNzhHRSc0uYSWhkabBe87M0e1Dc2CdcT+fLB0fGsTSrWc+8nu1AZazn3sfKytY3t5hNj0dITKrw
zGwBa+zP1y+X7SBdzAE3ITwqjhmFaqRkFwtPOJQwg5SUlo1gVtaIpBzkMndfUN2M2NQC5LGdr7C2
A/EZ+ciu7mbr2fOsTEV1XczE5IPfWFTM6lWxzjz/ZJYuWwdmtgqqW5kRSWZlTkBsFqtTNi6zsBzx
meUoZGV+vo4kEumnxI8BcdnMsOfX/6gB4OOFx/MiMwX5RWa9JN4jj8+p+dHluQFIL2kR3jgYy8zG
jxkALh6cw5KK4MvS9BPyei5+7T84Ll+42S+HHR/ULa8wANUsjVLhDMCPGQBeBv44oXdwMh75xyEs
pYgd0weRUtwonP5/HBCPsMQC1qlhZeVmSY0B4PcAxOfUoaS2jQzAQoGfAWgdmkRpy6DQw45jvd/g
uAzWuBJZI0tmPXPWu80swO2cLvwqYAyB5f2oa+kTdhSuEtZISpsHWKDtffabB9bSliGUsoBV3DSA
stZhpiFB3BzwacI4lmdxo2I5PsynlbDlFfMPs/kUH5ngZVPl96JUy6lLi4unJ3ykQjUPz1+5XGkz
n/Z6ms/KxiTkz8r/Yv4vThfSf2392Hx8HP/4BlsXvqwqr1Llcs/mU35A48W0eflUwy+NF+Z/eZ2F
emfr/LwMTMr0hHX8kXojkUjqVd46yDo0/B0aP24A+HVvPo1fd/8x8fuHFNfI1SzPAi43APwyZCzr
nf+UAeDilwL4KX61YtOEQK5mOS5uAOKZoYlILRMe0+P3G6gzADyg80ufRQ38+N3P1oGly4I7v+ma
X7bk4/hZAuFy6U8YgMS8BpTVd5ABWChwA9A+Mi0Ei8r2EVR3jaO2ZwJ1vRJBtT1iVHeOCUGriAdD
HqDZvCQSibTYVNUxgiQW/NOKmoUAm1fTM/fiQZuZA36zIe91Fza8o3yYilgnIym3TjAbWWVtwjAP
5PyOfoWYiXjpt9JYqH7z8c/mf3l8IZuvUDmNm4QcZjiSChpR3tBJBmChINwDMD4rfALzp1TJVNOu
+KtuOolEIi101XSNsZ5yE5Jy6pDPesu5rHc818qr6kI6yyMuqwbxTPw9AOrmmwvxdYjPqhbySmHG
5sfXifX2f3SY/1Y3/fl4vk6pLPinFrWgsqmbDMBCQWEAgIr2MVTOQ/FykeabRklvqjbSQhA/5pQ2
D7OebJNwOjspv3HOlZjH1YCSpiHkVHUjIbde7XxzIZ42/15AWcvzdUpk499IQnn/lli6TOVt4yhv
6CIDsFC4zgzAmBzoHBhDR//PV+f70sD4olDX+9Kg6J2rezFpSPxe1PM+NDyxaNT7PjQiUau+UQkG
RfI50uSPqn9UioFxGQbF6qfPlQbG5WydpGqnvYmGWDn/loYnplHVRAZgwXD1xp2QaQBi0RjGx0Z/
tkTjY+9FYtH4otCEWPReJJkQv3PJJBOLRnKZ5L1oUi5955qalC8aTU9NvnPxd9y/a83OTC8asf/+
thj1LXQJYMHADcAk22jjLNiOjo7+bPFXRL4PjY+PLwqJRKL3IrFY/M41MTGxaCSRSN6LpFLpO5dM
Jls04u+5f9eanJx855qamlo0mp6e/pvi1JEBWDiQAXg/Uhes34XUBey5lrpAulClLli/C6kL2HMt
dYF0oUpdwJ5rqQvYcy11gXShSl3Af1VkABYYb2YAngdkkWj8WYDmfyVsp+Wnh/l8LwbwN9GLgVKV
riq/cZEY8kk5RKp5VOMXiFTr9a6lLmDPtdQF0oUqdcH6XUhdwJ5rqQukC1XqAvZcS13AnmupC6QL
VeoC/qsiA7DAeBMDMD7OggwLZkNDQxgeHnkWuMViERr5e7Hbe4TfqvFvKjE7IPP0h4eHMcLy4+OE
AMoC2/jIIGqqajA0pijDOJ9fIsU0MwX896sBd75JXbB+F1IXsOda6gLpQpW6YP0upC5gz7XUBdKF
KnUBe66lLmDPtdQF0oUqdQH/VZEBWGD8XAMgnZxGVUYQ1q5dCV19fejttEN1RyNuupxD3cAonHeb
4qpHEktpiqUlEg6uqrMEP0e88UQ9voQV69ZDT1cHtqduYEQsxwQLODL5NEQ9FTDVNkUbS/fR7XOI
L2zGxEArMgtKIJEyE6Am6M4nqQvW70LqAvZc69UgupClLli/C6kL2HMtdYF0oUpdwJ5rqQvYcy11
gXSh6tVgr05kABYYP9cAyGeAVJ8r2Gl7FH2s99/W3oHh0WG0t7VBPi3DeQsTXPPkBgCYlE2Af6py
RCwR7rTmy6sL+i+Kc/uwNc7cDYZcJkZ/Xz/GxsXCnbQ9Xb3obyuDlZEl6oYm0NfVjjGJDIle56Fh
ao+BcW42FJcN5qteDdTvSuoC9lxLXSBdqFIXrN+F1AXsuZa6QLpQpS5gz7XUBey5lrpAulClLuC/
Kg4ZgAXEzzYAbNum+V7H/lMuwkaWyuSQjbfC0cQedaPjuGZlAdcnmZiS9uLs4b3YuXMXjOwPobF7
FNKJv31ZAJjFg9P2sDl2FdlZ6SiqaMD0jBQPLx6Cho4uLHcbY8NGE/RPSXDV3lH4ZsEx0zX4tw8+
xbVHgZiQTbIAqD74zgepC9bvQuoC9lxLXSBdqFIXrN+F1AXsuZa6QLpQpS5gz7XUBey5lrpAulCl
LuC/Kg4ZgAXEm5wBKIi4hz/9+WMYGBlhr+MlDA23wXjVdpQOjsFlryUehhUi9N4RaFo4ora2Did2
a8HC6aHQKNQF/RfF8Thng7+u3IB9tjZ4EJKJ6oxAbNbaiQHpJJryw7FupS4GZiZgr7EDIfldKIu5
C719JzE5i3l/U6C6YP0upC5gz7XUBdKFKnXB+l1IXcCea6kLpAtV6gL2XEtdwJ5rqQukC1XqAv6r
4pABWEC8yRmADH9XmNkfQ2tXN5pbOyEZbYbJel2UD3EDsBseEflw2b8dmwwtcPrUCRw6dBCPw1Ig
U96opy7wq8TPANw74YCH4QVCI+KE3WBpXHgs/J4Za8JuPUt0y8dxSEsf4YXdKIu+g50HzwvT+UuD
1AXe+SJ1wfpdSF3AnmupC6QLVeqC9buQuoA911IXSBeq1AXsuZa6gD3XUhdIF6rUBfxXxSEDsID4
uQZgcgZI8ryE3YcuCBuZ33gnH2uA1rebUcoMwMVdhrjln4sUv8sw2u2ImsYGpKckorqJGYUJsdqg
/6I4tw/vxp5jLigvL0ZpdSPK03yxdq0G0kuKEXHvND78YD2GIIXNBg0E5XaiOsEdyzbpoq6tGyIW
mNQF3vkidcH6XUhdwJ5rqQukC1XqgvW7kLqAPddSF0gXqtQF7LmWuoA911IXSBeq1AX8V8UhA7CA
+LkGQCKbRFlaOB48CYFEPsnmF0My1olbZ6+haXgM4e73EJFagZlJETwun4CxuSVsHM+hqqUfUsnf
NgB8Z0kNdoeWni527doF64MXMMx20tgnN6FrZIhLN67i5vWHGJSJ4HX1OrIquyAZ7cSpPcY4d9tD
KB/dA0AG4E2lLli/C6kL2HMtdYF0oUpdwJ5rvRqs34XUBdKFKnUB/1WRAVhg/FwDMDIyAtGEFHKZ
VPitCNzjmJqZhoj9lk1OQcYD/bgI/I3Q06zBzM7Mst6/SFj+1YD/qvg8UhbE+aUA3pD4+8DHWfrT
s3zULGZYWrOz08K4qZkZ4cbCcbGETQQm5TKh/OoC73yRumD9LqQuYM+11AXShSp1wfpdSF3Anmup
C6QLVeoC9lxLXcCea6kLpAtVrwZ7deKQAVhA/FwD8KrUBfF3IXXBdCFKXbB+F1IXsOda6gLpQpW6
YP0upC5gz7XUBdKFKnUBe66lLmDPtdQF0oUqdQH/VZEBWGCQAXg/Uhes34XUBey5lrpAulClLli/
C6kL2HMtdYF0oUpdwJ5rqQvYcy11gXShSl3Af1VkABYYZADej9QF63chdQF7rqUukC5UqQvW70Lq
AvZcS10gXahSF7DnWuoC9lxLXSBdqFIX8F8VGYAFhsuNuyFStt34N/7VBXrS3EiduSEtHakzhSTS
QpK6DserkkplqGnqJAOwUOAGQDJFBoBEIi0t8ZuZSXMrsVhCBmAhsVANgLpeFuntpa6OSSQS6U00
MUEGYEGxEA0Ad5qDg4MYGBggzZH4J57V1TWJRCL9XJEBWGC8jQFQ14N8X+LXonjAGh4efu0aFent
1d/fLxgrdXW+GKWuXZNIpL9PZAAWGG9qAHjg7enpQW9v7y+mzs5O4a5UYu7gwb+rq0ttfS828fZL
ZzxIpLkXGYAFxpsYAN5z4r3vvr4+IWBwM/C+xfPlB3H+GM/rTGNCIlP+/glmp1laQ8L3Dd6ECdEo
urs6mQHpUY5hzExhiJVLeGPhe0QmlWJqWrUCs8Lw9MzbF4LXq+rMymIWX0/efvkZDzoTQCLNrcgA
LDDexgBwqQ6esknFs58cmWTitWVUUs3P/46wv5NT08LrfPnvV+f9KfHl+cFbnQHIeHIZv/nLOvSp
8wacaSmamtpZvBzH3Ts30ClSjv85zIzAdNNyrFq/GZs3b8f27cZIKm0D5L24efcOBn8szx+ht7Md
Q+M/w6yoZQZn9tsiuoiti8AEju81R3bTqHL4zeGBUdErVrzWWQXfpnza6Ni4MDw9KYN8SmE8Zqan
IBpXv53UaWRkFFK5Iu1ZZpzGRkfY9h/DpNI9TckVr5l+0ZhNySSK/NnyY+NizMxMY5ynx8bxV0HP
KNN5Na8fk6oNkwEgkeZeZAAWGG9rAEbZbx6EizMj4LDfHodPnUVhczcm+QH7peVGhAM3f18/H5bx
l2NIRQgL8EBmeTNkE+IX5v3b+lEDMCPCKQcb6Opqw9U/VTmSjZYPorS0FDIWY4arY7F8hQYqegbA
Pxw0PDSIoTHF9wTkE6PoH1J8lbCxthRVzR3C72fI2qG3zRBVAzw6zSA3yg3frdVC17hcCFByHrxY
eq0NreAhbmKkCyUlpZAKCytorC1DY9cQ+zWDfboaOHgjRBgv5vOWloG/kIn35oeHB9HV3IaahhZI
lcFxfLgPIyJFWfny+3cZICi7WTkshrWOJtIaxey3DGWlJWhu61VMYvR21KOkskYxMCPD0OAg2lg5
RbLngZ6vw+DQsBBQS9IjcNDeHseczqG0qQczU3JMiAZx7/oF+ERnIjPeH2cvOuPxE180945C/DNf
IiVlbaAsMwYH7OzgGZgIMct/ZkqKlNDHsLNzQFRGJWsncsQH3sdBhwOwZ2UISswTXgwzJhJjsLMe
fv6h6B0RQcwONN1N5QgMDMcgq5cxNfmpExkAEundiQzAAuNtDQDvBZYm+uC75etx77EXXC8fwX9+
uxI5dX2sZ/j8rMDk1BQGm0tw6dojFtrkuHPVBXXdoygvzGBBtks5lwK5lPc2xzD1wplsiXhc+NKf
Cv5lQX4K91UD0JIXisNXfTAz3gCDXXYsJ2C0JR87Nn2LrZpbscXIDm7XjuBX//E7uPmF4tgxRwT6
emLn3mPC8u6n9+KaTzyifK7CwMwUu3bq4Kp3NCuzElkHjHV2oXrgedC0NTZCUFQC9jseQnlpDr7+
+N9hbHEaqSmxsDDRxZ495jCyP4n+4TE8vmCFlZs2YeWK9bjudh/rP/0jvjY8hrKcaGxZtQzbNTZB
w/w4Bke6sXXZr6GlawNLQ11c8IpnOc1gt8F2JFb1KTJmw4csTBCa16ocnsD+nQbIb+zCxX1GMDCx
xI4dW5Fc1YmyZD9oGRlht8VOHHTxxkBLAf76p3+HvuEh1PVNKJdXGAA5M2cxjy/h8+9W4sqdB7h8
0gZffvU9CltFaM4KxA+r9JBblAmttWtwNyAKmdk56BrgZ3OeX4oQsXY0IX2+bYSzPCxt0YQM/U15
0FixAleu38T6Vavgn96M2jRvfPH1Oty7dRPrNumjkW3bvRtWw+H8bQT6P0F6YSU7qExAJJlET2Ui
Vq3RQdOwjOU5i9oMf2xky/S82BRmpllbHWFt5vl2mhCNsTIp7dXsFAZY8CcDQCLNvcgALDDe1gDw
jmmi9xV8tkJH6CVyshPDUVTfg4G2Uhw5ZIU9DodR2T2CiDsH8N//6Vc463wGv/qn/4Hd5+8jKS4c
pTXNCPd1x/mzR2FsYoGk/EZ2gJYh+O55mO7chf2HjiK3ugO1hbGwttqNvTYHUVDdJpzyfdUA3HY0
wMdfr4W19W786z/9K3I6xfA5tQe25/2E6ZnJccx0pMJi9xFMTYlYgGfBprsHe42NUd3aBjtzcxSV
F+Hb3/yKmQJ7Nn4bPvhkPfpU3kNpAKr6n5uRfSyw+odGY6+9HfKz4rFeU0MYf8VSE58t18CBA/b4
5Hcf4txlZ2zbZAh+gl7UWYOknELccDqC8JxqXLQ2wr3wUmG5E2a6uH7vEfS0VqOOdfalTcnQMTuM
1rpsaBnasL69ihkcYOYjPF91lkIGez09ZNe24JDuRpjtPw3v8BC0D/TD+PvPsE7bDAdsd+N3v/sS
/gHe2Kq1Da9e/Rgdn8BEXy1Wf/M5AnPblGOBR6ctoWdzCkdNN+BPf12LQ7aG+Nf/+ADuPpEICQ9G
z9gk69X7w2SXMRxOX8egWI7WqnTs32cJ22NOqOzoZyaAfyVyHP3d7Whs6RTSvbDXEI/Cc3Blvw72
nr6LwvwClNW3Y2K4Eeu++YKttzUuXnmEYZYeP8MgmpCjtzoVmttN0TwsZWZlBvXZIdDTt8IgO+h4
u52FpbkZLl5/iHHZNKoLYmC715KV6SI6RiZQkhqE446HcfmKByuzCIOsDZMBIJHmVmQAFhhvfQ/A
uEi4Hvz03nls09TG6h/W4OwNT9bzGoXllh+gvecQjljr4cs1xogOvo/vlm9CfFoM1n77PR5HpuOg
5Q48ic2F6Zb/xNa953H3hA3WGjogOewRVq3VREiIP5Z/+nvcDozGLhbEjKxPwMX1PIJTi4SA8KIB
mBysh/Z2DQRGxyMiIhI3jpph98lbeHhmP+wvBQrz5KYnoSQ3DgbG+zE9MwETIy20sSRSvK9i3arV
OOzsgylRC7758xfwikhAfPAjWNufwqiqIylrh6G2CVqV5/QbckPw7ZptaG5rgLmVNfIy47DDaKcw
7Zz5NhjaXUZaWgqO7beDt4cbNq/TF4KupKcBybmFuHDAFsFZ1bhkYwT3yAphuVPmerh2+z4LptvR
IFyNkOP8wb3MEBixesgQ5lFxetcWON4KE35P9hbj+6/WoGZQjvaGWmSnxcNSbz0cTrnCYvsGnLzp
h9SkSOyzPYSEqKfQZuZKdTFBhUgiR1tJJFYuWwF+K4FENAopW/eKBG9s1NiNGxcPYP0OK4T4uOLr
7zYgISEWWvraSEpNZgH7S9zxCcC+Xfo4d+Medm1eCfODp2BjtAHfbLLAoJR/MnoU48IlDBlcDhri
337/Z5R19uKkziZ8u1oThju2YY3efnT09+LO9fN4EhQOW511MNh/FZOzsxCz8vVUpUBzhzlaR2SC
AWjMDYOp5SFkxD7FH/7lA7i638P5W3dQW1mITd9+AdvjZ2Gy/QdoWTvD8+oefPTNKiRnV2BgZFQ4
C0AGgESaW5EBWGC8rQGQsF5dcU46610pAvFoVwt2bVyDY5dcsPazT2BsuRd7d5tjyzYzZKTFYpcl
P9Uuxx4jE9T1inDa3hB+cVk4YKWP1CYZJA1J2GJqjjMH9uHM/UQhzdunrXA9IA0VaaGwtrLCvv3W
CIzJZb3Vlw1Ais8VmDm6KocY4iZoaGxHZn4ODDS+g+Y2TazYbonaxnps/+KvOHnxNqxYD7V2hM07
Uonf/89/RmBBNxuYhde1I9iqpwOdrVtx3N3/+SWAmUHo/PBXrNuqBW1tfaxbrQH/lCrhzICJlS0K
shOgs3OncP2/tSge27ZugJmZMbbsskP34AgentuNlZs34YfvvodHdCYirh/D19/vQnJCEDRWL8OO
rZuw2eQoephB0NfdhLphRbbFIdfwf//zR2gXvXBdhNFawgLv8u9YWbSxYdlyXHAPxpRMhMN7DLHL
zBw7WF6e0fkoTvTDBs2tMDXQg/npO6x3ngwtZlT43QIvMsavo3eUYPnXXyCljleMglBXB2jZXkFu
tAdsTntgeqgCukb2GBluh4WlOe5cPQ9dEyfl3EARMwwf/tvvYG5tiz3mJtjKAnbjwIRwKWdwoJ+1
IzFkMgmC7hzHnv0XcIIZoDuR5cKylps34E5onvCb088NyQ+GGJiahYQZgP66dKxfsR2tysI3ZgZg
0xZLDI4Pw835NGwO2uO48y0kBD7Ah7/6E/bss4WFiTHMbM/C9bwtHK48FpajSwAk0rsRGYAFxt9z
CSDy3nH86eu18I9JQkZiNLavXweP0DjY6W+F070AxDy9hZ12TqgrS8FXn65EXlU59FatwF2/BBzY
vQM+URnYu3MLwksG0FMQhG937ESo102s2mCIqIgoLP/mK9z0i4b/o4eIS0qHncFqLN9+EKKpKeFm
MRXDrNc4LHrxdjugr6cTUlbGWVk/CgoKMK6cfbCjFfUNrRgYHoJceatCX1/PS3eeN9QUobhSdX1d
xSx62hpRVJiP/PxSjE0oF56WoZ/Vh0wqQR8LKqpkJkY72Xws3xdu9K9hPdPqFuUjhDIxqkorhfnH
h9pQUFioPMXP8unpflaekqi7MHe8pBh4hcmxQZZHPmqbuHlRMCUbQQEb19D8fFxfZy1Lv0JRthkp
evr6nhsbJfwO/akpOR5fsMOXa7YjND4VwZ4u+PLTTxFX2oUUr4swsHfFaFs21m7ahe6ueuzQ3o64
xHis/vpreIXF4OheM5xxuQkTzS1su8XC/y7rgR84h1HplHBNvq00EZoaGghPzMBxC33YnHqMpMBr
2LDNFGEhflixUgMxiUnYpauJpxEx2LdzEyxOumFqZgbj42JMiXthtP5rmB1zQVpKCkw2fQ+bc55o
qcrFjRseSIoLwse//xCu972ht3kjPCKT8NDZEUeu++DBRQvsPHJNWFfefskAkEhzLzIAC4y/5xLA
pGQc4Sxg6+qyHrO2CR4GJQuBpaM2FzZ79KCtuxtRBTWQS4Zwxmo3XB6FI/KRK+z2n8Mjr/vILa2B
z6NbKGwawkBDPs653sME6x0+uXkWtgePYvPab1mPMAOpoW7Q1dHHHhtHFNd1qL0HYDFSleaH5cu/
R17jgHLMu4PfqDc0PIrpyQlE+NyCvo4udppZIDpbcXmiKDkMD5hxG+2pheutxyyAduL27RtoH5lE
QaKn8PSFleN59I5J0cQCvbmJFvR22iGtqkn5eOg4pLJxRPndZm1FB1YnL6NtRMKM0BgeXjyBHTt0
4BmdhdmZaSRHPoK+Fkvv6EX0jkxgQjQutL8JqQwddWVw3G3G2oMOjp1xxcjEJIY7a3DykBX0DQxx
6aYXxJPTKMsKhbGhNozND6Giux9ZUY9Z+4wTPtFKBoBEejciA7DAeGsDwOcfG2e9s+d9yZnpSeH5
7BdfxjPJesYj7OAv/JZJMTk9IzwDPjk5hQmxCHL2VzzO0hYp7kivzo3F1Wt3kJcRi3XLlzMD0SKM
V8GfFFD3FMBiRCpiQVn5mOK7RjAAQ4OKbfrCW41Uz+aL2TadZL9Hx0SYnppk25/NNzUltBvZs9Mn
sxCNj7301IZc9R4B1n6EZ/5feGKA350/wtJRZcfvKeFnIuTP3i0xCzGfh40Tln+lbany44+ZPivx
7IxQJtX7BjgS1s74UwC8/fF0yACQSO9GZAAWGG9iAPg741Uf4eG/+QF0LjXOn/XuaUdKUiKSk5OR
V1INEWtQL82jfG/9UjAA7xMeXPmb8l6s68Uo3n5UBuBdtGESaTFKXTxQJzIAC4w3MQA8+Hd3dwvv
UucH0LkW79kPDA5BJBZDJBIJvbuB/j7h2vqL8/Ey8FO5xNzBDcC72q7zTXw9eRtSN41EIr0sflzm
nQN1MeFVkQFYYPxcA8ADBO858cD7S4s+BDT3zMzMqK3rxSrehtSNJ5FIL4t3xrgR+DlnAsgALDDe
xADwd8UTBEEQSwf+Km4yAIsUMgAEQRDEjyGVSskALFbIABAEQRA/BhmARQwZAIIgCOLHIAOwiFls
BmCWvzdeLBbEvyI3H8TLQjcuEgSxECEDsIhZbAaA37DCH1nhf+eL+PPmXARBEAsNMgCLmLk2ALyx
8OdGVS8Mep/iefJnvHmvez4xPT0tlEtdmd+nent71Y5/1+LbhbcJfhD5JdrFXEq1Lu+rjb/v/N5E
fHvSZcHFDxmARcxcGwB+uvunGovqta5zK8WrZnme/MDEy/Aak+PIzMgVPhD0vuHP0qrq5MX153X6
fB1e14vT56LeuAlRN16lETXj5kJ8vVXmQ9Uu3kU7eLm+frpuVXp5e7w8TZ14+VVmRrUub6qfWzYu
tfm9tPzfSkvN9DfI/6fE14OXi1jckAFYxMy1AeC9b9WBngcU+dQ0piblkEgkmJmdFd7L/iYHwJ8l
lt64aAJymVT41Ks6A1AZ/wj/x//3vyMo7+VvC8w5kgFERqcoBxS8aABGR8eE7x/IZRL2++UDOf/A
koytA//YER/H62lCIoVkYm7qjAdh1W/+Xv6p6RlMymVs20gxOzsjfHRnzrcNkyqI8R6s0C5YHvzb
ArMzM0K7EMrB6mMu8uavkxYpPx70t8RfcMK/aSHiy4z/vGDOy8+35XMzMwaZXC4cJBXrMg2Z9Pn3
D9RqbByTbL+Q8vtDeBn4dmfLq7b7i3o9P94u2IFWKhO+ycD3W76fjY2PK9d7jLV/luaLabBpPB+R
eALSF77NoFYsD7682mmviKfDy0UsbsgALGLelQHgByJ+6js72gfa2tuwefMmWB09j+beEUiFA4zi
vezjykbFGxeX6v3sinyV8ygPzq9OV0wbFz41W5EegtPX72NEJGVleNUAyHHu6CHccHWGpcNp5Thg
oL0I111cEJFeIgzLxppx744LfMKThWFMDcHrgStue/mDf2x4rKsGWUWKb9dXleSirXcYDZWFSIoL
heutO+gZm0ZplCt+9Zs/I7KkQZiP89wAiDAzNYEze41w5Eag8PY9xXqOQiydxEBDAY6fPY+uYSkL
SONs+jSCH1/F/dBUxcH+tXVX1dPzulAd+PlBXzG/YphLZQB48J+ZmUJCoBu2b9uKzRs3Yf/Z6+gc
EgkfaFIsq6rzl9Plv4X0WDl4WVRS5PXydnpxuz0zAGyYf5hnsL0Sh23MsXHzZugb70J6RavwMaCX
0nqWzvO0nw8r15ONV62rnNVzfOB9PApJZoF46tm8z8qhHBaWYcv3szJJpRL4P7qOoJQSZoYkz5bh
8/P2pyrPi+uiCsjjYgkkQ22wM9qO9Rs3YtOmTdA1NENObTvkLF0hL+VyqnR5fU5Kx3HthBV2Wtnj
yu37qCorwOnzF59td2Fe5fq+mB//zcfxzyMnel/FVmMHjMhmhGWGhwbR1z8o7Me9vX2KumN5SWTT
qM+Pww2PQOQnB+OS21PBcKnS4nWi2LaK9RwdGUJv33Ozqii3Yt6X1oP9JgOwNCADsIh5VwZANjUj
fM72P79YhoCEdNTW1eHifhNomh6FaBosELIgwOYTsZ6gXCJW9IrkUpbHIKSsR8UPMpNsnuFBduBj
jWpSNiHMI2W/h4eGWVCdwiibNjiiuLkuO9AFW8wOYEw6/ZoBGKpJgdHuw6zXLcIuza3I75qEpLMY
67//Eo4nzmDN6nXwDo+Gje5a7HU8AZ0N63CFHTAv2Ohhp7UDbE20YXbMDWlBzti221FI08lWB0+S
ynDCZCX+utkUjhb60NpzDlkx9/HnP/8Vofm1wnwclQGYYAfjzopUbFn+FVbtMEHTkFzodfPAJWX1
0FmSgA3btdE2Oss/w8cC4jRcj5vBwdVfSEfCeqpDQyOsXqae1QsPNBLhRsNhFmBH2DAzQFwT/HLI
IFtnVpfKbasyAHK2bXIj3PDplysRnZGLutoaHDHXhpG9s3CJRM7SGxseFnrpMqlY+D4DD6i8lywE
CZaGwhiwAwL7y+cfYsFdyvKaEIshY4GctwGxWMq2F9u2bH6VARgXSSAb7YDumm9g6XQbNaxdBNw7
hs//ugIl7SNsnVkarEc8PDImnDka4m2EBVoeEKXySUywXjIvj4z9HmfpSlhPWCIaxTD/PLVchq72
FrR1dmNkeEioc252+PpPSFkvndV1P0tPyr9eKO/HAQtzBGfUYKi3A+3dfcKXKsXjI6xNMfPK2t4o
62nz3r1obFioa9W6qAKyaILVe0cx1v6wAeEZxWhoaISb0z6s0TkAfheKXMLaKi8r6+3zNIaUX8Xs
LIvHD9+uRWpZIzp7BtBeHId1mlqK7T7DP1fM24ocMr5fvJCfcADmJlLSj0NmWvjLX79HUGYNf/QF
6UH3sOfIDYz2lMPIaA/q+tj+w7cHazN93R3oHRpD1EMnGB66LBhzCasPfjbumQHg9cvaW2NeBAxN
HdAjnsQsm+/H2hmv65GRYaFcxOKGDMAi5l0ZABb24GS+A2cfJwjjJ4Vvvk6imR0kJVIRPG6egJaO
PvTN96K8dQBx3pexcetWbFi1HJYHXQQTEPz4ErR0daFrYobc+i4kPLmIVSvX4PS5e/C8fw26LFhq
btWCd3QxyhI9oGd9FGNsZV41AIE3HPCrD/4TW7Zo4M+/+TeceJCIHN+r2LX/nmKG6QnEejpjq/Yh
xTBmUJ7mjy1bdyuHJTDTNcKN66dheeyCMMb11G74JxfhtMMuxNTJ2Sx1WKG1C11ttbDYfeT552kZ
KgMwy/55XDmKJ4nFeHxpP674KC4V5Md6YtPK1WzdV+DbrbswzIL3lQNG2LBOA59/8hFuBKbB64ot
1q7ZjHueUYgMugVtZb1k1nagKiMUujpbsWX9elx+FIbWmkKYGmzDjq3rYXviKobFChOgMAAsCM2I
sV93E26HFwr5T/HCTkvQ3t6LpuJ4bFq1DEa7jiEzNxVmWuuwasVy7Lv0CENdNbC2NkfL6DSKYh/j
zJ2nyIv1wZp167Bl1Q/QM3NEN9v2t8/ZQ0tbC1s0dZBR0Sac3lcZADmLvXkh1/HdRkPwD/vyQMI5
bqqJU3dCWL3uwsb12/AkNAmPnPdj7erVWPHDMtwOTkdZWgj0tbTYdt+G487eGBtowZ6d26ClpYll
37OAWt6OBP9bcPMPxz0ne7b9NPHDV59hjaEjyoozsEtXB/o6O2B/8h4qCmLxL//0j9hicx4Pb19E
YHoVqjIDWJ0vx/er1uBmcAYGGnKhp7UF27dtwoo1uihq6BU+R/2iARhtK4LWDlO0KZtcYbAr1m63
Z9voNtasXIXjZx8iNc4HG9Z+j+/XMKOZkAuPc5b4p3/+FS66uOPMtSsoyk6Gzk4z9LJtc+fifrZt
9WFkcxAVbcxIMxPwogGQMPNSmfIUh9j24G10l/1FIV9H/W/wT//yCQ4e2IV/+If/gTNuPjhipYlt
W01w0+Uqrj7yQ1bEA3zx9dfQ0VgHTd29aOvtwzFmytNqWK+/IgnHL17DnTO78Q//+M94HJ+PhIAb
z/a/l9vZOpy9/ZQZAjnbpmQAFjtkABYx78YADLJfIthpasIztoz9nkZW5GNoam6DocM5ZET74o//
8QccPnkWmss/xVaL83C/bIPVu06gvbEMK1asQWBIED7/7W+x7yjrtWz6hgXXQ7h7wRKbTPZjlPVa
wp/cgsPxUzDfvhIrDPYjP9EPBravG4ApUQc74G1GdqPijuWuigSsWq+F8IDHLHAZoKWzF49vOuPO
bRdsXLkZZY2diPW5B9e7t6C7YTOSShtRlRaIjdv2ICbEDRu1rNDRXA+NVZ/BP7UMp+wNEVE+AnTl
YNn2XWipK8KG1dpoGXv+JAI3AAODw5gVd2PLt3+B7enrcNi5GV9v3st6/yPQYsHTJ60K5fEPsNnA
EkGPb2KzjhW6+7rhaLoRV54ksAC5HHYuT9FVlogP/11ZLxu/xUodO1x1tMS3K7XgE+SNhIIyhDNz
9dHHy/HIzwdPomIwxMrCT3kLBkC4DNEPs7WbEZHfyk/FIM73JjS3bYf5iRvIi/PGZ199habeYRzZ
qQmHC57o7WjGjjVrce/hY2zdugr1o0Cm32WYHXdlvcozWKlpju6OTlhrb8bFm/ew8dM/Y/9ZV5a/
J0obOiFlQUxlAPiX/qPuHsFWo/3Cb37vA+feMWvYnbwDC92vcNkvBcWR97F6sxE62HLn9m6F7ZUn
qC9OwMGjR3DE1gx//M9lKCsvxrdff4aQnEZ4nt4D/cM3EHD7CGxZcORnVRrzo/GnP/4BTk9T0FaT
jSPHHHHq8AH87g8fILOyHvuMdBGaVQvnw7vg4ukP8y3r8DiqEC0sn1UrNREewurim+UoqWvHUba9
9jg/YSWdfckASPpqsOazP2HVRg1s374V679fhdicejy9bIG1O+0w3FuPLcu+R0BKJeqywrBi5XbE
x4dgB9u+zQ2l2KGnh4z0ZJja2CHyiTt+/bs/4+Tps1jx2R+ww/oKs6IQ7mtRGQCOs602VmlZ4u7V
Y/jNbz9F9fAMMpih1d1zFr3NudDQMEZNYzXWfP1b+KTWojTGDfr2p5Ee6oZVm/XR3taJwzu34rTL
Q5jorkBU2SB6CkKw1cQWZdmx2GFgh/KiJHz8WjuzeNbOQpIzhTMz/CwesbghA7CIeVdnAHin8tF5
K+jtdxbGT8slKGVB+i/sAHmXBdxP//IDbty5gzNHD8DJ+RFuXnTABW9+tmAUOuzAfOPGNXz+p69w
9fYdXDh1GIdP38b1s3txyNUPkPVhj/42HLl8E9ccrZgpOIjs2CdqDUBrYSwcTl5TDim4fMwOsYX1
CHQ7jNXrN2KH2UF0jU4gNega1m1ch007TFjvaxBV6b7Ysmk11mzZhrD8RrYSIzhgoAkNHUPWY9uF
7MpWPLp5FpmNrFc9UAXrY2chFo/CdssmHHEJVOamMADjkkkUxz3GslWs93TaCWfOnMCXX3yPqORE
6Groo5Md6Wc7i2BsZQvXs8dhe8ZLWNb9/D5c8ozAWbtteJRcj85sX3zw2y+e1Yu1wwW093QjyOc+
Tp3YAyPzw2jpHUBsyFNcunQY23TMUN46KNx3oTgDMIbZ2WlcO2gIizMPhDzkUjGyQ+/hg+83ISbM
C1omijMfZlu3IDivU/h92cYAJ85dgo7eNvBDfn7QFVievIGIxxdwkG8ThvtRUxxigbq5Kh83b7pA
V1sDN70ThZcg8evt3ABMyKfRkh+Kz/66HJX9cmE5TPdDa8WXeBSZAXvTTYirHkGm90UY2V0XJgfd
OoGjNzxw//xB7Np/FB63rrJ63Iic3EwYmewCb5WJ3uehf9QFQfdO4PDtIEz2tkJn0ybciOcGFHh6
5Qh2mFrD48EDrFj2HdIr6uFoYYKcphHcdrLC1XssSGoaooXf7AE5zDRZ2e/chJndYWH526d3w+LC
Y/brZQMw3lmKreu3IigxG/m5OWhu7xPmf3DWFPZXfYChSqxjhlBxr/woM7ObERgeDGMTB/T3NMDA
eCeyMpJhaWeP+1ec8MnXm3GH7RfHD1jjhPNjSFnd8UsCivzkEHdXQXPjDzh47DROnT6DrT/8FSfd
45l59IDlUTdAXAdtXWsMjnRBW3MVSlhxapIeYtehC8LZkT1nFWe9gq45YN/BszDbqYGsthmMlEdg
m5kdaotSsMv6LGoKIvDRbz//0XZmYO6IzhEJRoa52ScWM2QAFjHvygCIJqQQ9zfCSGMl9Hfvxekz
Z2GluxX/6+NlyCkqhumOTThx4RrMdLbhVlAKC3R74HArRAgGq9evQnh6AeyNtuHQ2cuw2amN855R
uH/OFJZnH2B2vB0bWU/akS2/32QrvtO2RVaUJzTN9792D8Dsi+fiX0A1mt+J/jKvDr+ewI8k+RKz
M8/nmpqahlwyAlvdDXANzleOBTzOWLKe2RlcYT34zfo2MN2+AR+s0EV1SRrWfLsMBxyO4Y//8c9w
9knAcYu1uBqYg8nRNphpbVLWiw7O3vdF4AMX2B1iAeGgOdZsNYe/72NYWR/G1YuO+OyLVchrHIR8
QmUARoX7Lobby6G59juY2NozM3IGplvX4DffbUdc6COs0dQSTs+H3jmB779fj8P7bfDlSm1U1jfA
fNMK7NxzEGu/+QB6R24jzc8Ff/xiBY4dOYxvV29BRFIyjthYweXGdWz6/kscZkaIP2GgMgD83oHp
aRncz9jimzVbccLpNAw0voX+XifIpqTQ2/QFnma2YqwtDxuWLYPdwZNY9sUnOOXmjzNW26FjcQBX
Tzvg958tQ25OBrZu10SHBIh0O4ptB5zhd+sYjlx1h8Xyj/EPHy7DBefLcH3gBSdbI6zbsQs3rp3D
7//4IdJr2nBEey2MbS/jsJ0BbgWn4M5RE2zU2gVrU11sNjmJolR/bDKwELa380EDGJ9WGKYXDcBY
WwE2rNNGzQCrsalJoe3x+e+e0MeuY66sIchw3HwrtrJ0dhttx7bdZ9FcnoSNmpbo6ayBppYW0lMT
sM1wF8pKcqG1aT3OX7kO3W0auB2WIdyLoMqPnzEJdHWErvV5oRyc9txAVo9aSAh/go8/+g5xKfFY
8+kXuOByB5s3s32tbRqVsXehbXsKGSF38c+/+RiOx47hW2bEE0rqcMFKB5t1mHHcugxfaO5Bd0MR
Pvvtp7j/NAQ2u7ReaWfXlO3MAl+v1EPbiBSjw3/7mEAsbMgALGLelQHgNxaJJXJIRrvw1NMNzpcv
IyIlC9nZuegblaK3rQwuV5zxyDcekkk5KgszkF/ZiAnxMOITYtE2IMZITx1uX3fGPY9wjMvlqC5M
Q1ZRpfAIVENZFq6y5T1DgpGcU4T2phqkZudjaITlq+49AL8g3AAM9XUhPjYGrb0jEPOb6cQT6Gur
QVRiOkYHu3H/9nU89vFHQlomq48plGXGwPnaLYRFRrDA24rCrESU1rVBIpvEQFfNs3oZlU9isKsO
D9yu4cq126hr78fEaA98fe7C2fkq8ssbIJPyRw5feAqAbUv+5MT4QAs87t/G5ctXEJeRg7z8EjTW
VSIxJRUjogkWzyaQEOEN5ytXUdjQzgL3FAteObjmch2hMXEor29HyL3j0NhlhQd33JFUWM/WVYaC
jCi2vZ3hGxSLMWYE+c2DLz4GyC9DzM7IkZcUyfK+jKchUWz7zkA2MYrUpGjUtvaxdiRCcXoMqxNf
2Bqth8N1P0yJe+F+/Rru+jxBZFIqOjvakZKagsHxCTRVFSAlrwz1lUXILypBZLAP3O/exhVmAG49
9kdvfw+eut3EjYePERoXh/b+UTQWpuPh/adIy0xDRWMXJqVDeOpxE1fu3Ef78ARGuhqQmJYFMWvT
ZfnpyCiuhkTy/B6A8XERRge6kJSYiu7BUbYPKQ6QfP4qlnZGQZnwGKd4tBueD67jmvtjdI1KMN7X
wuo4C0ODvaz8qWhva0ESq3ORfAotNdlsuznjaXgGJth+wdNU5ccfM8xLTxT2EwkzGvwGTMnYAGtX
0Whs7UDAw/tIK6hBTkwonviGITk9CZ1sP+ppqUJabhE6m2sR5OeDK5evITqzAlMz0+hvrcEt16vw
C49m+08BxCIxonw8EJ5UjNGh5h9tZ7UtPcJNhLxcxOKGDMAi5p0ZAKGxjLCDpBiqzvAUC+KTwkGN
HySFc62shzQlmAUe2PgNT/wZZx4wxePsgCpmXTuBacUd32wefjeyIoBNClNmp2dYujLhGWd+B/mP
vQfgl4RfAujrZz04fpe5SPEyIL4O/CwJLzN/dp3De8rTbF7+XgPZJO/vATNsGX6wl7HgIFW+D4Bf
e1WgqJcxFqxV8HcG8MCgqnPhfQNsGb4NVQZAIcW7E1TnKSb5tmH1KGY78JRwBzxfhr8rQDGHTPn8
OL+bnjPNthEnytMZFx6ECr+nhLxGIWXmgjPLAgzf1rwtvGQAhPzH2Doq5pvhj+yx+Xi98Ofj+R3+
3XV5OHboEEJDAqG/YwcismuF9BQLzGBmakp4jn+KpcGfn+dPLEzKpCzg8icXpCy4KWYVmJ0WnvUX
1mR2luXHhln7mhDaEH8XwqSy3pgxUVbIBNtOvF75kwh8vaVs3kmlkVIFZIWZGRfq68X9R9U+eXn4
b74PqOqZm79RNjw1JWfLs2XZ9uZl43/5NplgppkzO82ms7R4Hqr8eNr8SQh+IyJPV8hPOKPC9hcW
jHkefDvJWZvhj3nyuhGNsfxZe+Hblu8jqvWbnmS9d5YGb4Mcvg34fsTT5LU8JZcK7UPB6+2MPxHB
X7lNBmDxQwZgEfMuDABvLKpl3qd4njxvHhjmE4IBYAHwl6iTF8XfBKhu/N8jHsj5DYbqpqnE15ub
D1UQUzfPqxJMQ283mpub0T/EAiMzderme9/i5efb8n218fed35uIGwBeLmJxQwZgETOXBoA3EN7L
442F/+UH/Pcpnic/WPIGO5/gPTReJ+rK/D6lCsJzqcHBIeEdAOqmqaTaLm/WLgYxxAIMDzLDw0Ns
OXXzvH+93bq8vd53fm8qXi6+35MWvvhxnh/j+QfMXoQMwCJmrgwA/wwvn48giKUF3/dJi0P8GM8D
/YuQAVjEzKUBeLXhEARBEAsHfpznb/t8ETIAixgyAARBEASHDMASgwwAQRAEwSEDsMQgA0AQBEFw
yAAsMcgAEARBEBwyAEsMMgAEQRAEhwzAEoMMAEEQBMEhA7DEIANAEARBcMgALDHmkwGY7OuGZFjx
vvGx0iKMdw0Lv1nqGMrMxMTA273jf1Y8iIH8gte+87eQEDfWQNzegaGCEkwrX4k/PdqD/owi4Xdf
VBDqbtxEvasr2qPThXFT/c3oTswQfnMk9ZUYrmqGuLkWE4PP3+tOEATBIQOwxJgvBkDWVIliMxNk
25+CeHAcDeeOoSmmVDl1GiUGhujIbVUOvxnT7QXItbWDXPVFlgXG9GATKi/fwERXPQp2O0CifNOx
tCoZ2XoOmJkWI3e7Jipd7qHRzQ0FJrpoiMqHvDYJof/4b+gs7BDm73a/iJILTyFtK0HljUcL2hAR
BDH3kAFYYswXAzDV14hCC11k7z4GmWwaTVfPoCWxQjl1GuW796Cnoh+TnVWoOe+Eqiu3IB7mX8Wb
RpffQ5SfOov+Ch7oJtETE4z627cxWKMIfNOdJSg8fFQIeKLiZJQfPYyGJ5GKADgtQvPty6g6fxVN
fuHCl9AktXmoOH4EdQ8DMM1mElXmoC0oANWnTqIro5wv9YzB7AS0+T5B5TEnDDX0sfSk6PL3ZMuf
RKN3BP9wHUYLUtH6xAuV565iuKYOLfcuo94rRFh+eqQd9VcvoOqaG6RiviE60e4fJZRDRbf3ddT6
8V59P4rsjkOqfFW3rDYD+RYnMT05hJJDpxUjGbKKSOQ5McNQk4e8nSbIP3AU/AN9/U9vovTiE2Ge
Ckc79NXRh1wIgngOGYAlxnwxALOTUsiHhyEfGWBpAQ2XnNCSVKmcOoMKK2v0ljeigpmEIicXNLnf
RV9lE7oeXkO2yT7UubogQ8sQ/YWFyNVdj8p7vhD1KC4hcANQfPo8xspzkaNngNbAAJRY7EKdTwxa
XM+i5MxNtPvcRPxKLQwU5SHf0ADNAQGo2GeBKvcItN8/geQde9D21APpWkYY7VN9jhcos9qG7H0X
0eJ+CVlWxzHR3YKaS2dRd90F2doaaEuvROM5S2Ran0bzjdNIWLUBrb4+yN1pgJ6iClTts2T5X2Hm
Yj+yrY5AJhrBYG7JC73zGVSe2I/uikFA3oYi+xNQfpEXsrpM5JufwMz0BAqNDVF13U1xBsBUB42x
RZgoSUDlrQB0B95ClXcMhiK8mAHwEpZtv38BNU9ThN8EQRAcMgBLjPl6E2D9meNoTa5TDgHlltbo
qx3EeH4cSh2PoeryLQyWVqPU0gBZu2xRceIEC6rGaAsNRdk5J/AvvavgBqD00mW03HVFxa1IYdxM
Jwv0e42QZ3EMqnBeduIUC9xXWZB8qhgxVo3Cg4dQf9sZzclVwqhiGyv0snIomEXlKXv0t7MKRB/y
rA9htL4GNWePo/TQQWRuXo+6gFQ03z2NrupRtndVovCAk7Bk6x0X1D98jKz1G1By/AQqjhxAjrkN
xK99yXgCpQeMMNjB1kjWhkJmEpTxH5PNOcwAnGalkKDQSB8Vl28wI+SKrtRCYfpYZiiKzz1mv2So
PHYQxfaHUOXqL0zr9b6DMmfFb4IgCA4ZgCXGfDUA/YE3kWm2D8NlZegNdUe6gRkmhiXoiYzEUHk5
ag9bIPegC1rusR78hbsYKS9G+eETGGQ9+EKHfRC/cL/gdHsh8o+ewFBmPLL0TTBQUoL6kw6sd+yJ
6mP7UesVi8HMYKTrWqI3NQE5+kboLyhB85XjKLvihWZ31qMPy2MpzSDPZCd6ap4bgHJHSxbcRwBR
PXJtDrN5ryHLjBmBqmoU79yOqsexaLx+GG35HZhuy0W+zVFhyXpmEpqD41FmsxMtcVkYTAxA6SlX
TMqkELd2spRVTKPiqC16qniecpTtZYHePRAjrF6qHHei5HoAGz+MfMsDz4yBitEUf+QfviH8ltZn
I/pf/wlFlxRBv/PxFVa2OOE3QRAEhwzAEmO+GgDMStH+6CryTU1RYH0Qgw3dfCT6Qj1QYGGK4sOn
MdrN8psaQ/2lI8g1tURTaBpmZCNofuKNFz9pPTPUgqanfsLvvrBHQhAvPX8Xk9Ns2mgbKh3tUeN8
BumGlpiQsnCaHIA8050oPnENMvEMBpOD0VPcxJaeRfOjhyxfVTd9Fh2BnhjpmmCd7F40PPKFdLgf
9ecPodDuIMqdzqI3vwZ9CUEYbB7GzGAjmn2ChCV7wwLYOg1B1lmKEhtL5NsewmBtO2ZHWtHo/hT8
nIKKdreLqA/KFH7Le+tRcWgf8naZotzZDXIZswrTbJ0fP4VM8vJdjpLafDQHJSqHgA73K6yOstiv
GVQft0dXieIeCYIgCA4ZgCXGvDUA74m+2CB0xKah++lNZFsfwuSLkXeeIG8rRfm5ayzYv3hr4Nsj
a8xH2fnrmHp+owFBEAQZgKXGUjcAkvpCVDgeRPGRkxhpU713YP4xlJeGsa4R5dDfx2hhFkZaBpRD
BEEQCsgALDGWugEgCIIgFJABWGKQASAIgiA4ZACWGGQACIIgCA4ZgCUGGQCCIAiCQwZgiUEGgCAI
guCQAVhi/NIGQD45ic7ObnR195JIv6h4OxwY/PE2/nPh+0JPTw86OjpYmp0k0jtXe3v7nHTAyAAs
MX5pAzDIDrgtLe0YF4khIpF+QY2NiVBf38TasrJxviWTzNQWFhaitrYWNTU1JNI7FW9npaWlrO3W
K1vg20MGYInxSxuAoaFhZgLm7/P3xNKira1zTgxAZWWlcAaA98xIpHcp3s4aGhrQ3NysbIFvDxmA
JcZ8MAD9/ap36xPELwcP/K2tHXNiACoqKoSDc1tbG4n0TsXbGe/9kwEg3hgyAAShgAwAab5KdT/J
i+NUw2QAiLeGDABBKCADQJqP4sFfda2f31zKx3V1daG8vFz4TQaAeGvIABCEAjIApPkoVbC/cOGC
8FckEiEgIAD3798XDAEZAOKtIQNAEArIAJDmq3p7e5GXl4dLly7hwYMHuHnzptC+VDeakgEg3goy
AAShgAwAab6qtbUVAwMDyMnJwe3bt4XAz88M8GlkAIi3hgwAQSggA0Caz+ImgAd9HoxfbFtkAIi3
hgwAQSggA0BaiCIDQLw1v7QB4G8CJANAzBf4WynnygCors+SSO9SvJ3Ri4CIt+KXNgD8FcC1dY1o
betgbpZE+uXUzIJ/c3ObsmW+PdwAFBUVobGxUTgwk0jvUrydccPJf/+9kAFYYvzSBoDDl52eniaR
fnHNBbw9894YPzA3NTWRSO9cdXV1wk2Cfy9kAJYY88EAEARBEL88ZACWGGQACIIgCA4ZgCUGGQCC
IAiCQwZgiUEGgCAIguCQAVhikAEgCIIgOGQAlhhkAAiCIAgOGYAlBhkAgiAIgkMGYIlBBoAgCILg
kAFYYpABIAiCIDhkAJYYZAAIgiAIDhmAJQYZAIIgCIJDBmCJQQaAIAiC4JABWGKQASAIgiA4ZACW
GGQACIIgCA4ZgCUGGQCCIAiCQwZgiUEGgCAIguCQAVhizBcDMCMZRkpKFiQziuGJ/nYkx2VhWjH4
xjRXFaCotlU5tHAQD7ahqKxWOfSmTLI6jEH3ONugjLL0OIQnFgm/ZyWDyMhIQ3FhNrLL64VxP0Zv
azXic8qUQ38/aVG+OHfuHNLKldtDOoS7l8/htkfgs+1bnRMvzJNb26kYMSPGY9dLuHbPE3xt2qpL
0NLz8oGJIIi5hQzAEmO+GICpnjJs0zRBjyJ2oSM3FJuX74JEMfjGPHHZD8db/sqhhcI0bl84joj8
RuXwmzKDI+Z6uB9dKQzZbv5P/O57UyHItucFwnDPEdTXV6OysV2Y/mOURLthpfkp5dDfR8qT8/hy
xTq4XLuEFd9qoqq9D65HzWFidwJmWhtx8nESRjuKsWb1Oly4cBrfbdRF+5gEjy/YQsfcAXY7NWF7
LQDDTQVwPOMCqdIgEgQx95ABWGLMGwPQVwljIxv0KQ1AV2E09DX2sd7fDKL93eFwYD9ueYSxIVbW
rkqccDwIx/MuGJXOYqClBPduu+KS612MKZcPvHscZx5Hs19SPLh+DvtsbRBb0CBMaylLZsP7cNLp
EoLSStmYafi6XcW+fbYIyeDBcxqRYb64d+0K7OyPo2VAKizHkQy1wd/fCy5nTuGI0w3IWIGGOqtx
4agjDh48iMTcJrb4GIIDvHD1rBNO3fRGSUEybFl+CYV1Qhr5iYHCvLeexgrro6KvOgXmLEjzVUiO
9mdB8zJbzg4FjUOQD7fi8YPbuHDtJvrZtvK6dYmlcQjp5R2KhZVk+LniqGswIGrGQYf9cHBwRM3o
NOLuO+GqdyI66wtQ1tiJ+tJ0eDx6gEO2tghKKBaWbWX1wstpaaoP3aN32Jjn9RKdX4+mwhSEp5aw
8ZPwue+BYVb4+rxIRKYVoDI/AYccHHDG+R5GJiaF9DgZ4f4obhgUfjvv2Ytb97ywx8wEE3xEZx6M
DR3x0PUEztyLEOa5e8gWV256wNbMCMK5AGkDtq01ZlsRcLLdheT6QdRnxCMyXnFmgyCIuYMMwBJj
3hiA3goYG9uiX3lOuLsoBqb6x1BTlIS/fvg1rt+6D+ebt9HWVgvTdWthf/wSDltrQ9/2PBICb+Av
361GSFyyEJA5gXdP4HpAAvwvHYCW2VH4erthzXJNxCclwnjjVjx84gsbrdXYtN8VUffPYYuuDXx9
PbD22w1IzS/E2u/+hH1n7uKCgyG27b+iSJQxWp+CX/32d7h+1xPmWmvh5BWPgkRfHD52EpfOHcTn
G/XQ2FSJTz/5I5zvPILWqi+wztAa92+dwRbzA8hPicHKb9fi0qVL0Fj1Dc484CZFQYznJdhcfSr8
1l3/KbbsPQOfhxexYZMhUuP88cmXXyIgJhGX7XZjq641S+MUvvluFTIqO9De1oa2rl4M1GXikNM1
5CUF4bJ7MOL9bsM7MgO3zhxCbrsUEW6HcflJAnyc9+CjHwzg43kP36zbgdyCXBit3yLUywFjDeif
dH+pXjav0oSryyWYO1xEX3sB/q///b8ivX4A1x3NcPGGO7Z/w9blyg1cueaM3IYeYR1epCI5CGZW
51FZlAqLrQeZhWBtZqgGB+0scdT8IB765gvzRdxzwpHDjrDVOYJhPmKyC3v1tdHLtmvo3VM4+TAa
fQ3VKK9aeJd3CGK+QwZgiTFfDMD0QBUMtayganpD5QnQ0zzIGtQIHl48DfsDR3D5ymOUpkXgk199
CKu9VrCyNIWOqR28H17Dafcg5ZIKAt1OwcXTC/u2G6FM0QHFE5d90NyyDQdPeAjDLbkhMDt5AQcN
TZBUIxbGhd92wJEzF2F/yB4iNjxYFoXVJoeEaZy+ingY2h0Wfif4XIH5hcfITQiFpaU59liZ47df
bUBmXgYs7e2FeYIuH8DdYN7DHhbOJlw/6YC/fLUee3bvxi697XC4+ECYj+N91QJnH4cLv+32maFK
WZ2OVlq47OKMQ853hWHDbz6HpqEFdu+xgsaWrcyMuGH7li3QsHRkve9xXLtwFHutrRFR1I3hqgTY
2drg6IkLQi861P0EbgQk48mtI3BLrBLS27V7D86fO4d9h9yE4ZbcUKFeHF6ol7DbB3DyigvOnTmG
i86XYb13D5wvX8SBQ47oGp9Agvd1WNg44NhJZ5Q09AvLqMhJ8GbB/xi6+cYdKIGBtplwlgOD5bDc
yXr8pw7h5pM0PgZPzx3GqdNXsM/cCsJmm+qA4QZtDMwCWY9cYGOvKCNBEHMPGYAlxnwxAJgRYe/2
H3DY9Qny8/Oxf+dK7LvyFMOtVfB+GobcjHj89Y+fwd0rGKY71sE/MQsJfjdx9MwDRPtdg/UFd2VC
Cp5cd8BF73C4HTaF+ZHryM9Kxva12+Dp7Qlt1uNNy87HmX0GrKd7D08uO0Df6hTy8zKhs3ojgqJi
YWZhhO5poDHNG9/qK4I5p6csGttMrYTf/rdOwOLsTezXWYuLnvHISwnEf3yyHMmZKTAyNxPmeXRy
D675ZLG9qAlGO/cjMvAhtmzTRUFxMS45WMMtgE1TEv6AGR3XAOH3Hv01OHUvGJnxPtDYZo6oMA/s
dHASpp2z2gHbs24oLsjAnp17UNUtnFB/ht95U/zDv/4VvXI2MD2CdX/6dxg4PRKmPb2+H5d94uB5
1R5Xg3PZGCm2aOnjSUgAtFj98Ho5ZrkVmx2uv1QvWstXI6GsHaFXbfCPv12Brt5eaHzyb9A58gjT
0n74ePmx8mRh+1efwvbcczMW73UOH3y7HJEZeSgvLcHI2BD2mW3DneAE3Du1G8YnHqCpJAYbdMyQ
mZGK1WvWILu2ExcPGuL8owj4ux7CBtNjYPEfoXfP4PDNEIz3daOjS+nqCIKYM8gALDHmjQFgDHZW
wM7cGLq6uth/8jpEM4BspBNODlbQ1zfEGVcv4dRxe3k8DHR0oGtujfLmPjQUxcMnStGDVJGb4I/Q
zEpMi3txzM4Cuto78DAsT5iWH+EBM3ML7DXTgu6xe6yXOYILR2ygq6ONG09T2RwTcHO/ixGWf19d
Di7ef34z4VhHOW4/9hF+FySH4HFMvlAefV092NjZY//p66hvqsUDT8VZhswwb8TnNgCT/bhzx0u4
5h/ucQm6enrY53QdfeM8SitoL4yCma0iyB/asx3axibQ1jFEckUnRlqL4OYbKkyTjXXiqK059HR1
8CAk7aX7CDjNBTE4efX5mQWfa6cRmq64MZDXS2xuJbLj/RBX1MTGTOL6jVtoE08hgxkqLR1d2B84
gFuBrD5fqBdX7wRh+baiaJxyZnXG8Lh6EgGp1ZidnoD75aPQ09PH/iOX0TPy/NbNh86HoaNvBCMD
fbZdjZDfOIYRtp1Ntbdjl9VBdIwq7q/wv30B2tpauB2UKAyPddfCykAb+sxs1fXxdjWL03YmiCjv
QlV8KPxCnhsngiDmBjIAS4z5ZADeB7KRVty57Yq0tDRY6a/HWY9Y5ZR5wKwEl44fRnF9C+yt9JDd
9twcLHUGGnKxz9EJY8/vLyQIYo4hA7DEWGoGYHZaigiv27C0tMRpl4fg6z6f6G+tQHZOAWKig9HY
9/Kp/aVMVW4qiutev7mQIIi5gwzAEmOpGQCCIAhCPWQAlhhkAAiCIAgOGYAlBhkAgiAIgkMGYIlB
BoAgCILgkAFYYvzSBmBmZoalPYrh4RES6RfV0NCwcACbC8bGRRhSkweJ9C7E265MJlO2vreHDMAS
45c2ALzx1tU3oa9/gET6RdXT24+6uibWlpWN8y2RyydRU9uAvj71+ZBIc632ji40t7QpW+DbQwZg
ifFLGwDuXIeGRpRDBPHL0tbW+XcbAKlUhq4uemSReH9MT8+grV35Ke2/AzIAS4z5YAD6++m1rsQv
Dw/8ra0dc2IAOliPjCDeFzKZnAwA8eaQASAIBWQAiIUKGQDirSADQBAKyAAQCxUyAMRbQQaAIBSQ
ASAWKmQAiLeCDABBKCADQCxUyAAQbwUZAIJQQAaAWKiQASDeCjIABKGADACxUCEDQLwVZAAIQgEZ
AGKhQgaAeCt+aQMwODjE0qUXARHzg7bWv/9FQBIJfxFQt3KIIN499CIg4q34pQ0A/w4Af21qZ1eP
8PY0EumXUntHN+rr//5XAU9OTqKmph6dnd1q8yGR5lr8NcAtre3KFvj2kAFYYvzSBoAvJxZPQCQS
k0i/qMbHRcJ7/OcCCTtojotEavMhkeZa40xTU9PK1vf2kAFYYvzSBoAgCIKYH5ABWGKQASAIgiA4
ZACWGGQACIIgCA4ZgCUGGQCCIAiCQwZgiUEGgCAIguCQAVhikAEgCIIgOGQAlhhkAAiCIAgOGYAl
BhkAgiAIgkMGYIlBBoAgCILgkAFYYpABIAiCIDhkAJYYZAAIgiAIDhmAJQYZAIIgCIJDBmCJQQaA
IAiC4JABWGKQASAIgiA4ZACWGGQACIIgCA4ZgCUGGQCCIAiCQwZgiUEGgCAIguCQAVhizBsDIOvD
Xq3N2LhpMzZv3gw980PoF88gK/IBHkakK2d6SyS9OH/6MjrEs8LgRFcFTtqdw4gw9OaUZ4bDKyJF
OaSeJC8XrFy9VlgXLpcnMcopz+koT8K1x4GoyY+Di2ewcuzPQYr7bjfQMCBTDv98kv3csVWDl2kD
7E9cwcikcsLfw+QI7t27iY6xGeWIH2d2ehLjIgmmR1tx080d49PKCW9ItO9N+MQXKIeA9pJknL/u
rRwCCsO8cdUlUDn0ItPwfnQT5R1jmBCJMDWjaBMEQZABWHLMFwMw1VeBbVsMUNbRje7ubrieMMNh
t3DEeJ3DkTuKA/m0VMzyeLlxisbHwIr/DNnEOMalL45hiFqgt30n6kYVB/uxxkxs/VYXqrV5tdxy
CUtDooyMs4qgJpWyoKWMFTyPUdEEVKFj4pUdhnPrqC1O349R1t+IMD9nWj6B8QlF4G5I94H58avI
jXkM8xMuwjjOs3WcmWL1qvj5nFnI5DIMjwxDPqUMuLPTEE/IFb8F+LYQKX69kEBh3AN8s0oTOWUN
6OpqhZO5JnYevs5CogIZW0cFU+wgoCivinFWRxMyRX4zM4q/khfWe3iYlWdyCiI23/i4CJOTk1DF
VjHbRiKxonwtOWEw2XtSqM9h1qZUpePpq8qhWk7E0nkRvp2kys3ifmEvznrEKgYYtclPoLf7jHII
iL91BmaWV5+tv3xC/Cz9UVZ3E6wtHd6zB+H5LZiSyyGTzYUTIoiFDRmAJca8MQC9Fdi50x6qphdx
7xCsrvgg0e8arjyNR0VWGAy0dGFsrIuDF+6z4DcF3xvHsHLtRqzZpIWSll4UxT+FgYEhdI2NEZxS
qkyJIW6DqeFuNIwpgsF4cw4MNu7G0OgAzthbwshQHzt22qBLJEVxgq+Qhr6xEcKzqtBVmYgtm9bA
eO8BNl2xfE7UI9wNSUF+7CNs3LwN29etgf7e06w3/bwH/PCMA/addUNOTg5y8gshZ5NKU/2wft1a
rFm5Cjd909FZFg3bszdRkOCD/VcfQzLYCAvdrdi4cR3MD99AeoQPDjt7sNSk0N2wHmUDM8jwvYpz
Lndx/eYV1LV24LC1PrR36OOH75YjIL0eMtazttTTYGlsxlffrEVMeZeiQJjBUVMt+Oe0KYc5vdDb
shPZBVkw0dsEPct9yMxKhZn2ZmzasAlfrtJCaVsP3M45wIDVqdZ2HSSVtaA82RubtmyD1oZ12GF+
HCOicVx2PoeC/DwYbdnEyrMVv/n3f4d/SgXCHztDz8AYutu14ZdQAJ/Lpvgf/+vXeOgbgAvXXSCb
luPuaRus3bgRqzfpobxlFFGe57Fxiza2rF0Jayd3ZgSGcM5hN9v2xtixwwD5dV0IvHsMl58kKtcD
qE8LgKndJeUQkOx+CQeOeqKrPg1bNTSgx7RW0xxdw2Lcv+2M0MgAfPDP/4xN+64gOyYcj73ilUsS
xNKFDMASY74YgFlRK9Z9+ies3bwFW7ZswYYdeqjvFSHq0Wlc8olDc0UWTp86DqdTB/Dbb1YjNMQf
mhsMMDguYQdwP3g9eYw1H32C3Q4ncMRGH7/9dDm6xMrERS0wMbJCi7JTO9FeiF0admioKcCaT77C
BZcHiExIQm9XNVb/4SOYHziOY3bG+PN3WxDqfx+apjYYFkuf9VbjvM7jpHsIIh+ewmarCxgTjTKT
sBahpd3KOQCf8/b47Lu1MDQ0hKG5DVpa62G0eh0Sqvsw2lMNLRbgfP094Oh8lxmAJzh1zwP3j9vh
oLMfJBIRTprr4eSFS7A7dAz5efH443/8T/jE5sL56F6EpRTg0H5zFFfXQGPDD4gua0dpzF1o2jnB
7dRhHLkSwtIYh9bGNXBLrFaWSA4HLQNk1b+4jSTYp2mB4BA/aOgaYoDV5SljPVx9kg2JuA8rV6xB
bEUbop7egpOTE0x3/ADNo/eQHHAVa0yOYoT17PW0tsA/KRv7rI1R0cvPvEzj4WlrfK1pic7hMaRG
eODkKSccMN+GL/T2o7ksDSY25yEaqoeZ/QHEBXhBY5sVxiUSJN4/A6uDF3HtrDVMnDxYm+zEivWb
UdjeB7+HV4Qy6Gz8EuZXfRHhce4lA1Cb4se221XlEJDx8BoOHfNBXUEAvtpsjF5WloO7deAalIJz
Ry2QU9cGJ5vdCCtowzQzk5OTb3ktgiAWEWQAlhjz5gzAQDULJrtQ2NiClpYWSJWd6YA7x+HyNBz3
Tx+Gw9nrePTgFj5fvQ13blzDLtPTipkmx1GQ5I+vPvoUrg8ew8PNFbutHNEnVUxmicN4w1YU9SkS
7S8NxaaNVpBPT6GmMAvejx9AZ7M+fJ/4YtUXX+Da/UfwcL8BW3snhPrdg8Plu8JyKhKfOuPMwzBE
el7EFf80YZzJTgME5rcLvzn3nA7BLapMOcQYrsbmZdueXXawM9XG9ds3cPTqPWYAnsLprjsu7LaE
R2K9MD3YxQ5n7njB/doJbNe3gIeXFw7tNoL5/tOQTMphZ2uGwvIK2OzbLdzL0J4bDIODTnDaZwPf
9A4hjQN7d8EtoUr4zbl/3hKWF/gZBQUtWb5Yr7sP1aUp2HNYcfrcZoc2UpoUp8NNzM3gExKBPYZG
eOTpiRM2htB0uInYgBs45xktzGNrZY4nsek4sN8C7TIg++kNbLc8pjjdLu+BmbY2bj3yxA2nffha
1wENpanY63gbmOlhfx3x5OZVWNjfEtISVUXBZI8tnC8fg096HRsjg66JBQLDQmGibwxPVgZ7k20w
Pe+FkMdnXzIAnQXh2LZjr3IIeHrOFoevxqIh1xd2FxXb7/KJfbjmF49Lp6xR0NSFM/tskdH08sGO
IJYyZACWGPPGAPSUQVvbEsPKYRVPbxzCJe8wuB01hb7VUbhcPIp//ugb5NY2wcFgMyxsHbBp9Q94
FJGCe2f2sF7gURw7YIH9p+7ixau6vjcc8O1qDTg4OGDNd5/iRmgGxroqsdvMAhcvnMOa71kPPqUU
9y9YwdTuCE4c3I3DFz2QF+8B06OXlakoiPU8h2P3ghD2wAknHkQJ43S0NOGf9/z0+s2j+3DZ54Wb
F2encPOYCdZp7YS1iQ522bigMjcEu09eE+4BsLvyCLXpAVi+bDkroz1+WLYd1T0SlARewD/8+1es
/w6Y/fAHaB58ICRnZqaP/LJymJoaoJtF28Z0H2zYexbFif5Y9e1aHDt6AB/85Qt4ZzYK83PkQy2w
0NwEQzNrloctm28VogqaMFobD509+4V5Eh5dwopVmjh2xBZ//GodgmOiobfhB1y8dAmmWqux1uYa
on2v4NBNf2F+s5168IpOxaFDNogM88X/+f/536BnfZAt74jo2EiYaa7ByYuX4LhHGx9ussJgRyW+
/uPX8PR5AtP9+9HV0QiDDV/D6oADNixbCe/IQty5aINbkcUsdRG26BghICQQW9eswCVWBu0N30L/
1CMEuJ946R6AWdkQ9u9aA62de9i6WeObFd+jqGMclXFuMDmi2H5ODubMNMTijKMZctuGccV8O3bs
uYKizHTExOYL8xDEUoYMwBJj3lwCkItQXl4Nueo8u5Ke9no097A+7tQoAny8EBYdj/zicgg39EsH
4OXpgdiMIsXMrMcY7u8Fr5BYIWC+SkFKDDw8PJCSU6McM4uqwlQ2zhMZRbzHyZlERIA3vAKjBQMh
GepEVUOrYpKSwe5mNHb0ob+rCU1dA8K4ivIy9I6pTjmwHnljHVp5uV9iFvHhfvB8GgJ+NWJa1Ifq
xlaMDnahuklx9qC+JEsoT1WnYlnZWC/KKhW9+NbaEjR2DQq/q6srMSYSCX9lrC4kIz0orGzApEyM
/PQ4JCbHQ1trA4IKFWcDniNFeNATIY/GXsVNdtLRPlTUKNZfJhlFRlIUUpPCsGHrJhT2TKKjLl+o
t/TsXFQ3d2GgpxUN7b3C/NVVFegeGEZTYz3aWhoRHhYGXx9vYf6y5l6M9TXCi/1OSs9CSbXCjGTE
RyEjpxQ1bBmOZKiN9e7ZdsypEIZbG6rQPsAPQtMoLi2DlK1fQ2m6UOas3HzUs7x7OxvR3K2oi2fM
iBHhx/P2REOX4iA22tf+bPs11VezbTKIZpb+qAwYaq9EaGQymqqrUFzSIMxDEEsZMgBLjPliAIi5
oTTFH3r6u2BvZYyNxjYYee5JfhZpYfdgZGwBK+Pt0LF1guT5fY0EQSxyyAAsMcgALD5qi3IRn5DE
ermvnE75WcyiLDsNCUlpQs+bIIilAxmAJQYZAIIgCIJDBmCJQQaAIAiC4JABWGKQASAIgiA4ZACW
GL+0AeCvkM3IyEBRURGJRCKR/g5lZmYK71F5W8gALDF+aQPQ2tqKuro64f3yJBKJRHp79fX1oazs
hReQvSFkAJYYv7QBaG9vR1NTk3KIIAiCeFv4MbqyslI59OaQAVhikAEgCIJYHJABIN4IMgAEQRCL
AzIAxBtBBoAgCGJh0NXV9dLxUiKRoLpa9cVPMgDEG0IGgCAIYmEwODiIW7duob6+Xrjpz83NDfn5
zz9kRQaAeCPIABAEQSwc+PHY3d0dV65cQWFhoXKsAjIAxBtBBoAgCGJhwY/HL576V0EGgHgjyAAQ
BEEsDsgAEG8EGQCCIIjFARkA4o2YDwagra1NOUQQBEG8LTx4kwEgfjbzwQBkZ2cLf0kkEon09uKv
AS4tLVUeXd8cMgBLjF/aAMjlcjQ2NgrilwJIJBKJ9Hbijwe+GsDfBDIAS4xf2gAQBEEQ8wMyAEsM
MgAEQRAEhwzAEoMMAEEQBMEhA7DEIANAEARBcMgALDHIABAEQRAcMgBLDDIABEEQBIcMwBKDDABB
EATBIQOwxCADQBAEQXDIACwxyAAQBEEQHDIASwwyAARBEASHDMASgwwAQRAEwSEDsMQgA0AQBEFw
yAAsMcgAEARBEBwyAEsMMgAEQRAEhwzAEoMMAEEQBMEhA7DEIANAEARBcMgALDHIABAEQSx++DH6
b0EGYInxSxiA6elpoZGRSCQS6f2IH5/5sfenIAOwxPilDABPj0QikUjvR8PDw2QAiJf5pQyAujxI
JBKJ9G7Ej+FkAIiXIANAIpFIi19kAIjXIANAIpFIi19kAIjXIANAIpFIi19kAIjXIANAIpFIi19k
AIjXIANAIpFIi19kAIjXmK8GQCKRCA3vp8TnUbcsiUQikV4WGQDiNeajAeDpNDQ0IC8vD/n5+WrF
p9XU1Dyb/9U0SCQSifRcZACI15hvBoA3Pp6XkZERbG1tcfjwYbVycHDAtm3b0NbWhgmxGGOiCZbu
JEbZsnx5kUT6bFhdPu9aP7Wz8PJNSOSYksuE3+rmWRxi6zYuwuzM9N9oX2NzYuJ4GmPP8hnB2LgY
01NTGOPleGVeEmmpiR9ryAAQLzEfDQBvbDY2NpiZmVEuoR57e3vU1tZCKp9Cd30x3B/6YUgsgUQm
Q11uMh7cD8I4+/08KLwvjbEdYeJH85VI5SjJiIJPeAJkMrnaeRaDuCkb6arDtTsP0DYwDtG4+gPI
GDMJE2KR2mlvIpFIDLFoXPg9zvLub62E+2NP9I5IWPv++w0GibSQRQaAeI35agB4718kEimXUA83
AHV1dZAzn9CUHYKNmpbol02DN/FMbxds2WiNCWHOWZbnDGameW9wFPKpaWYumFiZJeJxiCdkwlyT
rEfOe458XXmQ5stxEzLLluXL83UUsfLJZJMQ82A2JsLUpBwi8YSQlpAHK4tsqBlOx8+haXACE6Ix
IT0RMyZ8+WmlqQm5dwxmp24Iv2dneQ95DLJJZblmZjEpkwg9WP75DqEMszMQsW00wcrFf/N5ZmfY
+rDlpqZ53tPC+AkWAEdGFNtLNCEV0p9RTuMBWP5CHnIpC4wsUKrKNc3WZZwFY8W6sHlYffH7LHhZ
RsfGhfl4GSRs/SUTYsF48bLx+WVSMcbZOnJ4PUqkijqd6i7BX9dooLxbBAkvGzNHU8K2YOmz5ThV
GZE46+KNKba2whkcto0mp1g9semquuD5T7PfivVUnFGQyichFcoxKaQT7XUP7kFpbLkpiCRydJXF
Y8MOHbSNKPIR6oH949uE142iHnk+ivrnefK64fMI7UKiWAdhHYW2Q2cSSAtX/JhABoB4iUVhAFib
bs6LhI6RPfqlU5hiZcnxvwNDg+MYHR/EuSO2MNDTxlHn+5hgATA72hsGBsYwszuK1r5x5MU/we7d
Fjhw6hIGxZOYZIEwNsCNpW+HbVu3w9XrKU7sM4aWqS16hkbg4XYNObW9EHdV4pTzLbS2t+KMow3L
QwsX3YORFXUH//SP/wPWzt6QTTGzwALjaH8zjtmaY6vGZnjG5CMz7A42aO6Apb4u9hxyZsFzArG+
92CsbwQDfVPE5NajvTIDR48cgqWeLoytTqBvYgpd1Zkw1tsG7R2G2HPsCoZYgI7wvA5DY2PYnriK
7mGxYAJ4UCxOC8Vem73Q2raV5XERoyzYR/vcgpEBy8PAHLG5tRjqacQh293Q19mOyw9DMDI0gCun
DsCQleuEyyNE+z/GHd84TIs6cdjuEJpGppDw5DoLtEmozY+B1lYNaOiboaC+BzV50bDZa4n9Jy6i
vDQXJgZa0GXpfrpWF/UDEyyosmA9MYKndy9D39AYBjutUFjbiit2G/FP//I7hGTXsLqfhGx8APdc
z2C/tQ00NLYhJLUCM5MiPHY9DWO2nkevemBksAvHHfahsHUESX634XzrDnRX/AG/+mgNytoGBZPR
XZEM7V3mGGINJPzxFWhoamKn7Ql0DMsw0lGBPbt0sWO7PkzsT6F9VIqUwHvYslUTepYH0NI7jrSI
xzhwwAG6Gho4c+MpxMz4cAOprt2SSPNdZACI11gsBqApNwI6Ow9gUDYtGIA8djC3sLyItGA3/OnD
ZXB/7I2HvoEoz0vAtx98Bsczl2G+YwU0LU/g4bUD+EHLAmU1DcI1a7Y2uGC/A8sMDyLe/zZ+/avf
wS82AXv0NuBuQBwcrXUQnN8BaXMmftAxh8eNC/jkLyvxwMOH5RGE2rJUbFyzGWE5tZCyAI1ZOS5Z
6cHQ9iKyU8JgaXcYnved8dmyzUhKTcfmtcvhFp2H6Kc3cNzpAg5abMe3hgeQm+CN3/z5a8QlZ8BA
cy0ueYfhkK42Lj2OQrz3Ffzh260ID/TC53/6GuednbHl+09hdMgFvA/LzzNEuB/Hf3y1ARm5uTDf
8h3O3vFH+NNbOHH6IuxNt2Kl5RH4X3fCZ39lpsTLB94RsUgNuIePf/8Vbj/yxiO/IMSHPIDBniMo
zw3D//Xf/k9E51bi+F4D3HzoA93Vq+AVmwn/Gyegqbcffg8v4OsNuiivKITJxi249IiV84kLPvpm
MzMAEhb8JyAe7YEby9Pp3GXs1l2N9TZnkeR/E5u0rdA6NC4cQCDuwcblf8Hes54Ie3AGq4z3I9Lz
Fj795AdcZuv5w+cf4rhbBLIiHmLj6tXYtMMEZc1dcD1kgp37r2BMIsUEC9bcABjb2CM5/ClW/bAZ
GfkFOGWmIxilU5amOOTsg6zox/jdpz8gINgPG35Yj4TsfFzbbwJLh2u4eW4PPt9ogcyMKHz53XIk
VPVgUipW225JpPkuMgDEaywWA9BWGM1665ZQlSDH1xV6RqchkY7D664rjhx2hMNBZ4Q8vI6P//hX
OB47Ajvr3bA9fBE3nI/ikme0sBy/BICZaVw5boE7USXAQBnMDC3BLwh4XDgClweBOHxgFxJqWU5s
2qodO1Hf0wufu9dZHodgY3serU0VsDCxRvP4NKSs14vJfhiv2oiYsgEhD5FojPWCT8He+YEwfMTO
HBceh+LOWUdY2x/EPjNd/HW7DRLCH2HPqavCPNdOH4DtyTMw0bXCIB8haYG2pS2cTzjgz39dg6NH
jsDaYhfsnVwxMTmF6VkgxN0JR+4ECMsne52G6b5DuH7mBGz2s3KaaOHTzRboHezDQ9fLOOzowOrz
Elo7uxD44DaOHDmMPXuOs/otx0H73bCxOyjU4SF7a+w7chrpcQHYusVGSBuzfdhpsA3nLjjhxF2W
30Qztq4zUpRT2oJ1Wkao7B6HjB1I+D0Bh60tYHfwCMz1tuAH05MoSg6G1eFbQlJj/LLKSBvMTPVQ
3DuDsboUbLW0xzl7C3y5cptQLsud+nC6HcjmnsQX//O/QnP/HWFZj0vHcP5xvPB7fEImGADz/Q64
5XQMtsc8hPGDlTHYobkSmlssUCcc50QwtNyD00cdYblPcUlG3pYFfSNDnHZyxI2QLDZGhh3aOxCY
24Ap2cRrbZZEWggiA0C8xmIwAPx6vXy0C7u2fA0Lx4vw9fXEmmV/ws2QTFRlx8Dp/E2E+Lvj4w++
hl9wFIy2rYabfziuHLPC+ZtBeHB1Pw64+LAUZ4QyYHYG5w7o47xPKqRt2di+WQfDbKrroT244hmJ
c3ZGMHa4jMsHdfHvX21CeGQELjrfRbDfHXz4uy+RklcE7W+/wxWvJOGGxNnZKdw/uQcbtKzg4XYF
201scdfVCWbHrgjrsZcFu+PX70Lrh6/gFhjDApYVfrvSGLEhbtC1OSbMwy9BONzygZOpFqyPu+Lm
GVt8tNoAyfGh0Ni4FkGRsThoboRrj2NZ/U4KBiDO8xz+smwdvLw9obF6Le7cf4TN332JhyGxuH7M
An9YqYfIiGBcuv4Afo8v488fr4R3QCguXbqBsCBPfPybjxFd1AnfMyb4//1qOfqG+rH81/8dOsc8
MSnqgtaKL3D02j0WnHfBcM8F+D86B/OTN1k1TsBGcx2sT9yAywlL/MMHy1A/KMXU1Aw6i2Px9Sef
wT8mDqdstPFnTTtUZITi88/WI7e2ix1sZJhmBkB3x3qk1I2huygM32y3RFzIY2zashURMTGwMjSA
f3w+XI+aYd+xi7DQ1oBnchnCXI7gh03maO8fh3RyWrgHYKuxGfLT47Dy6y/h5ukDk43rcfrmE1yx
N4Gh9Wlmfk7g919vRFxSHDZ9/yWuP/SErfYWOJ73wI3ze3HyfhSr/WGsXrsG/jkNmJaTASAtTJEB
IF5jvhqAffv2QcaC50+xf/9+wQDwO+75DVt9rWU45bCP9Vx34653FOQsCg51NeAy68lZ7bWGZ2gy
plhgrCuKx57du3Hg9BV0D42jIDUC0RlFrIeqeLEQ/5sSE4CUonqI+hrh6+OPEVaWzNgwJLNxfXWF
2L/XChecr8DdNwLtbY24fOqQkMeTyAzI5HIE3L2Mk5c8MMaWE43za9+DcL96BrtZvvEF9WgsTUdQ
XJqwjuHBvkgvb0Zhsj+s9uzB2UuX4e4XheqyXPhH8icFZEiIDER0Xg3GumpwwckJ18454uvNeuhh
VVSQ4MvSZb3Y648wMDYh3OzH76GL8b6MDdoG2G+3Dze8WH1MTSE90kPI49wlZyGPjpYaOB2xx15W
9rC0EowMdsP13FFYWe3Fff9YTExOoqEwAe7egWy7TSHw8W3EZldicmoabVXZsN+7G3sPn0HbkBi1
hYkIjmfrz0+/1xfCwXo3Tpy9ANcHvugaFiluoJSIEeN/VyjDxStX8TAoHuMj3XA6dAB+MYXCukpG
+uDv5426rjEMtFbgrlcgpMzUxAXcw262nItnOHrbq3H18jX0sfVvzI+F631/tNUXwWHfAWRXtgvp
DLTVwNsvACK23nkJfkLdn3R5jHH5DMZ7G3H1/Elcv3wK36zfgrI+OWpzo4R5Dl+4jZEJObISgpGQ
V8nSGoGnlydKmrohmYOnFUikX0JkAIjXmI8GYGBgAKampmhsbERfX59a9fb2wszM7JkB4OUTK+96
F+B3yCufBVcxq3wvAL+LXQUPlnyY3xHP0+Bl4H9l8ikhWPE7/YXysnH8xjo+TqS8O1yABUX++JmK
GWUeit1sSnFXOxN/1E1xLzowKVUYFtV7AHgwlU2IIZtUPCEgwNLh68OfMuDzyHlEnxHjrvNxXL7x
AId3a0HX/iwmmKMR7pgX4E8psPKzdeBnAAJuO8LyrJtiEqsPvm5y7oCU8Pp4sezTkzJWzvFn5RSW
YXmL+RMRM9NCOXi6vPz8N38iQQW/s16xTlJhmuoOegF+lz1/uoLXLX8K4IXVnJ2SC3XMmZQp0lU9
KSBm68IfJeRPO/CyT/LMOWx4nJWbNTmIWbvl1/tnWDqqpx74Hfw8HeE9AGz78GVfrNvpSQme3DuP
05du4cIhc2zYuQ/D0hlMTj4/OPL9gT/lIJfwMo0KTwKonrDg6ZFIC03C/ksGgHiR+WgAeDpHjhyB
paWlcClAnaysrGBtbY2enh6IxUvjxiwx27maKnJx/vgxnHa+gdaBcSEo/di8NSWZSMwqolcmvyL+
2GZnYzmuOh3HibOXUNMxBOkE9exJi1tkAIjXmG8GQCXeq+cN8aekeNnO326Ui0V8G7x4lkPRI1X/
bDofz3vokzJFj1zdPEtVvD5U7yzgSMUiqiPSohdv42QAiJeYrwaAp/VzpG5ZEolEIr0sMgDEa8xX
A0AikUikuRMZAOI1yACQSCTS4hcZAOI1yACQSCTS4hcZAOI1yACQSCTS4hcZAOI1yACQSCTS4hcZ
AOI1yACQSCTS4hcZAOI1yACQSCTS4hcZAOI1yACQSCTS4hcZAOI1yACQSCTS4hcZAOI15qsBmJqa
EtLkH2FRJz6Np/NzGiWJRCItdZEBIF5jvhkAngZXQkICHj16BE9PT7V6/PgxIiIihDLxBqta9lla
ynSeDS8gKepA/bTFJXqdM4n0vkQGgHiN+WYAeOMbHh6Gjo4Orl27Bjc3N7W6c+cONDQ00NTUxBod
/yjQ+EtfBeSf3xXPw2+383JOTPz01wv5J3r5t/PVTVtMEupiiXzJkUT6pUUGgHiN+WgA+Pf+7ezs
lHP/OAcPHkRtbS1kUzNoL0uD4/ErGJDIIZ+aQmmcP44edsU4y0ss4mZAzNZR2YDZXz4sUn5Klwci
ETMMquFnZVEup+qNq4bHxxXp8LJyCfOwYb7+fFgI4C+kxYe5GeHTR4YH0d7RJXx3XzVdMY/CsExP
TcLn3jk8CE9nlTrzLC+VweHrohoW8nqhPLxHrVgvti7K9Hk+QplV664UH68qu2qaal6+vGq+Z2V/
NqyqE76uinXi+arWl48T0mMS0nqhHM/LNQb59CzqcqNgedQZo9LJv9n+SCTS3ycyAMRrzEcDwBsb
/+Y/Dxg/hb29Perq6lgwAZpywqChZYV+6TR4E8964gpNDTvI2G/R6ABaW9tYAJcIAXRyUob2tlb0
DI5iSi7F8DBr9GMj6OrqxggLTnxdZZNTGB/uR1t7B6QyuaDRgV6WTivGRFLWc2WBjJuG0SEW0Lsh
k8lYcB/ChGQCvZ0dGBoRQcIC5yQzIwM9nWjv6hPKXJ8ZDB1DW7SPTrBgyPMaZfNMY6i/G+2dvcI8
V46Z4qJXNEQjQ8Jna8XiCeF79W0s767eIciFMg9DIhGjq60do6IJ5XrJ0dXeht6+QbYeIxBLpKwM
o0KZxyUyIQ2+bryeR5hE42xaWxtEbJqE7bhStk48j+6+YbY+UkG93R2sDrpZXiwtto5DAz1smXa2
nlIM9vcpjQAzE6MKQzE8PID+oVFmZORCHfePsnLJJEIdj40Mo6u7l63vJAaHhpET9Qjfae/FqHyW
DACJ9I5FBoB4jcViAJrzIqFjZM8MwBSmWFly/O/AeOcpdDRVYJfOdujpaMLYzgmDLE0fVyds1zWC
loExMstakeB7Fd/9sAJWh89iUDwJ+eQkavNjsGXdGqxe/i0cXbxQlp8I/W3bYGSkD4Pdx9A50IfD
e3WxedMOfP/N17gdlIXqrECsXbcO25hWbDJG07AEWaF3sXLFCiz/fjlueCfgiYsV/p9/+ldcC0jB
FAuEMpZXXownVq1aieXffYtbgcmsfI7467ersXnVCujbnEP/QDfOHrCArqERNLZoIjKvFmlBN7Fq
zUZsWbkCW40PYIgF5KA7p7H8h9VY+e0yaB24gsHuRjhY7mRlNoT5/tNo6een3McxMzMNLxdHfL1i
DdasYXmw9enu6oCTnSn0jHge2xFVUIu8CC9obN0GjfXrcfVpLGoLkrFDcxu0NTfguOsD3Dh7BHfC
8tFVGIrVa3UwzoyMk40RfBNzce+sLX5Ysw7LVmkgu6ITofed8N3K1Th59Q78H1zFilVrsHLZl1im
7wDRNBkAEuldiwwA8RqL5wxAOHR3HsTQ5IxgAAqC78PC/AKyo73w109X4uZ9H0QmpqM4JQh//Oc/
Yv9RJ+za9gNWaFvj7lVH7HR0Zj1cOVsHEWYnR7Bn0xo4e6dgvLceV2/eQV5BFk4fPwSnk0fwhw8/
QkBSNgy3rYRbTCVqUzzxvcF+xAXfwTdbdqFvZAzWu3bA6fZDGK/fiNiyLgw35mDzmk0ICQuAsYk9
esRy1rOXQDbSgh3LlsM3vQ49tTm46/EEzqf2Qs/BhZWlDSvXrEF0UR0CHjjj6Ekn6Gz6GtscbyLk
/kmsMzmGkfEh7Niugev3H0JrrR4ahsVIe3IFq00O4u4Je/z587VwcjqFLz/6Dzhc92e1NiNcWrhw
QBf6x26znv0YLDS+w02/WAQ+virksWP9V9A5eQP3j+/Fhm2meOIXgPSyKgS5HMd3yzXxyMsf8VmF
SPC7DttTLgh0P4l//f1nSEpLgoWFJZ48uI1Nm0wwIpEh3v0MjPYchbPTXthde4qB6jSsXbZdKGf6
06v4doc1xibJAJBI71pkAIjXWAwGQDY1i+6KJGxcrYVOfs6fEXn7KHSZAZDKJUiLj4H7bWdobNyF
Rzev4PPPlsHdywvXz5/E0TO3cPvqUZx7GMaWmsXomBgzkm7o/7AW0aWK0/Z1teW4fuIAjK0c4e35
CF99+Q08whOwn/WYS3tn0F0UgfWmhxHufxv7zt8Wljl50BqHL1yG3kZ9dEzyMRMw1d6IR54esLQ6
ASkbI+KXJLrLsfGbDagUqlaG6ppqXDq5F9cCUtnwOOv1G+OBz1MY7dDBQ28fHDDbgW37rzFDcBan
H4SyeWaxe7c5nC6ch6GhA08ETVkB2GZzBKetjbBBzwre3p5w3GuB20/jhLMOmJnGlWPmuBmaK8x/
2cEIdoeOwkTfCI99fLBvlyY2WF3AmGgAUUH+OHfECju0HdE2MITkqDDcdD6BDestWVmLsdtYS6gX
93u3sW3DOpx180eKtyt0Tc4IafcVhUJvpznOnTmEe9HFbDgcW7bZCNOas/zxg54tRuUzZABIpHcs
MgDEaywGA8CvR09LR3HKRhOrt+hi/34bfPnV54gsakJFahD0DS1w5vRhLGO91/S8Ehw034K9jqdg
ZqAJV49YeLoegqPrU5bijFCGqekphNx1wverNLDXRAs79h7GrbMOWK9pAOeLTvjN7/8Ej4gE7LXQ
RXaLBO25QVhheABhT11hcviSUDaHPQY455MANyczrNqqB1OdzTDYfQndbaX48tcfwdU3DZPySUxP
SXHv5B6s0tDHrh3rYXnCFdfP2uHMo2iWyjA0dmjjvs8TbFv1Hc6ePw+djd9hg7Uz/NxOwsHFh80z
BX3d7fCIy8Axw60s8O6FgcYP+H7XCZRnR0Bj01qcPXcGWzbvQHxhs3A9nm0s3Dy+E58sW4d9ViZY
o2GOpPhwbFz+Lc6xPHas/xabrM/C1/0aLG0dccDSELpmxxH09AF2WtjCiRmC5WsM0DMmwwndb/Gl
znFMi1rwq//7/487cdWQDdRBe+2X2GllizXffA93/3TcOrcHF3ySMCvpw57Nq6Bjag3N1V/gT5v3
QDzzt9sfiUT6+0QGgHiN+WoAfs5TAA4ODsJTAMJjgKIJyCeGEeHnBTc3d+SUNrHgOoWJ8SEkRgaw
cfeRX9nEgvs0Rvpa8PC+O55GJgvX4BuqilFW2yTc7a4oxxjrKcuQHhcK9/uP0NInwpRkCCG+j1kP
2R9pmTlobG1HcVE+ugbHMdjdgsyCUrQ21aKwvFq4+72UTato6saUfAyhvh647xWAvnEp5NJxJEUG
ISa5SFHuMZa2bBxRwT647+GHQZEcjVVFqGhoY+mMIDsnG93D46gqTBYef4xPTkVRZT2a6itQVqMo
c35eLhq7+tBSU4iIyBi4XdqP9WaHhDqqKUoTlssqbxRufhxl25GfAXB1soLdmWvw8fZGeXMv2yZT
KMlmhoXNm5CShsLKBowOtOOp533cf/gUHYMiSMf7ERbgBXf3B6hu7YFMKkFTdSFKqhsglYwhNzMV
rT2DkDBj099ei/vubghOzBEMVXVZASob25hZk2Gwsw6PWP3HJKYgp6gCoyLFUxSvtgUSiTR3IgNA
vMZ8NACDg4PQ19cXXvSTkpKiVsnJydDW1kZDQ4MQSEdHR8Cf/Z+emRXykLOeLg92PJhPTrEuJh8n
nVA0cPGEMDw7PSnkyYOSVCIWpj0vC19OsbNM8EfcxsbBk56dmcEUMw0TLPDKZHKIWL2NjYtZb16q
uKbPgiJPR3hyYIIZCrbcNM9+dgZi5V3/UyyhSbliPiEvYR5e7lkhPaE8wh37oyxoTwpPC0hlbCMx
eN58PcQT0mdlnpyexdR4Jw7vNYaFtR1WLvsa98IymQGaZMsJ1x/YMqr6GBUMgPNRU1wNSBemSSd4
OqOQyV/Og9enojpnn9WBqn4Vy4xgQioX0lY9zSAWKZ6i4OXjzEzJWZ4jkEj5kwaKpxBE7CDB4Zcj
JmXSZ+UikUjvTnzfIwNAvMR8MwA8DS53d3ccP34cp0+fVquTJ0/CxcUFAwMDwqUCdWktJYmYCepr
b0JEeDgyCytYMFcEXrXzsh28pbEWzR09yufyX5+HRCItLpEBIF5jvhkAlfj7/jk8XXVSTfs5jXIp
iG8fkXhC+IaCnPeq1cyjEp+X76gTzDjxnru6eUgk0uISGQDiNearASCRSCTS3IkMAPEaZABIJBJp
8YsMAPEaZABIJBJp8YsMAPEaZABIJBJp8YsMAPEaZABIJBJp8YsMAPEaZABIJBJp8YsMAPEaZABI
JBJp8YsMAPEaZABIJBJp8YsMAPEaZABIJBJp8YsMAPEaZABIJBJp8YsMAPEa89UA8Hl4mn9LP6dR
kkgk0lIXGQDiNeabAeBpcN2+fRuOjo7CB4HU6ciRI7h06ZLQMIWPAbFlpDIZZErxr/WpS/9da4SJ
f52Qf8FP3fRfWrx8YvH8LR+JRHo3IgNAvMZ8MwC88fHPARsYGCA+Ph7Z2dlqlZWVBV1dXeFzwBIJ
/9TtEGrKS5CTnYUsNr29ZxiTshc+ufuexOuxra0VPf1DP2uHed8SjY+ioa4aHT0DrK7JBJBIS0Vk
AIjXmI8GgDe2ffv2Pfsi4I/h4OCA2tpayFmb7qlKw9cffoCNGprQ1NiI5eu2o7C+R/hWvXxySshT
IlZ8j35CIhWGZdIJYVgklgjDcmYYxkViyGRSYbyENXz+fXv+vX/VF/Zk8kk275TwbX/+fXypVAa5
XC70qCXCN/ul2G1qgMeJ5ZidVHwnn+8UPK0plgc/MyHsZCwfVZ7C2QuWDt8GI6NjrFxSjLG8VOVU
fEd/lBkdqZCXRPktfv65X/7N/qmpaUzJZUL5JDI+nZ8RGRfmFYvFwg48OTWFSTbPpGQM3o9uIa2s
GbNsPVTpPSsPqy/+fX4hXTY8NSX/m22DRCLNf/FjBt/Hfwrh2EQGYOkwXw2Ara2tcGr/p7C3t0dd
XZ1gAJpywqG76xAmldPcz1nC9Pwj9msamQnRCA2LQHP7ICYn5WipL0NYaCgKy+pZsJejr6sR4WGh
yMyvRH9XG8rKq4SzCs21daynPITRwQ4UlJRAzoJocXYywsJj0DfOzMFwH2prKpGamoLuoXE0VOQi
KSEGO7S341FimWAAuDFoaW5AXXU5IsMj0do1JATd0f52Ic/0ohrIJaMoLS3FyPgEJsZHUFZaguEJ
OVprixHKylnTNoBJmRgN9bXIyUpHUWU9MyYijDPjIhUNIjYiDDFp+Zhk9Vqcl4GGjgHMykXC2ZDG
llahx58QE4l0tn5TU5NoaWpAT18/+1uP3Ox0lNa1YoytI6+TrNI6TDNDIRrtR2xkOKLi0jE0yvL6
GTs/iUSavyIDQLzGYjEArQXR2Kq5C3lVdWiorYCV/mpcfJKI9HA36OoZw263ETTND6K0MAc7Vq+G
jd0+6JhYobi8FFbbN8PUmg0bmMDPz4P9tcAw66lrfP5rnPHKREnkbRhYH0fU05v4fuVG6G/bgO07
T6KxKhvLvvwIensOwufhHWxZswY7d+rjP37zMfyz65kBkLKKmcRp2+346Iu10N++Hht3HkJXZxsO
mhrAwsYOO7bvgG9ELOxNdiC8qAcD5THYZmyDrLR46GvugJ2dLbbpW6Ksvh5m27/D8k074BeXxXr0
05CO9+G8/W4YmlnDUF8T1zyiEO/ngu1mh/Dk7jno7D2F4rRgVp7fQMfQGN/85+cIic/HKUdzRKQX
44DxKizbpI1Hnh5wsDDFnn122MbyDE/Nw63DVtiiawYjXW1c941lxmlS7fYikUgLQ2QAiNdYLAag
pzIFn//ut1i/RQObNq7D/tPXMS6bQUVWFPbttYTt7p34l0++RVRyCiy3boHdsYt4EhSDjvYa7Nfb
AuO9R/HAKwjtPR04aGOK+17e2LHmCzhcuItrZw/hzpNAmG7ciuSaESFvO8MtuOTiAuPdVsLwUT1t
3AsvF37v0tuOhwn8DAAzANMyOO7VxkW/bDalBxt0DHDb5RJ+929/xl4bG2xf/x00dh9HmIcrTtzw
R/Dd07jmHYkb+4zwly/Xw8bGGt9+9gHOXHfH3t2GyKhn+c/KMcFWujknFL/7x19hl5UNdmpvxJ+X
bcYEy+WW7Sb8t//1FbrkQFXCA2w2PyCUKy/gEowsbXH0yD6Ep+TBzkILme0yFPlexb/8+yewZuXR
WP01tPYegds5R+jq78S9+4+QVVwLsUSsdnuRSKSFITIAxGssmksAueHQMrTH6CyEa/jC7QPTI7DY
uBInbvsjK9EfH/7nMoTlVqGiuAjZqTFY9tFnuOYZj7qqchTkpmP7d1/i6PVIJAffxkcffY7HgVE4
b6uLL9eboIX12o1XroBveh1b2TGYbtuI63duwczWHlOYxWGD7XDxZUF+Zhgb163Cw8QKhQGYkuLY
Pn08jCtjldyATXomuHvjMr77fj3S8wrg4XIGxy55YKSnDja79KBnbIWGQTGuWu/AdovDKCzIxSl7
WwQER8JqjxEyawcgnxgXDEBLXjg+/8vnCE7JRoT3Ldg6XMK4eAD7jbfiL59/j8TSDtSle2OriS0r
IRB+6zCsHE7j+OG9CE3OwYG9BshqFSPD8wK+/EED2fmFcL98AqevPEJdfS3LOx9nrbWxfMM+iFgC
42q2F4lEWhgiA0C8xuIwALNoKYjFLssjGJBOKR9xG8PUlAwel/dj5VoNmBrr4s/LNRCZlARTrc3Q
NzCAhpYZktOz4GCuAx19A2zeoImQjBqMN6Xhk4//E9UjM/A5Y4YftB2E/DJD7+C7ZcuwfuVy7Dni
/v+2dybeTZwJvp2/YP6Bd968N2fOm07P6Z55k5fudNLd2UmAEBygEzAYkkACZgdD2An7vgdCEghb
wr6FAAmBAGFJ2PfVG2C8SJZtebe8wu/VV8ZBIJm2Cbgtffdy7pEllUolqdB3SypJunnlkHoNHqqi
6tu6cnCzWjz7rN56u51+9//+oq+Pp+pWZbkbAVNH99aqPeedbkjVW90+0NnrmZo5/B3FvN1ZrdvE
aN33J935zxn4ttrFT3X/zrh8WF06vKYuXWLVLq6frqQka+jgnjqSmKMKJwDMjoOV5aVaOmOQWjnL
3TbmDX2+YY+WTR+swdNX6drpXWrXpZ92f7tWTz31f9W+Q3s95wzyJy6na/q4Afr20Al9NLy3frzs
U2VRlkb3fdu5P7qotTOv7w+f1pKpw/RGh87q8GZ7Tftsi8qrqt0dE8M9ZojY/CUAIITmGAA+n08J
CQl3pq6f4cOHu58CKAsEVODPVVaW1x0Yf5mf2Us/UKrLF87pavI1ZTvzLSoNKM97U2fOnFFGtl/V
VZUqzPPqrHP82k2vKp1Bu6iwQL4cr4qcAMnP8zl/16785n33zBvJOnvukkorndAozFNmlqd2z/2q
KmWlJenilSRlO9Pn5NV+DNCY7c1yjuc7881XRmamCkoCqgyU6PzZs0rJ8LnLYKbLy/XKk5PrPBZF
KnfmX5DrcZbzrHKKylThTJ+ZlSl/fuHdgdjsqV9ZoSvO7buUmq6a6nIlX70qvzN9ZWXAuV6f9mxY
qHcTRisl9bpuev2qqiiXx5lPrrN8Xk+W8vz5KikrV3lpkc6dPaPrnlx3ecpKCnTh3FlduJLq3DZn
+Zz75Jf7FREjTgIAQmiOAZCfn6/OnTtrxowZWrRoUVgXLFigdu3a6fr1685KV+YO9qXhvvzHOd18
BM9MYz4SZwbPkpLaj8bVTV/sDPTmeFlZ3fvcRe6X5dSdFzzfUmcFLy8P1N5fzu018ww+L3DneoL3
mjfXV/uZ+yKV3VmGIvcjhM51Bs3bfBTP7N0ffDkzTYlzn5jj7vLf/zg512Nun/konztN0JcQOQ+r
zu1bp4RJ82T+25uPQZrTS+4snzmsm5/52F/w8pjlc+cbKLsbHIgYsRIAEEJzCwAzD+OBAwe0du1a
rV+/PqzmvN27d7ux0JAV01bN42buo3DnIaI9EgAQQnMLgDrNx87MFwE9SDMfBv8Ha+4f8x863HmI
aI8EAITQXAMAEREfnQQAhEAAICJGvwQAhEAAICJGvwQAhEAAICJGvwQAhEAAICJGvwQAhEAAICJG
vwQAhEAAICJGvwQAhEAAICJGvwQAhEAAICJGvwQAhNBcA8DMy6yID7IhKyQiIhIAEIbmGgDmp4DN
d9g/SDMNEYCI+PclACCE5hYAdVv25qd+e/XqpYEDB4a1b9++6tOnjzwezy+/yGeWsaKqWtWV5e7f
98/78VmgouJSVVU25GdznfPNz/hWVTrLXeZcpkKFf2dZzW0pr6hyf82v9nY18PqKilVdXaUS57Et
CHc+Ilqjee4gAOAemmMAmJXNDP7p6elht/zrjI+PV1JSkrPS1f50r/n52jOHf9DBE5dUUR4Imfej
0h2QK6tUWV7m/m0G49zMFH23Z6/yCsuc+yH85YzmZ3fzs9O1/6fjSk26oN0/HlZx6YOXtay0WGdP
/qxLqRkqK3ECyZlHnueGDh05Kn9hmJ8INjqDf7Hfq30HDikjJ9+5X3mlBNFmCQAIobkGwODBg90V
70EMHTr0bgAUlaqmPE8fvPkH/bFDvAor5W75moHw1p3pKwKl7pZw9a3b7vHqioBzuwpVUXXnP8Wt
ancZKquqna3tYhWYy9ZUu1vqNTV1c7nt/F2lE/u+174Tic75zha8EwA56YnauuNb5RaVO1PUUlN1
d+ve/Y9VUlZ7euYpPR8Tp+MXLujbPftUHHAW9g5VZpmc6avuLKO5Pt2u1JgBsVq843TdKUo//Z3a
de2urMJbqqq+u/zuKwJOILgE0vRSqxgdTs5RRVnt7/wjop0SABBCcw2AQYMGue/xP4ghQ4b8EgCB
qts6u2eNRk+YrKF9e2nzoURnAC53ttILtX7ZQo39aIJOJmU6C1ql3VtXaezYsdp97JIzl9s6dXCH
e3zZlh/cLfsDP+zUxWteBfyZ2rpzt1JSErXru21aMneWZn+yzokDv7q3ekrPtP5AaXlFKg8E3C3y
Az8dUakz0G5bt1Tjx43T5u8OqzRQ7gzKhSopK1dxbprmz5qqKeNH6MWOPXU+JVVHT551tvDzterz
+RrnXGbPkQtufHy3fqXGjx+vT5Zu0e1bNZrzUbyGjJ+p6ZMnau/pa/InH1bsB71V4Px/vnx8jyY4
0y7ZsEsV1bdVUZytJR/PcqYdp+fe6Kjj1/0EAKLlEgAQQrQEgDNXzRz6gRZtOaIfVkxQt6HT3WmW
TxqgVh3e14xxg9W+5xBtXP6xXmvZTnNmTVart7pqy8bVeuOVVzVr/jy9/tcX9MXGfRo1KE6r9idK
3rN6rm2c9u7dpv944jcaPX6GYl59UTO+/Fqje7RRy46DdNMJgMqqW+4WeafeA7V7/Qo9/dRLmjVn
loZPmq5rvmJngC9VdXm+Pnq/i94d+JHGJ/TQk626a+/OL/XB6Enaumiannm+vebMnKqJC5frWtI5
DRvQS1MmO8v40p+dLf8j+nzC+3qqVRfNnjFOL77QWru/36HeH47Q+eMHFfNyS42bMkXtW72i+Wt2
6ouJQ/VW9yHObR6k//PkyzqTUUgAIFouAQAhREMAlFfWqDwnUa89/Xu91LKt2rz2vP7Xf7dQVn6O
ujvHDyTXrtAF/huKf7Odlu286B4vL83TxPh3NHrON+7xpL1L1aPPQI0aOUBbjqc5d0qKYrr21nff
btQ7A4e702xa/JH6zFmjHcvnafbq/c4pt5yt+yplnNujrv0SlJpyVaMG9FPCsDFa9Nl6Zfmd/xTl
VcpL+UlvvvaO8s1MipPU7r2B2rV9tXqPnqrrl08qIb6Xho8er5Xr9shzM1HjP+zj7gfx8l+e1IeL
NmnRtMFauf+qubSmD4nVmElTNNIJhJWzJ+mJ/3xO8c7lYzu8ofgBfdWlfS8luTc5X+06dtFPKbwF
gGi7BACEEA0BYN4T/+bT8eo2aIpKAwGVB0o0qkeMJi7dpGnxXTRs1lolnT2g0VOmasKgeL03wBl0
Uy5p3IRxmj1xlGI6vKfk6zc0pXcXjZn1hUYPfFfjlu7SsW0L9Js/t9XuXRsV13uQe51LpyUofvZq
bZw7Vj2HL1KgslKB8mqln9mlju/H69ipc9rx7Y86dnCrnvgf/6FNh1N0+1a1ArnJ6vTKq1q777wO
bJir373SWbt3fKXuCaN06uRJ7dp7RPu+Xqz//P2rmj1hpF5r+56uXr2q9996Rb1nrtG8Md3Uc/yn
up50Wn97/Q2tWvOleg0Zpl0blqlF63Y6c/GKFo77UAuXrtGgLm9pwfqDOr9vtf7tv5/T8bR8AgDR
cgkACKE5B4D5eN+DqA2AZN2qCWje2A+16ceLul1Tpapb0qUfN2jgmDnKyriiXnFvq3XLVzV39S6V
FGRpVL931eb1Vho28wuVlBZqwYT+at2mjWJ7jZGnuFIX923R66+01Lvd49Rj+HSdOLZfU+YtUnV1
tXasWazZ6/Yq5cg2tXi5rQ5fzHBP9yQe1eR5C3Xl/Al179RBHf7WQSOmfipfYZlKis3bBNU6tmOl
Wrd4TXHdnPmOmKWTR/ZozpIvdeHoD3qrfVv97W/tNWvZNnnSkzWoe0e92f5tZ9qu+mzrQe1YPUcx
MW3UplVLTftih/zpFzR+xmyVVAS0fM4wtWn7pjr1GKSrmflKPbZTMS1bKLZrnDr2HKqrniJ3v4Jw
9zci2iEBACE01wAYMGCAqqqq7lwiPAkJCUpMTHRWulKVlJQq4Bya5TSWOitiaUmxSgMVqq6qcPfk
r66scAb8MtWYz8Y701c78zevMpg9/EudwypnuczH7AIVFSoPlLk7BJrLmGUKlNV+5M9cvqy0xJ1/
edBHDYuKip3lcM4LlKuqstydrwkDM/ibTxrUftqgWuXOMt6db4m7f0CgolKVzkBeu0yV7ryrnEP3
uFkmZ/AuLTPzrV1+89n+umUy11t9Z/krq2vc7wow86soL1OgvNK9rWYnxOD7GBHt0zx/EQBwD80x
AMxhjx491L9/fw0bNiysZuu/Y8eO7ncFmIE33MpZd5o5vOf8O8fvDox3jgfdB3WXqbtc3WHtZe9O
Uzd98PG6y4UbeH85L2ja4NPDTVc7n7vHg6e5f/r7jwefhoj2SgBACM0tAIxmPjdu3NC5c+ceaGpq
atjLIyLivRIAEEJzDACj+9n+QODvGu6yiIh4rwQAhNBcAwARER+dBACEQAAgIka/BACEQAAgIka/
BACEQAAgIka/BACEQAAgIka/BACEQAAgIka/BACEQAAgIka/BACEQAAgIka/BACEQAAgIka/BACE
QAAgIka/BACE8I8KADM/RERsGvPz8wkAuJd/RACYac1P/SIiYtNpnnsfBAFgGf+IAAAAgOYHAWAZ
BAAAABgIAMsgAAAAwEAAWAYBAAAABgLAMggAAAAwEACWQQAAAICBALAMAgAAAAwEgGUQAAAAYCAA
LIMAAAAAAwFgGQQAAAAYCADLIAAAAMBAAFgGAQAAAAYCwDIIAAAAMBAAlkEAAACAgQCwDAIAAAAM
BIBlEAAAAGAgACyDAAAAAAMBYBkEAAAAGAgAyyAAAADAQABYBgEAAAAGAsAyCAAAADAQAJZBAAAA
gIEAsAwCAAAADASAZRAAAABgIAAsgwAAAAADAWAZBAAAABgIAMsgAAAAwEAAWAYBAAAABgLAMggA
AAAwEACWQQAAAICBALAMAgAAAAwEgGUQAAAAYCAALIMAAAAAAwFgGQQAAAAYCADLIAAAAMBAAFgG
AQAAAAYCwDIIAAAAMBAAlkEAAACAgQCwDAIAAAAMBIBlEAAAAGAgACyDAAAAAAMBYBkEAAAAGAgA
yyAAAADAQABYBgEAAAAGAsAyCAAAADAQAJZBAAAAgIEAsAwCAAAADASAZRAAAABgIAAsgwAAAAAD
AWAZBAAAABgIAMsgAAAAwEAAWAYBAAAABgLAMggAAAAwEACWQQAAAICBALAMAgAAAAwEgGUQAAAA
YCAALIMAAAAAAwFgGQQAAAAYCADLIAAAAMBAAFgGAQAAAAYCwDIIAAAAMBAAlkEAAACAgQCwDAIA
AAAMBIBlEAAAAGAgACyDAAAAAAMBYBkEAAAAGAgAyyAAAADAQABYBgEAAAAGAsAyCAAAADAQAJZB
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
M+Wf/un/AwZrpn7UcvgjAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text

						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
		Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}



]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>