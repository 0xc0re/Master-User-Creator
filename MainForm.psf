<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>I9Ji1nOlpgYDACODCAAAAAAABADsfVmTskrW7n1F1H8w9sWJcz7214wKfKd7R+CAihPOw00HIiCKgICI/vqT
mVpq+TqhllXvPs3uqH5TyGTlymeNOfDP2nCiqYH/1/tbIvHPTSERrFztX380V36gzf7RNe2Rs/T/
ITrebPP3z8SpW38mOprnm479L+YfBPzvz0RmYQULT/uXrS0CT7H+TMiLoWWqJW3Vcqaa/a8hyypJ
NZkieZrRCI7/I2ErM/DmimLasM0/EurYtEYeePSPjGMHnmP5fyBKAa2y57iaF6y2dYRF4DRVxdKy
5kyzIR3gUZKn/kyAP//EP56+VrvijLQ//sq65m1VzDV4uuUttJsf37wg7zlLwR41x55pT6/WTSvq
NONYjvfHX1s2XK2SsUzNDjb0kUSKBWygWO5qNcj1tOONNK8ZrCxQVzQjbdQ0bcO63sWi6tgfwwPu
pk1b8VZ/CYKQFoS2kAN/BSEnFIW0A//ZMeAdo4/uZwTBFKaCUGZyoGwU4aN1wRBKRh3czmfBs5Ws
ILy/bVrIOBL4nR0zwvZCLUhpUJYGsAVn8y5wZfb3txf4OdvL1mFr5JIQDq/udIITpFvEMVJpyngI
yywq82fLnAXKzKz1/mbKnLBkWTxdybD4siwscG7TrAiewFGNPqzhwhqpEShjNiqTv5bf3/DUWGng
/HBVaeFpH7TItECLvLUsh7iA3pCGLeKwxqQDWkBlLg3LAiqLuzLg2+aXfiPk0pFf3rQQFUCLeBO2
6HKwxQKiGdbAIU1MBFtA5UMuwVH4uLKoBmwhp4IWqAkoY1lYTsE38LBFPgXLgx0XsA5qEZaXn1vb
X7termhI4wCWOfgGfA3LSVhmIc38eMdXQkR8W6VPUo0uxDdEcw62UIR8XYewxSEsB7DFFQvvGxu+
bahGnBbhL0M4diTsBY+e6MP7pAXfSMByppTvb98gwxbX8I2pDV/f31CvUL87sAUT1iDhyOCj3Vgi
zuMuLDMIX/D5FBpLAwcX6gPRAq2BNlef0bDtNawRQQRjNGpR/MAXX4flJuxDEtKMU7AcbPgWVVEL
Jy9xhy9Ug+3saKrsxxLdFzd8G8N34MGulx+jfaJFRPMQ9XoAn08fP//+tvtlhfjiwbJj7TB+0OwR
F2gkxxEsVzq/4G1Pwwg+wSC5hGPLZY/R87mXPMIb1kF8o6zP7zzoVQuNLbyPSSe5cETz+1se0sAh
qnU0VpAvS9hrrgDLNVjmkvD+HJVPtvgL3zZU52CZRoiWYAsZWA4hjRiUdDyAZQU9L/2ChWM5PeL0
ugF7OUV8RBpyvMMf4sKy8anFX6S+hf6CnhQzUEFjsIRDE1HYKPkJ/JNbwkdAK5WKDB4qjEE5YlTY
WkWDvwhZ8AsDn5AFXdjagTz8k90QfWAHpA87cGwFNnxzIdU84rSG+GbdV35/A78gXWEjxJLnpezg
Qvgid3ZjpxkA3o5+iVOmYZ8inhxsdfb7mwh1xxrpqyLSJUc0bFqAvcIQOnRkF6DUYUhOjc6+vOHb
4S9HZYS3tijw+FIuLLc6eAZ1MIZDO6HstdkHQj7TwCsntfoN1xHe9nagAt8ZwTIOacCEQxrOUXDa
Zl2/9tZSUHc+Qm1jFyJ1R0NmT4P82SLfwIULtO173YdvmMA3pqA9xUJkT3dcwDuwPAcjA/0QD44N
skW4taNhdM9IQDn9oIGX4Duw/TtxWMa5s2WkxVM7RGPZQ/0Wg4g9F9rwDQYsJ1lkTzETeS67kcCR
DbfRE5BPPLI8XuezP1e29lr/hlG4TNNJPH7wbfMwfGcdvhPr7CR7DWkiob3lXFiWkLVEOne6LyML
P9zwLdM5onpPQ/kWmUAeJTXY6LfFkeeCaEiKOxotVEaWBtKEq7C8gH2gkD7soRbLKxrgbUMD8iGn
SDfokPPtkzSgsYe94qt7W4ZGhtvI6WmNmDwqkztrWEVjmUkF8tarRT7oEFKU3/pvx9eRzc9CGgjk
Mbb2b0D2FVnwESyTG77xPvK/rM8eIAHLq9O+97kL4u3IIiMvdeND4pCmJBwJrnvKT8lAmmg0MusD
vqWgP8YVb5f0Ay4gP2YToWzwhkY7+tWv+DyWkEasveMbGksudUjBNcna01Amd54NBss98qqc7vnC
7GI9hB5+dYuu+WhtT0OD/PAAcdRClbyirfYUDDZ8o3baBpNv13d7CurkBl1ITlGMIls30zDaeQ0b
CnbePpTT22koIU0w2CF8dKR7Po/CkddahmXe2o2Ec40Lh60dYBzWYPcxM4q7VtaRlB1HUQ3EN4za
IxJJUXCPTGz5RkAtjS93LXJIJnhYTu8RiiKQ0i5TgPO75zdReTa+H7LnG5R0HmlIfq8f/Q3eYDS4
0RXYfBcVHWhQpK0i96oXe4G2Pb6QbhnCMs/v5PSUzoZ+L/Ihh/CXwrHtinn9KqcC0rkI40hLR8j7
RyOFYmYH0kggzkvHY3/LKKRRjQZCrCoUcKwAfsLSdUGHNwoQymmULpJBT0FEIwhaAVYbL0HAUlFB
TANakNNLeZk1sCwnMPoSF2oFDpTH+K6cZUB5WQRlDj1vCMiecoLOCSX4ahT9pDckwfza9oKZMhQF
VdXqJ7JRDI1kRtrgDdkmHo4E3kC2qnN/eYO3g1+aO05HVuyx3ccLbMyo6BzebqrB7y3LNdpOoOJU
i9hnT/vX8oZvl544WUbay93lAT78PZRHQllFA3pb1OlYcIeGAy5wyGtAOR4klb1NPoQkd/FBD3ml
95ff32rIVjVFTd/GTf6HL76JDzhYJuR9rvXgOuJrsOFb+ZoFvvG6Kc4qQBoX+3gCg+XegRd72NoR
GlAOmgvvjLNiXHvPGnraWHIfd8FMKK9e8HsP0IBygkiD3m0Xjq89HxGNGTjWEfLFu7BcUFF8yh5E
iwjBMF7lWrAswl5ECB25YzScwsK9cf3m2uesYb4XCzZ8IyFNPKQa78EyfxTxJiE6+B4so14R8D4j
HcktifwQbnlv/uP4gj3dc7bvf4z21Sj8ZPn9jUdoaOzQwKMo6EJG+QptJ649GsgdX3E4J4ITe76u
j2icIP12+AQaGyRV6yOtPr7Bq7gdIXupQtl/lFmQUbYNZRIyG76t/M+6AengtQ1rcLBcRZjfZ9Pw
fe4BxfX1g0juMfSe7ukV3TA8qxlQ7mHjO32ypyh31UM+JPKk0XxBeueVbuT0uCwgOd3n+s/1dI/o
NKSRtT9rBnJ90k4c5JHIxk43HOgKZuensBDRGMp2eMg3T/5SRvECyhPNOrv8BspdpY/zREezUfO9
VCE+tzik3y7MFyC+kHs0XPNszuVDDsrWh5eAoSz2YW5rjwWUv8ts9BuaM0uWdzr39Mgc0Ay5soax
IIZmhlBWCHc38elZ///GMvJD2hs/ZIuXz1RvPJv0CQt8iWaAN4RIlA9Bc7QDlGk6nrVDNKBeOfA+
DbU4j9A0RV4u0urc1n/b10AttkT3rpjmtCzsYz3IBX7D173FZmEZzXCs9tHkR1y/n0dGs1FM+nO8
umkBefPFK5mEWzXScc6m8ZmvSSRD8qV875FMIKnDqc80Y+Jh/fu05VFuYheV7/Qbyl0VO/FyNCgX
m9rnR7ZyyiMNefecx8cbDvK9rPuZs4x0lP+4cG17jfwQVAPNI+N7qlGOhujEQvDZ/BvKrFN7xCbR
G+PHWfsW97NyB7pjcCIneKG1o2ufJ0ItGnu8IdvFHfL1NrztW2zsIuI9gnniUE5vae/w2uMtj7TR
+ABvGPLXbpubPNVigdzlcPAD/UYd59diXId4K8EWwqOI4xZ/7eM61m+b+YKD7BeaqW7EjA0v5S23
/tr+DWiOQ7pA85m8JcrEB5/lloeWh1Mv8TUm3tbVnSU60JjIq8iRB3bhfAubNS0IodjRSJlHns+9
nupRvo4ZH+MNzbNs/LHqjqbDtRlI3yE5NZHfUT3i62Zehps9M87aUy3Cd7BH1m3DJ5TVnqOMCsp/
IDzOEE3WLs/0yX9DPmb7xNxjHNpOXEdzQ0Xxw8/dzKmd876Q/3bSP2NQVgdpgsytfI2JkCOac8j7
QnzubvXbeZ8R22UvUKZ9s45LuGDBnxlnHdpT9M4V8hnR/ClaF8ghjCNttdhhnt97DY/NO+8uGY5K
FvV4CVsrylkcZhqzSxCRGBzgGrwNF+TgOAMfxz7KOrwPfmFkUNCy4CaoA1qo6dzmkTx4hCkwBTgK
WRzUT+MM8Cd1UOAKuHFY3tw3dAPUSBuF7UsZ+FIcvYkBf1Yobb3c9LSPqIdrQrdXpr7NYm/W9hxy
+mM+y7A+pBAjYTnYxAts59Mvj5Tf3x5oAXnW0oFf8ny8bWZ2cPGsTDw/T35T+df41Ef67XpW8dR1
iW8opmHi0Hhev30931hkoY/XOt7W00vXyfkH/Jf49KFeP49vpLVZp5rc82Ef16dhXF+CuVQSrhjm
07ss0I3z9affifKaGJqdGu9s2Znyhm+XnohTRnw7fgL5wZ0Da3eU3WBQZnSfR0Lrg0eVTR6pcDL7
dQ0NsOzB8mb1kLmRUxT5I1u1+eWR8oZvt9VAMtA6ttCHXEDruGqnstQEmg3QY3Hhs5yeXnN8+/UV
GdrD63POGRuf4gKzm6G4vr73NBoccudJx6Dtkeve+azTXNjkLc/x4fN1nQsb/+1Z1/P4drhuMD4a
Pl+H67juQcOp61UIOUKDcZ4L2R0XYs3XX+XCK3p6NNvkolk9WKbgHAiPyor6UcaLH1yA+m3PBxY+
QaP5KftzjU25jlYtWxf8t3vRcHtPL107Lqz13Xzrx1ijecC7ZjePy9zGnjIn4/i7ZOJZCMke7jNC
88j03b28lW9IJthTXEDZjGv7Ph66rs8DbrgwvKnXG77dxSc0Y7bZkfOr37tC+dz7V6td6un1a78q
Ae1zEzd2YbPuHq6UwNHuPMzflfmTvUT3w1PPp7b2FNagUJ4oczKGgeU1uc/HPb2nl1s78pTRXpMG
Wj2EZrKRx9hCZbTmHTu9ziGFVpignZiVfQ12Vy6jN6Dcwmb9Ucf9NaZJbdY+bueznt7TR64PLn3E
C7fZy9MX6uVqYxeYU3zAUcYY5TGFGJn319vT232nU63t1/NOrFNc2O8l1tD+rOpORr7Ti4bXJS7s
7cLtPuSmV2gvymbF55k4C0O7B9C+DjTvLO93RCAdi9ZFo72gp8vvbwe/oMx6cc/ZzYqSGLuGDuzp
Ezzpg3wvWlOMZnbsUxrzOEfN7VZwbmYLUpv5LLTTcv/LmbK9yySg3aMYyjCj3cyrYMeVywj5rEGx
wikurKGHGLW2fsg1zu5HAq1SQLn64/XmL8m/oVUvSGujWbry0Xqj81zgvI1d2OzeQ16ntVtRt7ym
IQ+ufU5nu48SYZ5NnvWuvj7/xkCaKISO0oelOruPEvElv1+N6yM+3Zh/O75+3YXxse9jidCR3snE
6/KW6HwGtAMnF3fH4YWe3ngdzW+9v2WRN4VWc6O9dXOUyw+u9AqtikFzumguKYlmS7sbvnlIK6OY
hr7CJzQPiFY0LYNfZOSlNmvPF3nXh4vzC2hFCY1mhZEGzOxPykCcRSsPIzTHhuZh0G4YfHyyxQ3f
0Fw3vT9r44t6eubaa1C0qgF5W9iZ+QU02sjbKl1ba/Yr3jofvdzMO59EB9KgHH2NC1+BkB0fVmi/
qXKWxlR1n0GORdue02iGFs0ksmf9OWybJ09f22sXu6enr+NzLwZnZSCC5Sh56IfEvfboQF6tvpmX
2WiX43citFzd9Rijp5eug/2naO5cOm0X0LrAzp17yM6fg5GHfOHOZ8eME1L3NdpyT1Nlf7rHMU3I
48s9aZ3DMf6kC/Z0gdBwfQfhLT29jaau+KH/fpHT/NbvvcOmn6dtx4f1yfXkiIbtWRxXufAAQo60
+Eg8bRfQeqOLa8nuo23vvyH72TmZFYL6cb3JlH6Z53DEB+NkLgLKLV+JbxeuXXu7gd643Ud5zAcU
261/9aZi9vTSdcQF/SQXgs25BM1HPJnTtO3RgHRD7RQaOLQ34Pzezycg5NN+GfhO5awN56M4mYKY
6y03+2PMU1zYxvWr+9AQh7Y9GpriR4zzi4ZEcVf6wE48Pgo7LpDVjV1InuID2mscDWJx4R7aDtY6
7s98+nU9EoqzKg/YidPre5GHmDo/l4R2aSx/3Un3fG15QNPRfoRjmizk1Z4fmRtoO9JGCH/Y8bks
m2hzI6f9B/f830rb8Skq4s5j/EVbbfxe6uDcxRjX58htc0rP+9vqfASLYpbCTTtLbutpHBq3+9rI
87Efipm1Y11xibYjTqOzOLALuS7kpxB7mp7Z02PazvEBRdnCh5Y+M1LIbkzQmqnNuSu/rns+Gn2U
a0C7IvnqWanb5i1ZNIfWfYaFvoNvB3lKSIF6YDfO5N9Qr5Al2ez9hPfR+Uibc31asEyj59H+LP6X
eOGk57yOt7Pkq+MsdLoMU70le7YpI+8L5SpW2zzS+bmh4zLyGlpn9OF3zRntEW3t5DR11Icb9p/e
UuaRFIp3nv/2cE+vXof7KFGGBO0rYlEvUvf0+hPf0EzhzPrIdcXP4bwWIce5/OrOTqDc6mYP7U7r
n10XjaSKguVksNPB6St5pe+ePz15/bKPEu3wWqO5cJSTnqI8JewlFu08QAad34t2RUr73fG7sX9l
T/HdnFYa33EfbdbYXGrh4352Ke932srCZo8JuJgsOuoI/tOAT8D9HTh26r7x8Uoc2zaJVqxtD/4+
/QS+I7Cwf4O8ewPcR7J5QxHRVtg8sURV4RPoqNgsB3tRQ60wOriJbV/4cTitDl8iY/A0JcQFnEkD
OTWym00rcENNAT3BpcF7dfSEAZzZ9LYFSAK6zxQgiZv7OiQR3QePMe9vl544aAG+c3u/8PEG+Iux
pQAe/4RvdozCHTTClkZj14st4+F9bMMgWN7s30H3OfTjcjP2BbRWShAyUjuXLGTrjpJBg0BKzVyj
KXwcMFUXimn4uxit5vk++JX2mu1GulOYKOyIpMN8p6PresRHzRlobVoZNvLTuVMsEkKrM5+ky+JE
ogyz7/QXnKI0SnKjQdVM2bHzlAze3F1ypkF0xB7ZLvjqKjPut9tpMVdvmKX3N0vIT1vloMVyhB7S
1EAe6C6fXJH8mrV5esavF2GtXUtqWhLnsRSrdxdBrylJU0Wym7yQaZZbNYrJN/tja9Z/f+uFZBLP
VkaVdZ7FfL7XH/e6fZIOkuu5v9TMtrpmh3yGsMrNougInXZjkhTz8lRliy6vtrOBusL9ohPxo7Cn
v7+tValWN9b9fs3wfKVMdfvMUM12F/Meq/VkirVGPVziOmMsZ6SVYrbECNMJPfblqFzorOlwYgdm
EgvVtUZP3Pe3dn9ZdHBsku2Wl3lyJZRogSXn7X5WUF2h2HUmBSbPe4U0U8TF3NAoJGfeAiNNucbm
+iJWtkkV8+Y0pjUZNf3+JtW7xoRs5GWS6GMZeallI3UhV6v5cN3tZnzOGOHj8dooiFTFXXTqfanq
pQRb6VK2i2XXhWyZS0/UoVCd0Z3R+1t/uiou6z1G8lJZmqqQpfpgJC27RoNvzDA8nDSyhWFhlaNY
Y2jVFDw7UYseJiiYtO63IrJYXPgzI5TMarsTDt/fCoxoM826apas6iRFy15FEmtCVc9xpXo9EKK2
kaamFW85WE5pnLcY05oMs7y/7vWreqZZYEohY4wVYZ2thuX3t9psOl/ynKQzxV7GGuGhveoqdE6S
HSJkOu5qksoGWTkoLzi6vV6woZHUzSHXSOrDYpTChbJdnK/9ViQ6ZWoK0JtfibNFISwFQ9rjBo20
jVVlctY1WSrNMzPecIBTlMm5grgwAk/G2/Iqq8q6Xc1Si4mdI2Wn3FIbtWQ5b7Te30r1zNDJDj2W
EXtMHhfTFrbqp9biBM/p3cw4O+kE2Ywv5BR/gEsyI7YANPSKPV007DBiRssG4wpcqi6QJROMQqrF
dYZcYdzq8+D9s6qPpylcGqi5SUPKOJnqIKSTWHbBFco+LStMOkkUx36AdZtMOZ8vOOl52sYZ3aDl
nOgDHZLp8YOlrRl8bVnNdQ05VwmEbG+iJw3Gs12HoCpKfTpcqsNlJ0j1i1a+46SVTDfQVaZS93m/
No2yrYLHZWcgrs+NtBa2LFn5HHhPtTeoLe0wZ3WY6aw/yDFi1uO6HVcw2/2aaVJdh8WbQEEnC3k6
UmZmtdYjuHpjWKAkK2xK72+OXhQUZ8qVo6q3DiilYNVWTZUtzImG64f1HOZP6plc2sJFOZLllW3K
UpnyAxBLlRr9gWESGS1fN9LzPJ2U39+i5SjXV1NTvBcNB2JSa/VdQY4mjNzPKjW7lJ7Jdgsrh9lM
t9SqethanhTqhWm2iqU5txIUNUJu9kdOlqxOWqn3t0Wu3aa8cdWtLmo6rxTLld5IcTG+Uag1NKVc
WJZbwWLmsvl0JxJCLEfxlXIqQ2RLS4Fk1nzGLRU1Cm/2A1ckQU8NL7SaJRkfF4e10FNLfsOYNDJ5
vt/wemI4YzONWq3bLxaHpjzPjTmzOCZruVJOLqjusjurNjNSqkQqs4zcrL2/1RuagHXLM5ktuFx3
JQZDo5Zk5gTVD3JThmH5ZroWmv1ajaoCBBYYrubZ9aHbYChB7DmqvErOs3K3AtRVmnp/o2W1G+Zy
bB8PC42C57dwIdBFvMLNwhTeK/dsn+dy9QFfdJiepLJKmOGJSXMi8tPqqs0KvawEuiyu8QFjAoRw
7MDi+0TJwtkyViw7K1bLcCZPsB27Ksr+pBVJplpqUeVxrssMZ0zV6BicsWoL1YaWEvRxZW0SqVah
k093g/e3wEvW9SbbcyatPjUpj3umlMNCywxT6YAOKg4+XoQRMR7aFt/Lt+tpKu3ry2RtWJhi1Twu
uHpO8lmvS9Xzg+r7W0YeFnpMKMzVGpEiyUF55hC6tV6kiVWpalPuNFXqMnJl5uuDcMkWemogZlLL
iukVOkGHZLuzsaAWfWnV4vOL9zeiNvUa7VqX42zeSJNWUWgYdYvFZ90ypbhumWuzjXJXTdK9SFIi
ql4wcZV1Rs6aGI5ForO2Zp2RXh4EToYEVmaQwfuNoSm2GiGuhKJpm6tUMrPSVT9p1yibozMdZY4L
HX9YSMlWd8ilh8uGvLRmrRnj0C1NSI15TsWz6XWHfX9zPSLHRt0oTev1dcfCVb7JGQNZrCxCwfXV
qWKEmNjoy4RXWUQK/AyLVp5MSGA3cMuxcUEj65a31IOxEiWBtkyp5aVOSWZ+5EwNfdwYmN2en6UI
apqeF3oLrTmrDW3BSTILMiVqkR4IlZBIkkOqQtmVEd5orKtVtcOYoQ68wVWpJ/CB5ArKhMmxYpZW
G6vBNMpxQ6KeXIv9cojP5lV6ImqlHJNbV00/wzeyNm0PAr4SUBOf9oVgJGn4qg08h8a6lQ6IludX
2pUxUBSu7GisWVB0lzIXmtwbjHpkyA2W+lhl64HKG/lqDss7LT2nV2rTqoeXe2zPLDZHrRSwzisr
7RsimbP9rOq6vGRh5lSoNpvdATPJWeMSR9SiVM8Ql1TIMWSL1hm/uJzM2aWS49IOZ/DLEmW1mVK9
0mkAqXdcX2myokILA0VfthY5a9pLskNC7tC5pJzxSn29IeqOLWTbozAp5xqdsOkVc8NoYK/BmFeb
Az9bTtYG2SmQ02UHKyqVzjSPmaog1rm2PDULK+BhBXSvqcm6WO7YqsfUV5Y/zFcG3LRZWRaTarqb
GrUEK8vWx5gsEK7WdVpAI+l+U7DxqmwF8zU2dB0uKOTchdAKMn4nLHeIpiHM+bGQacvFIkeOmGA1
X8j8dEW2qorEJJ2QD4Wc3O+I/c76/a1CC95IzAkTq0KlZtigIrPlGctGWbvYos1BSRt0pqZpZEMy
bGWBpQaaWlBcki84/ChDsqlWurCYLUKMVbKgp14h5c+UnlDRStNSdZqxG3nBDMm2ZxHjsq+5/rhF
Zq1COb82smLUxPAaazby6VLZqFCtlZrr50rZCVMp93qD9vtbWDZ7VZvGBeBWN4ApnarlntzOt82c
T9XB006+NOtW9Wq50OR7WG3tL4aqWzL4BVuLfDlrZaOe1PetWUoqguhjXdGyGZL0CjoTejMv5Rpa
sYaLjYHiS2u1O0lmJcOnG5IgMD1lwFlYtlcrTnRMmxaCfD9Jy6Yn+XqR6JdrBPBUgfVa2ZS6ko35
sjMS56nUNOBX0ppZpEyly9jY0GuUlS5pAIcJqAxa5nBwd2VbVdYK8HxUb4dhfzSbE10wprM5U1xm
U2aTICRx5iym3XZ/IYpMt9SZZ1SmXqnnk1lWkBYm0FXMbF7BydmiPkl1RzKRrXNmtQkcH8XQ20VP
fX9L80bFayjCbFbUHWIt0qmgLTRDFw+1Ds043VSpzTSq9tQHgqUYeWeW6aQoSTcaKcka8ZJuLUR2
ZRLZpG8DP2SZo5vper5v0n5vUWHmeC69rmpU3nBdm+/RlmXk150cWVHHvNFnHUMo+3MVT+Jhd2LM
gNufV5h2kxGbhZIAfEuWDhqLMC3wljzDZa7Z1oteSa2NiovMXJQDL7Cr7RI2ywjplbNOj+h8p0/o
w2o2Khl1Q5TKnlEDcr2qkoYLxnSokJQjM7ZQIhu2TtkYz+OKjzMkV2yVKgWtOG0z85GoCIrZ96bL
AjVvr7CSKonOYl5vArNN1DIsMRymu0L+/Y033aXd7Ji5teCuaEntYmPFT7bDIs+nKJMRiGTH5XvN
Fue359PJOBUqhXrQGzTL7syv0I20kHMJXSTMnq8AT7WcX3S6S6mS6ySF9lwOhEm6mq/jxmDWaXWK
mkZNh8ZEnZOiy1fThtxRhr5giU4mKQOtn6y3abwuSEGaEgbmGGalcGVecoF2YtJVXyolu8X0wAyH
7dKQDERCSBpO6EhYxWzMhWar5rdXjKuUB/2O2e8Mgdcxq/fytdJQzU+awC7UsEWbrleBEzdpjIyc
U2ktKqv6WpCsmWcLWp0NuRzscRF3Q7s2TVcri75qlJZtk6Wr83IgeGkFZ7HlvCkVQSyTn+Vzoc8x
qVUdxGp5SA+5sPHcCFjLgVS0DY5eTtZWujC2iDUYzcBZCLVFxxxlhw42HRa6EtUmGKESkMACCjMC
6OmClc6k6XEyGNuTsqxPl5aQtkO/n6cyXFoZ9DyJbeYzE1fKkNJgyC2DkeqRqhCsqgGQuHl3FeHd
JpSsjNI3cB+Enf1Uu09ANFBCxwxaEosJqtcutA1qMNOtppeSS9IoRactpbTMkKORR2I2XwOBhlNw
8+1Bl7cA3yZMw6c5SpdIQQHxVRT2Ur1UNBnwolh1uMyKLhUrYVszZc2JCsmmS4BQqSJkLSEo5rvu
vGgvppWFrQFFBuW0vBz2GhnQYeCRFpJrr7gslCrThZabpFMkAfQ7O5o0gWaQKFObrfBa20yKi4Y0
KvhzfrjuMZGzSs8Eswe07PubuQzUQcRorQWTFWvFPkCI0DEMuShZgrhsGC1hLJjN1aLBGC1Dacid
WjFV6HGzGYgqmeyQCxcWO1zVAhBYA1mo+QaXkUch5qUKhlBd6pWC11MildfEGtEFMUQhT1ZmGqNh
VSmZLRkFvqml9EKpUc9m0q1iQ5GqBPj3ol1KgTiLlapWOmlhFUsF1rc4MCqLnFCr5xkQfplGxl82
sfa8Ea3nFYdvNTGjHK0sarYMoiLFBLXZcGguApHJKEoI9/IEkcIkM0uuNZwWAyVv5ILaiMuvrVGI
jy3WtFJ6EJZSBFTRuNjhZ5k+W3AII3QqqjpWgM+86Iv+Ap8MFrMmwFtmLfIAP8Bh0ooOl9OIcpCq
4YPVIhXSRW+9knt4cmHmgDeBhWncmDDtBRYZ3CSsZzS/1aiV7GW1h+WbyTkGvOjWsJWp5x2uEViO
UZJobd7rV7DZkPXKgOPJdIprJ3HM6hb5cGUWjW6q4Ql2pqD6vtAf44aYi0ColGXnLQpYZ2nl4BiJ
ldlkeYEnh84E+Buh31hHVbGW6SrFmeb3VXO2NLCVHEb6QF/1koICCFkMh60ZsJAVJeyormYW5QiM
qTcdL0S6PQlpTDS4QJenDT0n5yarxtAp+iDQdfV2aZBfZsdyrhX2F41WPz3z5FTJygi5ea9X5itg
RKYYy3VAa2ZbCJr4Wi4Xsl3GG2hlqpIdGfOgO1rXqilTl/KdNvCgF92O6WIzECc0mV5vLSnLQON4
lhmRU24khv12NMZBfLrsdHUz1CaDNR8whVqmnQWNE13d0hnOwLMUmwahsEi7tDNTcTGP59utepQt
L7k1TxP9FAxlPL9gW114+jTeakallkE3ukKWHNb6RkcfDwbAqSs44tpv9NchO2yYqujILlAU6QFe
8pbJntos41O8D4KJpUjn5aiDGzQOENKSNKvSWzastc7LZTcHMyvRTOJ61Rkv1IqiniQYOsmQ64xU
N/EKnu5yPbqXGvbLhVKRWw90PnQ9OHKLevj+xihqNZvPLWgzwxkjO1sSimSA86Im4JTSNRwHNys1
OVkOHLmWmWaqUmtcrRCEPhrnWVrHKnR/JKVLLms3iRzAW5pSWIVkDF3IkZjuhzRZUXqOME11UjlN
HxMpN6Ub1LLhmTq+ikxC0KlMCfDQXkj6INMrRSDsobRks+qB2LlQlFlaDsUikPlGpWfw1HSB5St5
26nJeQ3S6/ByQ9CXXZ9Q8PVS7K2qVZkZOXolUymJ3WV+amaHzYajCYA2vzHgbSPHSnMgYROuMWDG
a9wqiXJLL3RaRqfEl5kRs66Vl4X8vMPWdbVVxkZmfsxW1Uwlz3baObfXI9PKqgR8S5uZeDozW1V1
ggKagstrWDOJM+y6JEgCiIwpAWMGfDW7dDqZdDk1blrsnHACRR7VBs6k3EwR7emgZoMIgQSykHVT
wM8NiVY1zC8FQxix1JLgWhWugivcsLgQqUK5wDVkvzQMytQ6GMpcUVVbdKtGz+3CCtyuJG0qJSmB
339/Kwmi4aR6QqozqfOF8bycFsdzl6u7Kt0NFrTo1W1H4Fo+ZkQNolStspzVDNNzXSqSuO+1XBMj
pAD4zb5uAL83OwtSLbk3NhsDm44aUmmN97gqcGy9aGZGNi5lo1FQS84p3I9K0yRLO1FH0VctlyJ1
NYc54ahuM36NafDVyfsbZTRpprNshHRqUasU/eS41x6EYdKx5JAggOPIUiTPEkx6hQuTrs2FSj7o
4c3pfEgbHjfEyekqs/KUZXNSB3Iq13E9h/u5KlUkQ71SUeZFpr1aNSZ+ezLn+PHSqDqVpFbWizWd
x0vJbNbPlpZpvyOVgbUxxdFsWRo6VqfoluG5UlZBxsdSg6kVu8SIpMqdAMe6YV62KKJW9Vt8VOWz
EZYbM+NJOFRKzLSxEHMlbdxKptYVQarLvVUryq3p9rIBo48irgvjQnVCYexw2pmO+GUtxbTrTY42
VToHouzcwjHZjDTCWMyz5XkpQ7RzZpPCFqzRwfGOOO3ZyeYg9IDnYFdANJinurOVqOEFOseG7TE5
wAuTbjpkM8nZUmErmhiYnVpd89JSY4JVRtOUVsz3+BnfXqUGC3PYd6fMOiSM9zdy3ov4JHDdvaFf
KXeWpGyZEe4WmVFfkzyvtk5XPUplStS6v+z06ks76BF12auYgmnWpoSi87wT1LNg5KzB+9tC0pwy
zttase4Q3my9bA2pfrcd4OMwtNQRryvdjmAJXqXXkQmltS4zrYilwuWATY4HyV6xKi/pcg6fsCt4
dvpsAlSnphXMeb/ZinoLXF3NomS/3R9Mi3xhKlvzIaAdz6eV7Czpcx0gNutGdqjLdTrfsJTVcLSc
KcZcG7s5EBnhkyJRMjIdTuWa3W4/FIcFlku6WClnRUM/i+esrtZNqpOKahBFI0PS+mrCdYsNP1jk
C3JtKotasVOrhaueDOwpM653DGnO6hHf6NWkqT8s9DCxOC2pyVQ5LYmdHmeatEPUJ4XsnLXZVpSt
FplUS8Gj8UCZOUzoa70clufXA/H9jQaau7rw9XGZa40bEaXgXn7KKUwvvY70jrjgJ51aDzwTBAPc
DybTmjLUSSJSVqTL5XFu3px3yPWirXfZsQN6WsRbc59XJjkiyYzEapaiCqmBH3V8BS+RKYmk3F5T
mU3LVd1w+J498LwxF6gV3WH7AT13uHyLFjMFOyB1GmjyVcg5obdemIxU9znRqQ1XBSaN5xoBnx8S
tJ1ZFyhFIniinSLLM7sSsgMt29QmjFaOyiXJHWULjZJHMQtXA3K6as/rPT1TwUwXWN4KzomMxLAh
3+o2W14aeHEMI3bwnjP0+KBj4+G8TDN8VawuZlQl482rbNSLss0K8OWBJtdmihq01ly6K9E8n5kN
QXSxdkHIWSilSoVkqjAilzxvF7E0VsGjZmPeCswiEYiZsMaqOW0IglEb4HGNmzrQSHi3xFvCUna4
oihPw4ou6fOu4IZr3ZBzyzI1zdnYatIxi/Zy2PE6nXSmjzLfMjFjZEMl9E5VqowUqVlmgI/UGPQm
JRpqbs1N54XQ74jJvsNjbKvckKG4eo5dKVkEI3oKa2FlxqDZqk1mmw2xy4BncvrUr+gBXXXgN9Gq
oY+38TrGprssU8OjelTAiaxLdQWYrWYnFRpveUOziXtSV6pRamntjHAlm9Iwvcat9ayhlKdaiRva
Y2b2/jYf23iKn2QaSjXggBvfBK1EYJj90UKPJlh/UpO6eG7Zx/WRqI5KGtAJ4TTwfJ2NHI1Peq5j
psQxBwA5nQO/1/IFOBOxKGTZLOWlJLekVXqpWVhv4qJH06EZqrjKkFWegCZvDbxhHgtpWuzklzSI
Ac2QFnPqKGqNeBAvVEwr39DsCDAh3SPHfHncaQyb/qBbqoV+MnQsXghHY8VlcT4c1nLmsOPkh5Iq
kBWJpVPuaNLSWutWVWvYEUAIm/P0UoWde1HPBr5MaTDvlMeVnLxyXUxLGt7SDtlVi86ps7Tve5hj
Uau1UG1QuMg5S3vB5mp5uuOt2yWiBSIj3isrND9yqIEaZdpDcWFH01wS6zjBuhs0y+RoZpNrUh20
ZjB7Fno27uPrccoMFt25O8Oo9aQv1fP0CE/p8MyrUi1otNxCVBp23GaZwnPzhlkojthxyyYXQW5e
mzvLRk4gW/Ro1OFdqhqIZrs/97rrrj8hy0ZhIZVNMsjgDaB7i0nX06d8eybPRLVQ6zWJKvCJQUDq
roLMVAhcnO8wc3NaHi1BwLWuic4At5tLZ9ZsDaNGH8p1SiaYNktF2fe3EU8PG/m81MKkQt8i8Gw2
7DRH0jqYtSVfUp3kqBf2RqXArztlri6OsUxtyjR1aVA1fcC/GU5pRbOMzfJpufD+1pE5azpNLqQl
gTd7XpqcrIBXNMsXdAIrBlN1jqetdru1qngz11rV+cGgkmlXaIzgugMcy1UnGjmbdltEf7QCPR27
3DTsjsoFX4hmRsgs6qVwuR4R1TLHNYeeQNebxiykbKZj9z0mF+GNMl4sspQ6BwFygZyqESsIeKad
9odATtuRGKqC6OI5uzlc90stZdXh6XmKs3sAe8MC9D2anVKxpbZnNOkX65UZiWOYSOHcmgjNlptu
0DAqoGVeen9buUMiHHdCEXhpih5JbTcjFfwMMO9jcz7I6kGztGJTiykHmKk0+6WlUI2GIIa1V4RS
qjUavWSRWIp1Sg05HYwpVcabdEY05QzrabPCNNPKNgMiS6UpudxrjQLgg4/ETpVc81J+XlwIOX28
ypWBm1SoTcsg9h0VnTYVLvBVFdhTLdLbq2Fa9eQgHIbebEq1+nldFZLmnMZ0Ndvu+lhP56bKYBwJ
AzNsVYd6xipIA8puVZPMdFXvp2u5dbuscUAjJbEKm6ytQDhFGj0hU8uNyDLmz5xmDeNDbTZsuSDC
L026FDsvLXN1ihHXjWA+0elM2saperlTBDEAY1dTxWoOniQw4yslTbeirjRkZVYvhHQuOVsolFNt
9sKqFhRwZjxsRHI7xWD0qBrUasOsN+v0Za+65rrLFi/543yn3l72gO7lRVzquvWCWaqozkAKymKY
a486Ns2spJnkd4xAxlblBqnbvt/vli07TYPofyGWhzrRwybMAvhAFbzXbLmAtmFzqIorvKAS9cbM
TBE2kL420zDWvrBwHFvO0UKpNe5Vmx291+hm5nC/T4AH6wVmpGZYEjccqoJTY06YcfX3t56it7BC
WM6mCxNunecKoTxvJjNuP6Rb63W7W04PeMyVpk4o4mC0NaVD66EgToDlkwJZG9ZwZjQB0MebLDyj
o71IYkneXxeSjMuWBy4n11rlqEJqHW9Yy5uLZdOgyaW1CIuzOpGEWsDqLwbyalIseJwYjQW9zi5p
gVQk4IeMUiw+pfO1yJMtzeNcfjzSlqWVWzRShp2K6pm2sKKrrS6wl2PgLxcqWJ0TVK2bK2Y7i5Lt
LghSWSZB3NcdwG9UVafDycofC/kgN2G5qdGvdTKtqBz4S0Iul3JCadXOM1kpHQ47OGu2BtUFM1pN
090qTthNJeg38epoENSqsyForVNbt5PMwid4qTLP1AejqZvrpUAgT3cWoh5kmrqsThf5XrNrLaY5
azzU8opYzEyrZbyQbBNy0ctpyVRfkErd5Pub2F8ohWnLHNhLNt0U3IZJyLi6YAKg0rNZ22YqxbZR
qku6U5BXAm26oZGVnVIDtliS2j0/zejtoFtsFeer97fcAs+uORBj5qx1L6PNBZFu87lM3sx2zOSE
q6ZSmsrVDNgiFwwpwSQaSsrWgeLL6nRRpJkS2a/ozMgVhOn726SVTqfFlADc17BYBEY2tU5rPdPN
FQU2Ne2k06mCqgZSI7LwHESv59eGXLPN0X1lxRSqOdrPEK6vK0V1WH5/MwJ+ViftpZeymtxk1BEn
EdAVnVRppFXLnYgwWsaYEqlpVuM8zIIzbGLQklqilipgoq/xeQnvheusU+pKQFvyvUEU2eC57rIy
NZuBUxhk1HxIplpBx1JKBWbW4sV+Vmd0ok8NllF1WlgIzYY0G81zngKCegEwNVetZKaZJogoszlX
yE1XUakuSJVpfbrc34177/3t3pof96xSlbT6YkuQimAUZna3kvUFMnD9tpFpSsOJx6cCY72eUeag
o3lNQSzmrKExoSks8kmFkg0i3UxLjt0DWjtksKQm4zhDBfUu8C1beVxQlLJN+ZO+4VZbqiRF0bSu
L7Ptvt0r1wZJX11Fjr/0ast2xGM4JalUrV4dOkwT+KhL2Sxq6iKg6gM5//6Wr1SKQxDs9pdBDZ9Y
mNRZR32nuEz2G4XJWgX+P9BgI5FfVDCWsmv0pFHM+Fm/Wy1QkyZw1ZZrSZ1M5Agb5oDUSyQm+/2S
thy1mYKGd7sr3Ki4qzQxVJI4Vtfq1WLNnaV7wDXBI9JiKnOlWm6ZSTzS9b5k6kt2lMJKix5D1sdA
W5aIKeCDm1+H4yIIMHpOaiC1mwYzVrhMQyfAK4KorotsFu9GwUyHEhVqwEBhteSs6oY5xRikMh1G
UlMg2mW4EbXC0xoujPLUDKgkICFst6/RThEfM0VTBS7uBDgRRU4KBo0mHrVwczg0+bU6kGdtWpCk
aQXDSiQI1IEF5O2kPqxGRhT1F4txKYxcTcxno4qW6Q4pM60aSpgbhpitFtvdBU4MaQ2HozUUk1Rb
Slf744Y+IcjsfFASYFbKbJndGuM1aoLBFjuDupteiNMcJoJwvBeo4jLibLkPkMWtM2a3SPUse+5M
OtmeY5WjMaBg3kphdL3BlAfd97cmg9OB24Y6wpPTRgHoDqrI1yt6hwbStUpmBmNiPCSX3Wotm882
mkCRLSpi1V+abX5QcrqiaRWnU2LZ6jc7YEzX5HS+INgksWpKY8vVjEw2shrRSMpNh12NzFQ7Vc0f
t7Naai75FuWLyxwFPa/MHJszXXIFLJDg4Wk26YCoLSoJUdnIlEH4XZzOVumKHuHtjrFONcUWcMWx
lsvkpRptVXHDTKolYcz0oj4nrINyY9ZtlQkvrZBCxx12SjLQSBNBzZRVZah26JZAzJv5WdVUJ/OR
LdPsctRS6jhRo52JB97WnjpmadnVx17HVKKA01271POdVCnsCz2mWQRjOsyX6lmBBF5onhNs3tEm
mew6N7AWM7/TAco9g4sVNgMiTqk2pVNroYULY7tY69R0mbYIuptSsFw/o6ol34mAPW3aiwlP5tpT
pckXy2Qx0LG0lS+qUaHWZntucyGHMhn4pFhYZ2oDIwnzNZIlzuRmPqcVFhOcV21C0aWcBfSbKXPp
SWY1NhbjFUVvTihvtju1RimZ6ReL//onnjZtxVv99f6WANc/cdlzXM0Ldj98lBO2MtP+9UdFMe2K
Zi+agWe6f2wfAo81NF3zNFvVts/NwDM+fIb8I4Hf3rhnmPYff/F/Jrg/E/Dv1SpV8PePvyBVouPN
rj7eDBQvkB3fDEwHvCij2QHQo6qnafbVui0tCuCrfFAl0fbBn4ynKbChRMtxrF/r50LQ/LZy2VFG
ezr/DYv/xNEDH0/XhhNNDRLByoV0rsBbZv/omvbIWfr/gHX8f0AC0k70Z+LU3T8TwCL4gJh/Mf8g
4H9/JjILK1h42r9sbRF4ivVnQl4MLVMtaauWM9Xsfw1ZVkmqyRTJ04xGcPwfW1pVx/YdS/sjoY5N
awRG9V9/ZBw78BzLPxjxI+6kFXWacSzH++Ovoq2ogRlqaccbad4vfPm1bmbh+bBiVtMVQPMNNURA
D2CnqXqO7+hBoqnYfqKpeab+Z4L9R9K9pY2yoyobGFCpPxMkkWJuqPQBUVBj+79bKoFOmZZpA6S2
vIV2Q40NrLcDccPzDU0Z1WxrdfMLAOYdy0orHhjStBOMb6lirgFNJEEygFvUr6J5QmKUYdEeaRGo
RZ16/FBAILgzY8U2tNGu4/8++PFIWvCNuNwuPOlFEDj2l8vOEL0mF5lBPPHZgzFFEpC/xJehcYOt
PaG3D32K+jPB3PKKg4G/pRsbzfq/lJn7f28kCKjfjDNzAcuGlgarNzTwPs+0jZslADTRMf2FYjWD
laUdqK9z9Q/RmgFYmB4y8d/ol98KpMh6adCQ3QtVMsm+Dqp7cm8GLEXeAVg6HmA3ZCVupOtH4XbP
0eegFzBxi54vR3AAfPfNq8h7wQuNfvKLkXtA5i2g1SzAYW20RSIR1yYTRDyon0T6TcMsK4b2ijF2
wXuaWhAA+fAvj/OlkQaxBHOKmXcO9YXBPqT3ppqb8eN5GO4kT7lUccfvnK6KRVVcFXMTbPKes3Bf
Eb4Y8EVDJ7qiGS5jJom8sNRp2NwNnHPQ2ZF8Yy1ZGY2QzYj9vg3gmBTUF9wp7XcZcre+BtRoBo77
x1+iYvmnIXMOqUVbB4BAw3BjvTuM6o2YLStD7euNmQXfArT3dbz+2ndhETibMb3Q04s+HMUD9Xgq
PLuKdAIh75yInMP6R29vrrbpXhKoSPqcfFyCLHt7HYQ/Eg7mzXXuxd5n5+p2QJr29EWgBG9CQ5X2
lFF3pQRXAtqbcMadNnFfg7NfOhATcSSTuhNy5/TqBT0ZS3o3QIX9SsTr2J1oPc5lAs6igAGman5l
878P7n8OKX477OfNoLAYAp5A2h7EP4A/Sd+OjA/8kzQSAPR/90rAp27ElQKWuVMKTrunz5aCTd8S
cTv3lZLwid1fJg2vc02AjzF2riSJTnP5ce/kPqPxiNDsexxTUjjyTkGJUQdBfkPd//xYH+V1yNy2
9m3QvMNvfhSa2y7HxCZ/LzZvp3GDzS153wHOUz/9wLQEJQqPJCbI5DfkJQDNr8pMcPR9mYnk12cm
arpuqlqCTiUTaEb3v0VFDRwvAfUxMOumGidpAZcMtEz3jwRoGiJ+BH4CcP8j4XpOaAIJ+NcfAXgk
gCso/mq6mmrqq4SpJ1bOwkscUJK3nKFiJYTRzLQTnjZfmJ7mJyqikCg7YOi/PYXSUEam86J5LQ++
azsnZyugJ5VbZO2itAE08ncFrZfBf07gTvUgpqqnKKAhmNtpvssPecBh3/QrEadj3ysrzwwefm0o
ZqL9frfsmwQxa/pPk0T6eyRx34WXiWIMt+sBUdx27D+y+ERZ/E28UCF7feHHFYEE2D6bz/oiP3RD
9Utd0ZMLmC4Lb4wa97qiAlpgmcgCoYEu6Orb3bzMWFOnL1mcCl8EoLBZvLLhwwcbfi8Lc6knMQ0N
gxY6fbGhQcDbLnc6xt+59U9nmopjQ7ZvVOwHX/qthuIob4ykRRvt17tegMK/Pz98Yw75NzFDG4cA
+AOPWiO0XuPV5ugT9S9dunGHVTo3HfMlCZK4SZBoZv2P7yoq+M0FfqDmhdqN2sGxddMAEIQK4sC9
hCPy/vb/n1lUET8cwILFTRL1Ew3i5z7ENIU0w77WFB6BLr4RfC32f0/D+BkSTzKJv/7w4xa/Xl3D
+FNWvZ7OHd5r/J66TPY2JpyOq86L9EvWzH7LinrY5S25pnZ12fU1A3Jy59cDKLyAw5P03+pcXV97
fwGYLA+AeXNP99A8Z6Z+niLKa7YGqj3mUJxXSQ8B4opq2pJ+c+XbPfSzeEgB4HMn95NeQ0RcJyRu
5+600dfxKCv2C1Z9uPAtNyzsP9X1g87CHexp5byvdqIy2suMmAYiIzPSRnQ2RvUjp/qCV/2QHJyT
hA3bYlTb4pgGEkudnYy/jOSLVP6cze4zxQeeZADeBtxMV/H9JRjp2wB2aZhpGKbzlzh3eYkQTOhd
NJ+Xhvtkn2K1s11zD8efjkfBwXTyeV12qiLQTJuhlrcEA+/+ml5C7ZzdRX6SDef3lB80eWqK9Ubc
vnYLr6UpNwX5l8HKQaRR5zdKXALrTVrpHFAPenEHPEk4BXVye+8t8OTj1duE/LEpvTu4PtPYHcYb
tXR+EzDs0qn9vweVHxCHFy4G/ZBwlCvwZjPN94H3d6903Lg+9FTVAysAs9LUybMyzlePtVL0VAMb
2brAkztkDfYjpsTsJI06lw4+XfEBkXkEqa9yOLb2KLMZEfm5Hgd5JjtyC9YecjlO9+r1PsclJ/eS
r3Ca/q92Fl6oHZ+EtwfUIuiWtrVXoulpQw+ZnLv0KknCRdD3e9ePqtXHYU4Rl/eznqp5oFHP7606
WRE5L/+1pTrxQfb5RfqnGvkmtfxSf3qTTQm052lliFQ6Hs6e6Fkf9+ceoCaZB5zseDHFYUor0BJ3
Uf3jHe7jMfk63/vFHs1Hh0AHn+TNXNgue6r2s52Zgw7FauTqYXznq27XeNDEAz7Qxdzi7+Gs/I28
FCLeMD7TS3lA65MU9YB7Qt6TW/mvn+KWnPv5R0lIV0PTf/fNhNwsHpenMVg+zkxETGRfwPW277Gn
M0iSvQLqC5C+5MmcBjQgMwHnHy/h+XlrcX4H0OYqinnTFPLXQfaiS/F1kEU9jw1YuKzgXrzGEc3t
xrz/hkT+B60faG1pluaOHVurLmbD29ZSfhluU+wlN+LrcHvEg9gIvp7muADhS2nj0xDekZvY0PvD
wfziAO0hn+EgNKNYaPvjICp2ZHYxLrvX/if5a2HVBTBeWMzzu4x/bna3+T0e/YtTWl87+qgXrx37
CydZ/S5jv9OMTxn/VOpez//x8d/15LUYuHDSz+/gzGy2B3yfD5OEC0wuzVp8nQ+z6Xp855u+33OJ
Ve1g69QP91deiNes5que6QY3nu71ZY43dXEV29eB9qD/8fMc1ANOdxx6t6dI7En94fh9sc11HtC5
B98p4HmoO7/P3Xbu058p8tpCjvMoPB/5/TaD/7ACO0YAEScD+VwEPKKMHoHBV8RcL7Rhoun5AWLk
t7pd35Px3HX+DvOVvN98xbZeiM4EJPQlxuv0yoDPHLu0IuD30X+m71rK6n74H+k/krk3eniC/tv3
5aX672KPry1lPCD6+jLG3wZWD+rUY1B9Xxrrfv1Ip+5H1EVlfg1RewX1hXh6ZYz5qIq620LHXGRy
OUQlL67O+8IQ9QGtSKYuf1XgEobjz2z+15bU15n530afFm0zMBXrhm3+l4HIwrMZXqtOK0pU1mwj
GMeDxCct/NH9O9aS8Pfnkh9Rwh8U/010cFn57hAJbdX/FgX60fc7IqT7c9PxJ9Uhmb+D5nwhah/T
mk9AbYpHuelvge3dOvOB5UxxYr+PzwhuqPzhoH2xuX9M3R5FT9z35aTvVp2PhOMXa12z2x8U32m3
7z31/cXHBAmq6izsBz+V9j3HBG1Jv7nyw0f93P7toI+zyeIR+GVH/bxyI4ilqOgL5UVbdCzLWUJd
/F1GF06rUsylvQ0XsHntI5YXTe4pNsRWfUySuNv+xl/9jkhGx+clTDuxozpR8wzFNteIpYqVaAMz
/cNNNHjf0HnJGa7wRfBY4XbL0+400SL6djL81PfmOyujR/F+V2z0wFFVn5kQG+Q8cekc6JP1HC+4
g0235KPux9wLT1OjfuvT1KA3x90zM/ToaWpxXMiP09TgISrsF4TtP/Ac6q2zUvS335h5wlZ6uCWR
vLjl7MHRPquSzvUpVlvbj4RyqYvHU19GwT37KrdUJ0w/MbqH7h+xof6Rfcsvx/7HRtaqFmpeLnLh
l42eBH/6G+F/qlsvl4CY9Tau6JbwhA0pT2h3kP4fIYgrBNDzzyi27WyTHXAQniME7DfKwKlevVwG
7jlUBQViKqIcDAIkPXHXwaD/EYR7BKGy8A8As3SeZA2+WRCOe/VyQYh5KtFeEGaA8mMxSCgBMBBR
kLAc4+I6199LKH6bqYmmMouRPb4kG0mCBcLB3rvu9dHFCFT8JN8vLIif3CNTP2qZ9YvB05arWWem
mHeutT+Qsm2lsmmMA/Tn7tTZixH4CUk7fsRo4OZjq84gkKa/YKHrb7EcANqUMrQacAxcT4Mv+74V
hWlLuXM1IULtN52QcoqH8ZfG8qkXLjFArgTyFtDPif8NyP7vLdASFEEQ/+c/MxufZzY2OunOZTNZ
UMw6S3ubNv4olk0/jo5+5gQJcjRS96yCeMIEyZaXd3oK933T4ys2wb/aUzjUMw8vg+HuHP8nWfnD
vrzUYD+0hPUT2X+Tdayf+gS8r991QwH1yDLuJ3oAgIWxAU09sKkg/rb3/zoy//+T+N+A6P/zbRb/
d1khNgJCcVsq+MetENuQfnPlb/2Q3HkxODNNGLNzf4fVZXd+SO4JS8n+m6QBHJLfdKpf/C/BpR44
iTK+ao1N5N97t8HAdGXHDxQr44y+b6MMBYxrkvie03A+cSA2eEn2/gMF4qz23IAX0IpviE1Aan94
CuDF0dfadNW7QXx4CB3AEsN/34ko237E16MEdXfMdeGb9r/L8AOpCJ40+N+4dR/14qVDfx7ov4UB
a0KGuZ4TmvY3nkEIDRjzTafhfOJAfAOWvN/9ir9bHtGKfxD7w+3XC1GsmsHqW8FLX1wo8XXghR2P
jdnkK7coZwCFPxyoL7a094P1yNDSTJzheK6hvQt4j9jZv8FKCLkGXvaUkafuzk48uoLmQm7vCmJQ
718Kmd986cIDcHmSVbsfZo9ZtfugQhL35xJiAWyzcv0ftX8kAJn/sW2HKq4ZeJr28CrBjXV76eRt
BfTbtEw7vsh8UnKb/seBrgqYY6UVDzAIDEZgqkr8LyggJUnF6u9NsxG/g5Z8BHHPcv6/J/MaH2ub
o17u15Lxpws2NH6fjvxNZl7znrNwf8uJ1w3lr5s7jVEHATAmfX+HqVPZ0hQgRHA3iGBZt0PrS/Qj
POaa/p7cyCk+xDet9LWvrd65Euu0U4lITqCdPAnFshIGojqxchaJpWIH8B9eYgFXtwROYqgllMRM
g19TSzj6z/ZD0TBoI7gi9GU7vLSRBV4HvLJHZAARXrO3p4HHX/v1tBWt6BuZ3zCtdoqVscWIp+Gn
yeg4C7kfPvwjjtr4/9LrODzv53f0PQ7pf50HcuEDKCd1+l1Ufpkf8uJ8ABIq+/F0NwF1F/9dSc8L
OLmSD9j2/46I/v4zjL/iCz0vdF8fgswTPFZ4FBDJf4/Lei9cSJK820uNtd1kM6W3ofI/mc9DTZfV
XMULZtrje6Q3yu7uj9s945tSH115qd76zadrHgXAs1RXrM/LP/OriHeDhnwgxo4/cbMn9D8K7FCB
TZxhYAbW42sACTrmJsbnaq+PfrxUd/3mkyiSM2zdP/ZP0lyxlhY8T3F99P2O+eb7D+2NP5MCyEwg
Ov8zmXIlrQG6pJu3YfmnZTS2pL8umXHB5zqdoI5J4JflMVAe8hXWEWXggVm58yzeg/wtC48ovyeF
8cCJBDvqY9SMszfyLCRJIu55JXfOmyjDZuC4f/wlKpYfK0+M8FxwZho8AR0oxVd9Y/RHGf6sZ4Za
WQsCzbv34Lubrf+1acKLWbaHPYDLwcueDbGa+IhfrmVfLqH9npPyEL2JDcGXcPtc5D5wtOOLY5kx
EOuR6QGiHO/GTOJF75SnHoLnTUHNlbDmU5fuACnDXVtIe19O+TFcvFDVte4+2vMpGo6Gn85OxTsf
9pkqrnXPGaDMI4rt0mTvOcXWcn4Ldfb607ket9P3ndH1jDUNv7ZRBDw7STR4FN77zPtmAAf0z8TM
Vx3PMofP4O9f/8Thi76VhOz//AAicj+BCPEnEJH/CUQUfgIRxZ9AhPQTiCj9BCLKP4GIyk8govoT
iKj9BCLkn0BE/ScQ0fgJRDR/AhGtn0BE+ycQ0fkJRHR/AhG9n0BE/ycQMThPxL1JyxQM6eOFx8/5
0sevUeE9aUuYlrqYor974cWzv3fx8tkeuMXCvX0e8dq8T6xVBU+c9jnoxrdMAMVaRnnn7PhjE0Do
pNjtrObPmQF6cbocnZTrq57p3rh27RLeKYaHme54icpnZ8sPenSHZkzBXO3dufKLm1x+nzmUrd4A
EB8/CRTM986gHHTo5Zi4w1r+tPkTdP538yEl8bSpYpK67/tqz5hIOeDDPU7XQ1MqMeshC4foTWwI
/i0mV165VXqjEuQHdNzTMJ2832I+CukDNtwDaeraEYj3+npXVqEloCr/bkj/zisllQAE2sNFcNs3
kH/aYsk99a9bL3k7qduj++PT+Lc4gsJzotX2swW3fmD7i1aVU3FWEz7x8IlPHIi/tpy9/1jZeKsu
PxTqAbX/2RdzFAdFK+X2T6NcXkhGPvANn+882OyQC7HRnIRf1KDuXA184dCIW23vLz/9+sOPs801
XTdVjU4lr2HuHrN8p0m+aI53BN9U9dYc4xkLzoO+8cnTghQ3fDqtEjfdSYD+JGCO8Kaa8U33T8x9
Vx1h1FzZ6nVldyGgQVuYzwn83R7h5Wz3B+E3Vr49zX0GhCx0I4lbK11PEN6V2j6N3qqTELIxeHGn
Gb9NbW7B8wrNqW5eddNmncvovXBo2VcENB+E3x7KaBbgvDa6GkafAS8DNCibjBHP3PKl0Z9nRYH+
zmu2Bqo+6rtdDnK/ZBrv1068ehYP7sxniRfM4m0Oa4zdyfuC5ZuQml4EgWN/OVCH6DUAkDagp+Xc
7Pad40jMz41enLSBn9A9a8SfgPpzuD/HkzuSkxQbP7V64wfyzqH4v7aEwyMa917kq9KUz5ORxOfP
BW9PQDw3Nv9G909/Jvi3mQ+AmhZIjR8gHH7rjAB9JVHwtTMCnxhx15zAtVOmL4ndpS/7nZM6RG0C
kvvdMwI/0bq4q5ote9oMhrKPz+YnYWL1Wy3DYX/ugCedJB6xCvdMw0KaE/vpgIToOTMQo51PLnwB
YF9lGw5H5+vswss34UGlWAbWzr55TuNXhv+kXXgHnl4SJWjvm4F+ylLWQ97etTqHeWAta8ydqo5j
tUz3jwSQPSh6I/ATYP0fCRd+lw+IIog+wSOB6ZJQ7E/4grA0Mn3XUlYJa9vpfyS6pmUlHNta/XIv
sTSDcUIJEvB48CBBJpRQMS047LAlxfdN4/zRsqgLh8L6KXOQGSu2AdFzaiD+ferRrxDlF0/pPMXN
O5KeB5y1Zyxue9Rh2wjQvcvbriiOQ/TBod6B7hTx/z544iuwJiv2C8IJF76FvhdbB4a4otmLtBLP
RUg7HlBDWxMjmpE2orMPxCH0xQTQFxmGDQPvQDIHD+uguHttwZV6P0eXzRR/qo22EuQACXKBIViC
kb8VdBcnquGM7cWPeF8a+BhK7dzwn+1dzNa2E9DUtaMdL4PiMv4vabiz/bhFzV1QdD8vyIRKPAMc
lJvjy0v4Y2GARl0W/4cVz+Ugc9efuxBHwiWdTNz33/JZ8TM1N0HmHfQ+FE8+M6K8FFPuBuNyOPmo
wLww1fgcjR0j13g50w9t5pVF9U/IOF7MOT6s5aHKuJw6vDiteTlF/+xEzEM4fXG8BEdGdWzd9GZP
dzLIM6t4bkPdg17G+f59i5txFbzXAqkTHXmFn/HiGRq4q/VpcHxIg8aebL065XPllMGv1sFn2HuX
NFAEd3UO6KJCjuv+7adfIe0JeUv85fmgH6XXX+6w5zX7mRodou9uL+JpXvtBp+4DbpJ5yHeP60gc
Ln4JtB1u/65+/MHwfK03/w1e0kfHDO2mL+qdZv2Rh3RlWuZVDtJB12I21dCUUc22VnfhcDthy1/f
fX1JJK9kIH837+dv5/YQj2D8eW7PQ2aDpK59xuhU3YNlBbFj142/87P8nN9opdd2mvPb13lRF7+L
+/ULvbZ8uGOuhb+O+Av+fbzDsLenGWxojbfGK9aMfe1rZuCfJ3y/k4QpP2QpJX/fKW1PkzDlgZWU
9CMHhtxzCDuk9vdZSfkNa0cehfXR0hHu+5eOPADQx1aOXAH2LStHPmj/6oUj3wC07MYMPRFr19Lt
XwC2gw9pUxc2nN2E0wOGvByqV+rdAtUD8r8arS+29E9A6gPG/ombnjZZ+O91Fx5DOZliHvEYYi6c
2sSgW4p/hNfwwMkir9+cKqiqs3j8m+Hfuzl124kYTXz75tRYR+tsjnKK3ckv3Jz68r0PFVH4O2x5
+AEfHtoe5vDt56FvePfcE9FpBp36/A0bww5wepfJfOQo9MsHG/0ePhw6JkpU4NcFgR82Bt6oecMB
MKc585ysDTxF+soK5AtIIhCS7vbCTrHjDlxR3COuWMy08MZMIcr/e0N6Ykc7Yup3O2Y/07Ihh9uZ
Kab9N9vUlySgLo138MDT9/RtOXuH7NB8/C19TccL7uLajY7h76HLBctU/FxFMa2YR3B+oSqnY872
PDOk/n/tXVuTosjWfa+I+g9EP341M95vJ+Z0BCAoKoqA15cJhBRRBOXipX79SdDquqklaFm7+puO
ju4qFXJn5tp7r70ySQ+MR5xYni1cEssjqk67kiMwnGD+DEwnzjqeE0wY/4q9Ny+OqIyP+DdkNpO+
+ZcWnH9i5zm7dl4NSgzY5/Kh+0VLI+c9TveN8BWkMmb+HEGuhK707dX4d5L6y27FxcenfFfKNdbx
MflFDqEQK8X0EWGMia3tE2vF8gjDIzRjPEZOoNqPg8M4MFUmOkLz++f/MNUF3efGA9vv4d5yX/yV
HaVgW/DXaeqHBiQG1AuXfHXHB08mHSYAoW/G3OuymZv/cReKil9bYN9GzgrFcBzmz8CEA/4TeEuw
Zc7F9zDmioMv2X3Us4kReuFb3kSxgk8bDrH/si3DUo2FYoaLBfd334HNfElRGsrNzla1tdhLai80
553FkQYbUlkLQLglywBUW5KBYAQLwYgKBCM4CEY0IBjBQzCiBcGINgQjRAhGSBCMkCEY0YFgRA+C
EX0IRgwBGEGREIygIBgBgVlREJgVBYFZURCYFVWFYAQEekfVIBgBgWNSEDgm1YRgBASiS0EguhQE
oktBILoUBKJLdSEYAYHoUgMIRkAgujQEokvTEIyAQHRpCByThsAxaQgck4bAMek6BCMgcEwaAsek
IXBMGgLHpCHQOxqCekdDYFY0BGZFQ5AQaQj0joZA78oQhLMyBJGkDCGLliEksDKE3FGG4B0MhLqD
geCiDATKz0Cg/AwEUsNA0KwYCJoVC6ECYyEkMBZCAmMhJDAWQgJjIcSJCgT1rgJhmboCQb2rQEjl
FQgSYgUCn6hA4BMVCAmsAkG9q0DIHRUI6l1FgGAEhBXiCogsCoFtVyCw7QoEMbUCQcesQJAQqxAo
fxVC2K5CCNtVCMGqCiFOVCHECQ4C5ecgUH4OAr3jIMQJDkKc4CDoExwEesdBiJgcBHrHQQjbNQjB
qgYhTtQguGgNQhlYh4CJOgS5qA5BLqpDkIvqEFy0DiGV10G4KIQsWodQldchVOV1CFsXGhBWfhoQ
Vn4aEDZxNCCE7QYEuagBIVg1IFD+BgTK34Cg1DQgbI9tQMgdPISwzUOImDwE9Y6HUPzwEBbseQgV
GA+hAuMhZFEegqLLQygDeQhlIA9BLuIh1KI8BFmZh8AxeQgck4fAMXkIHJOHwDF5CCIJD+ERLB4E
24ag1DQhUP4mBMrfhMC2mxDYdhMC225C0KyaEIhuEwK9a0Kgd00IzKoJgU80IeSOFoQKTICQwAQI
uUOAkDsECLlDgKDUCBCUGgFCAhNAxAkISo0AIYEJEKQBAYI0IEAoiAUItWgbQhYVIWRREQLbFiG4
qAiB6IoQXFSC4B0ShO0sEgSlRoKwOCtBCFYSBLYtQWDbEgS5SIJwEocEoe6QINQdEoS6Q4JQd0gQ
SI0EofiRIDArCULxI0FYkpQgrAZKECowCYKiK0OgdzIEeidDEFNlCPROhkDvZAjMSobArGQIzEqG
wKxkCMxKhsCsZAjMSoZAamQIpEaGoFnJEPhEB4Jw1oGQRTsQImYHQvHTgcC2OxC8owvBO7oQKH8X
gpjahRAnuhB0zC4EZtWFsPzUg1AG9iCE7QEEFx1A4JhDCGF7CIFPDI8T3b8TgmMvkONtD7359B5h
KXNsY8NWFQ/b8uNnJosNSWXSkS7nFUc38MX5P4j930iXN/G/P36q9nxkj+xNK5PPqbZvec5WtTUU
6U6S8YjvlMqn/yAy2WhX2o6HNMzaHT9ak7Iy4iwNbX78/GDMmBWyvKfWkIlU3F54JT1RLD1o+8gI
/HPo038nwvu9a+jvRGs0xZ9+/8bu9deg7BmWZq/dv1jbmbt/NZQRwqg79N410Lrvuxm0Qu+6R+Pu
/SDUiWFqDr7kB23jV23T/XHGwJO+Z+/mO/Kc4S4h2jZt58dP1nDQyDHUWUx/SZUCd8nFcpdU5g8i
9Db8XwyHeTuQsT0lFRfwhWgXoo334+f/7S0mApP/E+kGHRfP2nyBR35kouBuIsKGBGH1Qwxc4haC
Yt3ALRZBK9m4zkAp6myPaB5ZPqU4kUaWsh08kJK3NVHgEhukZcpxHQKjOVuIhoyr5I/dAMZwglKy
8AeRTka79NkLPvD9j/FFT5A6o+zNp0NMDRrC+YUybYwWB6ecM9F2ar7T6SCCnZ6wi2f8KGd426OI
d9kBoFjIYcwWI177jIDIV4aBkFTDHE8YLqEZroJDWlTrL4iHR27XNVxfMcM48CKifJxfj0VXmPgP
+JWguO4aR70mWiGH2SwwDXCv5Q6FL/aGY/37Euc4nQmOOceT+YQV2E+gWB341z/i+YeN8eO7yJn7
rqeG5cZiPx1XSxhf7CHHe/glPhK1MzsfwXh0iKAHxK4LxFMfCAXXmfgjhGnrtvXbOc0lXD7o0C1c
ycPt7CNxR2jGZfWvy8x8PFIdEPJUeldmpqLqOpsGsnRvgu+SysTg5K+HIQY3z2awr0dUo5796oOq
+qUiEwDjlxDz2ux/Xrz3zWWXsEc4bAjYn1VjoZjhNH1vAQbDOh2tdrum/nJwRGMAPR14eHwlJmLx
ulNi3tn91XLMsZfPiOvKSFB09PlxXRktcDvBrJMadhn3zKLhOH6LmDmcQt9FTOhIVH7XiQi32Gsm
maDOSZ6iPPGE8iO1cmQz4/IOWPE6lfyC4PyCqucDWvt14nYq2pV7TTsg4/EjaUSuEcJzaCwSgu16
ivl9VO0bM+Gg4no0Fpcz4UwhGYAy3gLlBVz4FaHd9yYGOnPp4gWE9hQH/2ZgwN7ixaaeb+GQjBYo
PgMOYX9uDoiTqfR71CSp1NfnuGS04vaqOS5aptrnuNwl1UKqFCPHSQG+EwvHXuGC4XukuFuCOP3l
IM6ko+HhqiCOFr/2kS9zCYZPq62HMUwb3vZbIPcL8rGKx+ZK6TgTcXI+Ix0H3bl5Nj4F5m8Eh1ZI
ZxyEvCsBIndzts7jETBMw4oTVt9J17uxiIYmFQ+VSSkOHi48PZ6hKmZcOKYj9v08/fu7JNbYW6Ku
llgvQO/FeTXOfqaL9I+IyzxP3DBwkK/OrN9KPa44tr/45uLxrg+31Y5PKiAHwckrhklENlW2bVMO
9Cp8jwCYGn4Jo/IHEVZAGKh4NvFHPGORwni1CRchQjGfGiJU27JC0NlEazw2VETg8SIMi/AmiKgg
C2HYEHgo/3q6wHAJy/YIZYWtDfaCEWPbIcjyn9IWV1sagayV4djWHFlejF7sBgKslZ+o1d+KOf1a
C4zi1+9H4tU+3KZtxU1bkbfQXrgD93K69WYA42zjDTJtPmL6+nSqFG7eQlrDcG+CQ3XXnImbw+S1
zEmy2ArKIf0iWIadaFk0tmAWb7V/rngeTu2MFe5zvYiSYXAWvqi+PD26cTGbK0XrzhUeVYrIDr9l
LvyXcr6gnC5Sfcfwtt+ddr7ux22pZxSj93XR3tro9PN3oURSDNx9Hi1KJb8nL5LORf1pbhRXE/gt
uVHANa+DTlDsKIB44Ys2R3w0wL8tQfp/TCzCrQ8T5eyHCSGSiuc+3JZQnBJ3jxCK0EoikLSwh518
IOqGjCL07ltE8LDOwh3PXOGBChxXCvF2Nl70lPKvLkS6VlA0LYwmMdt+etAZX1iKq5BEvk7y7MWP
n6xiuhGj8J47hznxZhUetIWvYPlqriwWge2xn7qLsAZ2yllyhfQHwfnQ9S/8JRliNuoNXjDgF6MR
8Sb7DVPZ4oeLYqfAfzpSHMPwC6tPL45dG8mXPW8aHENzE0K+P+9ml3vnu6Sm7MYsPubL+Neyvbb2
5eLTr0GVEXEO4jDz93cJzmc6Yjpxu8NIQ7uPnld1O0P26eD4yVlxY1QhYGKZqE+bX+u54hNIjhev
zjjCKi61PHhlFIn3RVgj1oZpEruehptczC2BuUoo7e6HgbB3Sm/wvLVLtHzPtO0ZYYyDF7fERFmh
8G2MMScITNiqueEGMPstQxz++bmH/wa568YWH2ORVNXwSTEAsU7CnkSQgGzBnkihiWKOPyMAp3JJ
QAH4lZ/FCsHZQEq7IASfrpcuDMHCr74RW9sn1orlBT84RHgohGfv4uo+8kZQDULDzj+p8PBwRzqw
8NJQfsOSTLhC4L5SRRbotNmoCLtmQSZc5lyp8ImF+PXYaXn6WD32bDSMcuw77AkPZ/sVrz3/oKx3
63jPquPO3EjiztVWATPfcxXwzSTEFQBzEU/t/L2XAa+EbFhrgMECXjH+02BXXAS8EmazpYgnAfy7
Anjbs1A8XLOMfO9cB4K4Cvi6H7ddCTwlLx+RluNY+nscilLFxRDr2POKaY8Uc3c0zNc+JBT9mcFr
PiR0aDxiBNpM8uMlkhPVbpyzwAPLiTE2ndjZTuzP+SE+1LE+P/7C1BGDIBWMWjBoFbIRF/Zx5cPP
4C0npEMgqyMw1kbibpcPvtAjHe3Eh6t/n8cLyMaITOlcMfL3eVxUthx8+cCLh14CuF2GLAc75z+O
FR9UFMcyXGz0nN4hs7P6zEvP3yBzhL0VcA+PFhnRq4RY22GOML0o4xAzD0I8hVr0rbLhBH0nxx5y
AmGbPiffneBpwZrq8XBwQRQ8UQof6cnZt3qqLkonT5iOE/4Oww0bS+ytJUJzd0sKtIPCUTz/btFX
lJ8WkB1sgkKMw9W8EPx/YYt235AQrBvPbc030dNTQmPb361seRP8irvD5tlWxuaN1ymtXi217HWw
50WWE/D55/WHDy2unJOv3rzw9tePo0LwZTMBF1p8eliY45bcoKUPjgt7Ry/nuLaXMLDwnO4LnfSR
cu1DZnqACL6RXjCiw+EIxiX48OcNy+u5FtEY4QFR0d70sYHh/NaYH0TiFRjeEM3v0zukGV603p0x
2895Inm4GD8c5J9xecYlv2hK+C1JYel/iNYeWTNL5gv48+dccHoj0OHAf6Ijr+LC61/OkCNvh5qT
4H/qy5FS+I2zA3WGd66gGe7++dpAAto9X4sLrpPe8dY3zu6qhBaKo3i28zV9DfhCiFD3yY7UVbr1
tTPoKivUsHXS/Zw5+9rOOchFXtDS79g5tPkgDb3q1/uoejCfHAxeH167yxD54ETF91XK4XjP4obe
fBR+aD885Ef6GVK/FyGdMizF2f40ulRLXCfrFd0m8Z+m1JkwHR3/RAe/kjpNDvB/1COynGT4Sr8p
iUmOdNysmm8HL4hWu5Oi8AWb+7vpelUctDvByzWVmQzVNUlWByq+QbpKDhJmsRe8V1lLHZHqspNq
Yag1G7ooslx/zK7WfI2vq+yIpqam2L2/S2woaqBXXN1Irgc02xtURgNyU+fn7VmNbg+YRWEl1Avj
Bsp0VyLylRY/66+qfqJX6mn5JRo/FIv2LN0fCtZkeX/XXHiaSk57RUFNbjPFcV8gu2NqlF0zKVWv
tNZzSa6Vm75DFfmtSvuVXKH8MHjM0NpwOc8n0pNum9sggUEOqTn3dwwq5Nv5FbMtTAs9KdsU2+tM
W00ieSiXG136UdwIpkquOoUmy7S0Ne31ybylZjvzWWGTlK1pcjXxSQppYrFp3t+5XUYea8m6h1jd
Tk3IYmfolZl2nl1OSlTWa2TZbLrUo4ayVpXt8oBjzRHppjftVr2i1EqUTE/7Vm+Z6bGTEbq/M/Sk
khJaDHKXemqCpr30epgShKwmPzKtNNUv2Yqem2zTqXmSK+Qrc345tYrIHzRLrN2kh+ZoPVnqSaqu
Uvzq/s5WB1yyh/TidKWT6dlw0kYpflg3FknWa1V1nU1V3OEmsVZG45GaNuzhdpxcjruJtrRV6pw2
siuKUHOdCbucDvHdsubWJ7vLkmVsHv0HxusXnao7z5G1B7de2DZSapHtTckiKnN07oHkRsLjclhv
s056LbCZGdMfbx50FuWMRWJ6f9faeL1ppjkWNjStJWW3LGRDkEqdbkus5+gBx/3378Qe6pEiz0Hf
OjPyZJPBoXPv9YnDoYfBLb3/6KtaeLeR4qBJ/4Rvvix5v0HcOlix/J6UVLUXW9I0MaeRbTxVi5Gt
ONrvmP9VEylO2M0rc4CDaDmXA+QjcABGe+eIcXxJvoH+80ss3I8tSDc/E/onJ/+8e5yJhkwuHSEu
07hpAjccbCD/1fRZgfo8o79j5D7u5Kdn8dhlnzNxQWvBzJ03Wcds+47zc6LChF8WVFPPZUEvIW02
IsNrQpeSi/rAsPFbBUqqcPd3rLHo0x3U5hr1QqGYKqBcfuMz3IjqVqkuw4waWt2kV3qVomt5htHN
fI+zjPKovuw/VMx+waqSD0xqtNLSD6v0/R1ZFDytVPAfncfhvI8WE05iluzEEdKGVh2rxYdSNZPo
5jap9ViY03MhwfS80oCco2x5bBsDPAV2zxZKZL9Y9+/vPFkpaJ1ZZd3JinmSTRvbsjP1m8ltihvW
mrS1reSnnKVxJdvPKtlxY8rTwmNa8fmFyRvbNZt1lrmxKc+rm0bp/q62LCgdfuAiRkoUNW6cbrGt
xkJzTKXXySXMqctWxOFYR7LR6Em6NDGbJmmXe6LzQAnrxYPr6Jl8X6/znOfQ93eLki5X5Icu45cx
+OwM57esjs7xNd+gK6nmrDSm7Xqva4nkiKZVutXiZv12ife3fa72QNpFSao7k6wxT47Tifs7kVRo
cbKapPslc+OLpt+WkTrYZOSB4VYn25TVn65nxSnH1ZlciamPtlWy/TBuidW1UqTlXFXkBtVBQtK2
9Tye0zKJ71qgSjPEbjJo0y73hI5OZRctt2DYrYltk6X8Ays+9kea2Kf6tVxCaArVBTVOLcU2NU8M
DFFQ+WHGQF4TlwX0ZJ7YPqC0KPYF3lATya2VTKZt0fGz28wG9f2CXvcrqL0Wx2x/XFRaKWFgjzON
hZXwa3l22KU1PjFkWxZt4JJl0VZyZrov6pl+dpbjJHJSq686zNwzMtkkq5cbzJWKjuPu+ymVhxg0
RwTtnRUpj1v3HUPl2VrxyRk79y6fMn/lX43v9g0+Hyh51nyea/sVZ/cGmvkJefzkTB644OxJS7/f
DgHfAU5I7fC5AsM8c4WRVla5dZmTCiQ3Gc4qdGXZSDR4kirf33GmXq7pVLVlyNPNclhLDKi24M+Q
Wl0/LNN2dz5bmsVFM9nvq+rEZytopkxW1HQrCMsH4YG1hOmj2puVncG483h/J1nzNTkSJtV6uppK
Wjkpq1PKBnFb06PLMyo38UblfPKxYeaouVnRbGH02PLGU9bkB+31ZFjt5+ZzRRqXRiUG52OtIA8X
/Aa1bbG59XVTbBqzKZujJ0ymnqe7TLou8f1ZnZnKUjNbmFIdcbTJ5yqPakWUhyxnz5e94bCZlBqN
bOP+zmTJpPQo4GTeHST8di3XXLNWUyrpND9SxlyHm28k0ShO1vZAERJZGS1NL712jVFrioRFeVLX
kdtpby2/7zH3d12mLK/wONvLnDjN1CfVdTAhVE3s5BhnVtN1/b+Rc1wIH9I0dOvHT97QNBM10PiA
9HXQPY+j9VNCqxQ8MRwUf8HCQPjY+hkB9biNJ0Po04/uz/8BamUVoqYGAwA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text

						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds reamining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged = {
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
		Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}



]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>