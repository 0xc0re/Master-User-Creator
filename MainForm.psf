<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Grous'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text 
				
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	#Address PAge
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxo365groups -Items (Get-MsolGroup | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}

$tooltip1_Popup=[System.Windows.Forms.PopupEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PopupEventArgs]
	#TODO: Place custom script here
	
}

$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" }
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>