<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
rFtvhSwhTH/97D9gar4WU8aNw1OfZAQ/P4exE2dgjamQLfPDSI52x+z5pogVUjR75nwk5BTg4IZF
sNyyGytMFuLBCz88u3oU6zbuxLplRliz7ZKyLISQd4cCQPRipAnAqVOnfvIpACkJPj4+2i5BVyNc
nJ0Qna55/jUvLxfyfv72phpk5msOhuKsBDg5OaO0Qbvz97bC3dkZYYlZSmd+Xo4yTmdjGaLjMpR+
kYGecPYKUvpLSjJj4erhjfSsHNQ2NKO0pAAtYj0LCvKV93NTo5R5ZBXXKN0VBWkIColFWXkxokL8
4Ozmi3btde7m6kI4OzkhrbRBeQohMjpR6d/TVCFa2ploa66Gq1gnn6AYpX91WSEq6uUNdn3Iys5R
7sAvzooT83NBSnomymoaUF1RjKoG7Y18/e3wcHGGX1SypluQGO4D38AwZOYWorG5CQWFmu1VI6Zd
Wdcqtkk7cvOKlX5x4X5w8/IV65qL2sZmlBQXata1qFCcQNqRIyTAy81ZyIv8ykRDSkwwnF08ILdw
ZW4KMgo0NxrmpyUgp6JZvGpX1ikwLl3p39dRDy9XZ7h6hfCJAkI+ABQAohcjTQCuXbuGhQsXYMeO
HTqzfft25ea56GjeNEYIIYOhABC9GEkCUFJSrkw7JycbmZmZP5iCggJ0d7/dM/uEEDJaoAAQvRhJ
AlBYWKJ9RQghRF8oAEQvRpIAyB1X7sCEEEL0hwJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHq
gAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJA
CCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0
ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqA
AkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAI
IeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSC
AkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oAC
QPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh
6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IIC
QAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA
9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHq
gAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJA
CCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0
ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqA
AkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAI
IeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSC
AkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oAC
QPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh
6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IIC
QAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA
9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHq
gAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJA
CCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0
ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqA
AkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAI
IeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSC
AkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oAC
QPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh
6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IIC
QAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA
9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHq
gAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJA
CCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0
ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqA
AkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAI
IeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSC
AkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oAC
QPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh
6oACQPSCAkAIIeqAAkD0ggJACCHqgAJA9IICQAgh6oACQPSCAkAIIeqAAkD0YiQJQHFxmfYVIYSQ
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
7u/+/wfxmgKwvWXFAAAAAElFTkSuQmCC</Preview>
  <Form>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
hUWHP7Vf/w/PEI5qPL0CAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 30
						Add-Logs -text 'LOG: 30 seconds reamining'
						Start-Sleep -Seconds 25
						Add-Logs -text 'LOG: 10 seconds reamining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
								Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
								Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 30
						Add-Logs -text 'LOG: 30 seconds reamining'
						Start-Sleep -Seconds 25
						Add-Logs -text 'LOG: 10 seconds reamining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
								Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
								Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>