<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
RK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>