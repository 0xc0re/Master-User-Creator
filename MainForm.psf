<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
RU5ErkJggg==</Preview>
  <Form>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
E+7WKb0CAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						add-logs -text 'LOG: Done'
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
							Start-Sleep -Seconds 30
							Add-Logs -text 'LOG: 30 seconds reamining'
							Start-Sleep -Seconds 25
							Add-Logs -text 'LOG: 10 seconds reamining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
							Start-Sleep -Seconds 30
							Add-Logs -text 'LOG: 30 seconds reamining'
							Start-Sleep -Seconds 25
							Add-Logs -text 'LOG: 10 seconds reamining'
							Start-Sleep -Seconds 10
							Add-Logs -text 'LOG: Done'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($SharedMailbox in $SharedMailboxes)
								{
									Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>