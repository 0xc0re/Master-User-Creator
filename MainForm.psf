<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
wFF+OotNHkoAAAAASUVORK5CYII=</Preview>
  <Form>OwMz1ADA9LkCACODCAAAAAAABADtfWlz6ri29vdU5T+49oe37j30abDNeN4+u8qMgTCYOeRLlzEGnBibGDP+
+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
AgA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
				add-logs -text 'LOG: Done'
				
				#Find if user should be added to any groups
				add-logs -text 'LOG: Getting checked groups'
				$groups = $checkedlistboxDISTROo365groups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Groups found'
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $User to $Group"
						add-logs -text "CMD: Add-MsolGroupMember -Identity $Group -Members $User"
						Add-MsolGroupMember -Identity $Group -Members $User
					}
				}
				Else
				{
					add-logs -text 'LOG: No Groups checked'
				}
				Add-Logs -text 'LOG: Done with Groups'
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedText -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text 
				
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	add-logs -text "LOG: Copying AD User attributes to Office 365 user"
	$textboxO365DisplayName.Text = $textboxDisplayName.Text
	$textboxO365LastName.Text = $textboxLastName.Text
	$textboxO365FirstName.Text = $textboxFirstName.text
	#$buttonO365Genpassword.Enabled = $false
	$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
	$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
	$textboxo365passwordgen.Text = $textboxPasswordGen.text
	
	$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
	
	#Address PAge
	$textboxo365city.Text = $textboxcity.Text
	$textboxO365street.Text = $textboxStreet.Text
	$textboxo365zip.Text = $textboxzipcode.Text
	$textboxo365state.Text = $textboxstate.text
	
	$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
	$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
	
	$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
	add-logs -text "LOG: Copy Finished!"
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Distribution Groups ListBox'
		add-logs -text 'CMD: 		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {$_.GroupType -eq "DistributionList" }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {$_.GroupType -eq "DistributionList" }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: 		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of. 
This feature is not available for AD-Synced environments"
		
		$labelsharedmailboxes.text = "Please check all Shared Mailboxes you want your user to have Full Access on.
		This feature is not available for AD-Synced environments"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}

$tooltip1_Popup=[System.Windows.Forms.PopupEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PopupEventArgs]
	#TODO: Place custom script here
	
}

$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" }
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>