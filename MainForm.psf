<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAL2QSURBVHhe7P13VFTZvvcLP/eOcce49z13vO+4
f5x7zhPOc54T9j47nJ1679052Nq2OQcUAyAgiGLChGIAQZKKqGBAEQGVnHPOOeeccxWhKFKRvu+c
q6oQ6bK33YKC9fs4vrLCXGvNtWrO+fvOFf8LQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRDEIubcb37z
q0Abu5uBd+7eD7zp6EwikUhqrVvvQO9qO1zvYlvO91wCT506E/h3f/f/CVTEFmKx88tf/jLWOyga
pc39KG3qQ0ljL4lEIqmtSpv7UNQgRkFtDwrqRAugHhTWi1DG2twS1ubycdXp5kFsH/g+8W0V1S/s
PhWz7ZS39OHilatQhBdisWNjdyOwvEWCpMIGJBXUy1VYj4TSZsRVtiOhrEUYV04nkUikD1XJRQ2I
yqiAX1Q2AmPzEBCzEMoV1h+RWorghEL4R+eqSDNfykVgXD4i08qFbapO8/bix4qvPzanFtml9WQA
lgrO9x4GVrYNIqWoEanFjUhhgT+pugM5KUUo8YtFXlwukpgRSGFGgM8nkUikD1UZrJ0LSSxCTEY5
UktYe8gMwUIoMbcavpE5CEkoQPoCbiejrBlhbH98IrIRl1WJVNbOpzCjM1vJKjQzn3X8ZqdV6gfp
2bYSsqvZsStBbnkjGYClwp279wQDkFrchDQW/FNYsG9yeILJ9fsxxTS9Zg86LzsgjVeQ8laklbB0
JBKJ9AEqk7VxYckl8mBZwtpDHjDnXU1Iyq8Tes5hScVI5+2uynRvL25oIlNKhbMMCTnVwjThbK9C
yUoVvByema+YNjv9K/NmLcOVmFuL8JQy5NAZgKXDbAOQVNOFugfewHc7Uevig+zMclQ+C8P097vR
cfUOkms6VVaaNFZR3mzaUhHLO6uUque9SynyodRPOKbppS1C5Vc1j0QiqZbSAMRnVbGeeQvrMTct
gJqRnF8vGIBwtq3MMtaxKmZ1W4UySltZPlpZ4OYm4YdKY/N4GlXLcmWVtyEytRR+zAAk5dYIZoO3
9S/Fx+XTMsrakMzXy8Yzy9vZuvnfNuGscDKbn87yOTt9mkLCelhabmrIACwxuAGoapcilQcLppF9
x9Bm+wAJrQNIqeoQ/tY/9MbUBi3BEKRWtAmF6BWx5eTDrJCwSqQMPj9Ip0K80mWwQqYMVqrSvBMp
8p1ZwQt+I6ukDcK4yrQ/ImEfWEXJKGfLsmG+rp+7X2nFDUI++PKpfJhJVbofiB3LlIIq5vhZI/aG
vwOJRGIBk7Vv4SnvyADE5v+oAUhngT2B9aq9AuPgFRAD76DYV8WmvQiIRWxm5WtNADcAUall8Gdm
48cMAG8nfMNT4Rccj2e+EXjqF4ec6m48D0mGh3c4fIPj4B2aPJP+dQYgIrUcuWUNZACWCjMGgDnf
zII6jG8/iGrPMCQ1ioUAllzXg5KwVEyv2YuChDykMlOgrCw8WMYmJcP9RRBzifIgzoNfZmkdXnj7
IIwVPF6heOHK4EFxVjBSjnPHnZBVjERWITJ50BTmvWoglOPKaZlsnQlp2QiITBfyIOQjOQ1BsdnC
sHJ7yuV/sH3FumbGhWks32VNCI9NgJd/KJ77BCIgOhPpCnMyO+3cfZlZP5/H9ic5rxxx2VXIrmpH
ZGIKItPKBCctN0Zzj4MyL7Pyy5RZ0Yqo+BS88AuC53MfPPMJgl8Eq4CsovNtvLJ9JuU6+DW/zMp2
xCQkwSckCZmzfi8SifTjWkwGIIv1wn0iMpGdU4Dp6Sn8ADatqrIaz4OTkV3R+Zp1vJkB4J2wB08D
0drcwleM6NhkmNu7ICg0DlOTE+gVi+Hg9BSJBbxDwu8HIwPwQaA0APwUc3JtN3pPWaHX5KoQ+JMa
e5HU1IuuSw4Y0ziEDN4bZYFJWVkyKzsQHRePB/cfIjSllFUeHow7EJ+SjocujxHKCjcPgmnF9UjK
q2bLyIMdD/opBdXgN4/woOvn74+g+HwWSOWmIrWwFkkFtUKh5GcVhNPfbB38RhNhuyxNXFIqvIIS
hTxwRcXFwTcsBVnMtaaznjLfHi+cwtkFto6kvCq2HrZttn15j7yJ5aFOWLd8na0Ii4iCd3AikotY
r51tLzGXLaPovacW1gmFnKdLzufX0hqE/eDBf2b/WEXm5iQ0Ilxwy3xealE9qyCN8nyw/eP5SGH5
EgwBW7dwWp8vn8/391UTIGy7pA5+AUGIypRXXr7+lMIaRXr52Rg+TcivcIxbkV3dgZjEZPiyPJAB
IJHeXHIDUIqE7BpWX1m9YsFOlYRT5KzT8zrx+dxAqFo2jdXRlMIGwQBEsG1lC20BM/RzxIM6v7M+
KztfCPY5eUVISslEcmo20jPzIJPJUF5ehRchKcip6nrNOtoRlVYuNwB5rM0Q2j/etswW3582xDDT
c/ehF9rbOwV/UVlZI/wdGJDA3uEhnrEOBW/j5fvBjpdCwjBrW3l7TgZgicENQDU/A8ADBSv8bXYP
gM/Woe+EBepcfCFihoDfE1D1PBzJ9T3CZYIMRSDPqupkgZf1NAPD4BMci7TyTlaYGxEYEsF60SHM
ADBTUFaP4MgY+LNpfmFJQo86Kp4t4x8G/8gU5rSL4eHxFB4+oUhgDjI+I5utLxw+QaEITSpEVmk9
fAND4OUXgrDkImSx3m0WC/hxKWnwCWUFkuWBKyY+Ef5RmUgrqoRfEFuerSMqoxKZpbUICI2AbzCb
xtxsGqvUfPvPfQPhGxKPVB60eQUsKMML32CklHawQs570q1sO51Izili2w6Ct3844nKrEcm24xMY
AW+2jRjWSGSyAK3cP/+IFFaxa+Ht/QJPPH1ZhSpDWFQ8IlgFzCytgX9wKHyDIth2QoWAnllaDW+f
APiFx8HL1w8BMZksmLcLx1bZo88qb0JASBhicxtZJW9DZFwivANCWX5C4BeZwQJ8FxJZY+ATEMKO
UzheBMYguZQZpORUZgC4IeqctT4SifRjymbti2AAcmrlQZwF67ninZywxELWRrFOR0gCU+Ir8g6M
Q1BMNjPoqpdPZ20Qvxs/MK5AbgBYnVeVLruyiwXuHKSmZWOgrxf3XP0QllqByIxq3HUNQGtLC4qL
y+AVmiqcrle9DtY5Yu0PNxtyA8CncxPCAveMmFlgymHtXWJ+A27edUd3d7cQ/CUSCexuPoRXRDpy
a7qEtMr0SvFxvl5uaiLSKpBXTgZgySDcBNgzhuysSgwdOAXZNj0MGpzDiNZxjOw7ioHDZigLTEBi
vQiN2WWoyylHsiJICQYgJh7BcdkIDo9CZBbruWdkCYEwLDoOwYnFrFC1Ii69gAXOFHg890Z8bi18
/XwQnFQsnKrOqWpHUGgYwlmhzmZB8rm3LytEZUjKyoPHi0DWq63E8xc+iM6uFdy5sF1WUONSUllA
T54xALEsqAewSsene/qGC4E9p6aT9cZZsGaVMrWIGYHAQAQlsLzERMMrhPWO2Xr4+njQTckuYBU6
Bhms0vGzBPLpHUjOyoX78wCklHUiKT0Lnj7BglGJiovHM78ooff9cv+8EF/InHR8Avxjc5Bf340g
ZjzCWQWMjIlh+ctieRKxdebhRUA0qzCVwun9+CK2raIKvPAJRFIxNyTyU/yzDUBcPqtorAfwwi+U
7Rs7bpXN8GPGKCq9FP5Bwez41LAK2o2ImFih0UhIzSADQCL9RL2JAcgo7xCui3e0tULU08PU/YrE
TF5+EUgsaBSC/Q/WwQ1A4UsDwHvVP0jDlM3MvX9MLuITUtl6u+Di5otnrC1+EZyEe4990NzchNzc
fGYA0ubFAORWdwmXHB65eaGmupoZjGY0NNTDzd0b7gHxrO36GwaggAzAkoO//reibwI95+0xstcY
OfzGMVYJlBUilf/otV3ILmnGYFIWelNyWK+8ifVemxUGIA6BrHAlZ+fDJ1jeE47LrUd4VDRCU1gg
T2c9+uA4xGYUwtvPHzGsJ5tRVCXvlYclsW20MQMQysxDHTILSuHx7AUCo1NYrzoBwbGZSMkvZ4GZ
BUvhtJo8T/yUf0JaJltvArJrRchlio5jQTeaBdhqVuAT0uAVwHrNzNQEBQfhBVs+JDoJgREJQi+e
mxN+p292VYd8P8uZsSiqZD3zICQWtzFTwkwF20Y2q1RJmbnMaCQip07MAns8PLwCEBKTgqBI1rNP
KUJcatYr+xdX0MLSxSEgLo8ZgB4Es+MRkVaKELa/UczE5NX0ILu8lvXYI5GYWwof/wikMqPBz3T4
B4UhkZsBVQagoBWJPKiHJQt5yavrYcc4juUlHX5BkWwdXcwAiFh+s+EXnop4MgAk0k8WNwD8BT38
5rvXnwHoxBPPYFRVVAgBsr6+7hU1N9bj6XNm5gv5DcGvMQBzzgDwm/jmip/W94/OQUxsIvp6RWio
r0dlRTlTBepqayEW9SCDdUpehKSy4N2teh1KAxDD2mjWceFnOwUTMEt8PIe1hX6Rmaz99UNXRxtK
iktha38XWVk5zNB0wcsnCJ7MfGSztpGnny3h0idbbyqdAVh6ODrfD6wWyzC6xxhNzs+R3CoReuZK
pbGCUZlfjfHYFEzHJmEqNhmyuBSUFbIKUidCZHQM/KIyUcB6uz5ennjqG428ejGCw0IRmlqO6NgY
+LCglcKCncez54hhQTAppwzJbPyFlx8SCpoQytIKp7NL6lgQDGEOvBhJufxGukpkFFfBy5/16Evb
WUWR9455cM4qqWGF0gchiXmIzywUTunHMuORVliFxLwqhEVGwS8igwXoNBY0E5CUX4O4jCKks+VD
I5khSCpmlaZTWB9XDhuOYibiOdtWbEax0KuPZr1rbgC8mdHIqREjNbcI3v4sGDOTxG9c5G8Ni4iO
frl/ns8QV9iGuES2HtbD5/cLBAeHITy1ghmWNLbuSNawMAMSFQvfiDRklFTiuVcIC96dwqMzPv7B
zIAw184aBHm+WE+/gvf0gxCbzxqn0mq2zwHC8UnIyBfOBvDHc0LCwuEfmc4cfoVwViAioxIJKaks
30nIqe2e2UcSifTj4oGQ37T7YwaAn4F08wpHRHgUYmMTEBPzqmJZp+iJZyBSS364rCCFAQiKL0Rk
atnrDQDbDn9PgOdzfyQmJiM+PgnxCQqx4YSEZHgLNytnI7fq9QYgOr2cddIKhBsP5WdRX1UmE+/9
33P1RWREFFt3Iqzs7uKeRyhuP3yGKNZexccnwOHuE+ESMA/2/MZFfrzkNyTzYbkBiEyvRF4FvQho
ycANQF3fhPD4X9OTQKT1jiOrdWBGmcwQ5Db3oZwFouGkTAym5qC8tBEFzBzwXmhKdiHraVegoKGX
BcESJOTVoJD1fBMy8pDAClxeZSMLuLEIi8tAVHI2qwDNiElKRkBYDGIySpDPerMZBWUIDI0WgllO
aQ1CImIREB6PGNaDz6tqQXRqvuA881jvPleh/FrmfgvKhUsPfqFsXVlVzIT0Ii2/GIFhUaxnnCr0
7AtqOxGbmCpsLyQuU1hPUlYhMwl1bB2s1zyzzk4U1HUL19P58gFh0WydFaxnXsMqUDHruXezvHYj
JauAzY9BYGSS8MxsLivsL/cvi1UQdlzK6xESHs2MQgUSMwqEJxwKmUGKT85AAMtraHwmspi7z61o
QFRSLrJZ5curakUMO7YZFR1sPztn8pRf3c5MTA74jUUF7LjK95lvP4Gtl+0DM1u5FU3MiCSwPMci
Kp0dUzYtLa8EMWkl7DfqnrWPJBLpx8TbgOgMZthzal5rAPh04fG8sDRB3mHpr4j3yGMyK1+7PDcA
KYWNwhsHo5jZeJ0B4OLBOTg+H15snd7Ctl6KX/sPiM4RbvbLZO2DquXlBqCCraNIOAPwOgPA88Af
J/QMSMATn2gEJ+azNl2MxII64fS/m28MguNyWaeG5ZWbJRUGgN8DEJNZjcKqZjIAS4U7zg8DGyXT
GN1rjMEjZmh18UG787OXuuuJVva3oLAeHQWVaGe9zKzGXiEYFtR1oZAVkqIGEQu0L4d5YC1iaYpY
wCqoF6G4qY+pVxA3B3yeMK1RPLMOPs7nFbLl5en7WDr5RyaKhHR8e69KuZyqdXHx9QkfqVCm4dtX
LFfUwOf9cJ0zeWMSts/yP3v7s+cL6//B/rF0fBr/+AbbF76scltFiuVm0vG8sfXNXjfPn3L8lelC
+lf3WTjubJ9f5oFJsT5hH19z3EgkkmqVNIlZh4a/Q+P1BoBf9+bz+HX314nfPyS/Rq5ieRZwuQHg
lyGjWO/8xwwAF78UwE/xqxSbJwRyFctxcQMQwwxNaFKx8Jgev99AlQHgAZ1f+syv5e13D9sHtl4W
3PlN1/yyJZ/GzxIIl0t/xADEZdeiuKaVDMBSgRuA5iGg+8ZjjGodx9gBk1elfRKjOiaoSSpAYZsE
xYqgxgMuiUQifUgqb+1HPAv+yfkNQoDNruycf/GgzcwBv9mQ97rzahdoO0z5rJMRn1UtmI304mZh
nAdyfke/XMxEvDKsMBbKYT59Jv2r0/NYujzFPG4SMpnhiM+tQ0ltGxmApQK/CbB9cBol7YMoYQFe
pdi80tYB4TOZwmeDhb8kEon0YamyXcJ6yvWIz6xGDustZ7He8Xwru7wdKWwb0emViGHi7wFQlW4+
xPchJr1C2FYiMzav3yfW23/tOB9WNf/ldL5PSSz4J+U3oqy+gwzAUkFuAMACPA/yr1dZi+S9qJS0
CMXMIOmnqZm0FMTbnKKGPtaTrRdOZ8fn1M274rK5alFY34vM8g7EZtWoTDcf4uvm3wsobny5T3Fs
+k+SkN+/JbZeppJm1pGsbScDsFRwZAZAIgPaRBK09ry52t5SHWIpOnqH/qY6+4Z/ttpFg2y/1Evt
7LguRgm/92KUijK3EOp8F1JRB5aqut6F+kdUqntgBGKpbJ40/lr1DIxCNDgG8ZDq+fMl0aCM7dOo
ynk/Rb0sn39LfcOTKK8nA7BkuHnnXuAkgCGpBIOSgTeWdFDyszUkHYSouwutzU1oa23+UbW3tfxk
tbW2oLO9TdjW8NCgsL13pbHREYyODP9AfPq7kGxsdME1Lht7Y02My4R8CcdgEUo2xo/Zwmtcxo/b
woof6w9FkxPjCy7+jvuF1vTU5Acj9t/fFqOmkS4BLBm4ARhnP9ogC5YDAwNvLP6KyJ+jwcFB9Pf3
IyEhAaWlpQuisrIyJCcno66uDqOjo8I234WGh4fR0tKC+vp6NDU1qb0aGhqEv+Pj48KxWYwaGRl5
J+LlcKE1Njb2wYi/536hxcvlQmtiYuKD0eTk5N8Up5oMwNLhfRiAnp4eFBQUCIVloWhtbUVlZaXQ
MM4N1AslqVQqmI43rSwfuvhx4GaIB0BVwXcxaG6gXijNDdYLIVWBdKlKVcCeb6kK2POt2QF0qUtV
HZ8rDhmAJcR8GQB5EHx1mirxdCKRCHl5eUJhUVXQVEtRyFTOe1Uc3vusqqoSGsbZQfqnSSoEddXz
fiietrGxUdg+Iae5uVkIgKqC72LQ3EC9UJobrBdCqgLpUpWqgD3fUhWw51uq2qelqrnBXpU4ZACW
EG9qAPhpe+nQqPADKxliAW9ychrDUhb8WGPKx1UF/dnigfJ1BmAus+dxAyBMG1emmxamTU/zv7PT
vd4A8O2PT05hQjY6kx8ZW8fE+NhM3mZLOjTMlh/5wfTXiQzADyEDINfcYL0QUhVIl6pUBez5lqqA
Pd+a2zYtZakK+HPFIQOwhHhTAzDEGrG2mgLY21jC4upVWNo4oaGzBQG+nmjulcDD1grPwrJZIZDN
BFdV4oFSlQGYmppCXWEy7OxtYWtrgwcvQjHOpk2xQjXFgvz4QDPsLezROzGN+Agf4S2DmJ7E0PDI
K4WUi6PKAPDh3KQopOfLp3PlpcYhOaf8lXRcY8wYlMQH4PLl+xhmeZDOmvc6/VwDIBsaQHVVBaqr
a5iqUFldC+nYDw3Rz0Hc3YXhWevi40Oj/Bd/N5ABkEtZ3hZSqgLpUpWqgD3fUhWw51tz26alLFUB
f644ZACWEG9qAMangFTvm1i2ZgOeeHjCxfU5mro7kJISCzFrSK10tWD/JJatifWwJ6eFgsDvCh18
QwPAcTU/jK16J+Hp6YHAyBTWW5cXKAFZGwx266J1DCjOT0FTzzDaCyNw8ZarMHv2pQHODw2AVJh+
/fg+XLobKAxzbpsawsTuhTA8PiG/i5XD9yDD1xm7dp3DiGIK8yHyoclxYb9mB3+un2sAxkekaGps
QH5GkvCtgcamFsheZuUtmGbrTEVbn3wP+HhBZjpaeuTH4l1ABkCuucF6IaQqkC5VqQrY8y1VAXu+
pWyTPgSpCvhzxSEDsIR4UwMgY79t4nMHXL7pJvzIHJm0C8HPAiEeG4G9kQFueSQK0xOC3GFy0gQO
z/wxIpsQHsebawByc3OF0/fKisJ5YnkeT8NfvTmwPj8RZ01N4XjbHnraR9Etm0ZGRBzqWZC8dnQr
fvXxN3APjBXOIExMvFwXv/lMlQG4e94QNi7hwjDnoYUJLjj6C8NFaWE4c8IE5k4urNcP5Ac/woED
VzE83oeA5z545uECk+MnEJiSLzziw4/ZfBgAJd2NFahuFQnD7S1NkI7JK9TwgAgdPWL0sePW1taG
itIS1DS3C/M4PR3NKC4qREN7t2KKkmkU52Sic+DlpZvi3Gy0iYeE4bnL9ff2oKWpEdXV9YIB6m5r
RFFREZo65Xn6OZABkGtusF4IqQqkS1WqAvZ8S9n2LKRUBdKlKlUBf644ZACWED/FAGQFOeO71Rtw
/dYt3HX1gaS/EZrfbEKBeACOxofwwD8XRUme2K1njJSUFJw03Itbz+MxPTXxRgbA64YJ/vz1d9DR
1sHdF4kY7CzHjk3r8CIsAi/uW2DZMk3WG5/GyU07EJTVgshHF7FSQw8l1Q1C4Zu9rtcZgEfmB/H7
z5ZBV1cXeroH8PEffw3rZ6noqkrBLi0tRCemwNbsEC7fC0RZnBd09awxNt6Ib3/5n7h6zx+RAU/x
/eqNSKvuwjgzPvNpANrrSlHR2CkM15bkorRWHuQrC3PQ3NOHitw0pOeWo6uzEzmsZ9/Q2Y+B7ibk
FJSgp6cbhXnZaOzsE5ZRUpyVjPjkNOTm5CInJwuRUbEQD02gv6vxleXaxYNorspHbGI6OruY4Wip
QV5RuTA/PzdLePnTz4EMgFxzg/VCSFUgXapSFbDnW8r2YiGlKpAuVc0N9qrEIQOwhPgpBiAz0Bmr
Nm3FPRcXPHkeAklfE/Q37EFJrwS3jI3wNDQHd87uxhpNfVy7ZgU9za04YeuGKRa0lZcCfswAPL12
Dlb3fNHZ0YkB6SgS3K/jjM0TYR7GO3BM5yjEmIDZHm1Elw6gIdUTBmY3hNkTsyod53UGwOmCAc7a
uaGzs0OQ9amDsH+eggiX8/hi9VbYWFsz47IfBy7cQX6cN/SYAZBKa6C72wgd8lXj5tnDzNgksyF+
FmBhDIBssBtZuUWQjQ2zY1XAjiFQXpCHzn55b17S3YiS8jpUFWUjNTsflZUVyEpPFd7C9RJ+BiAD
jV19GB1hQWJkGPnZmeiRjKKqIH1muWy2XE1LN5prSlHVLO/tF2UmMbNRiMqKCmSmpaKqae7ZhTeD
DIBcc4P1QkhVIF2qUhWw51vK9mIhpSqQLlWpCvhzxSEDsIT4SZcAnt3E6at3hR+ZI5PUQWvVLhQz
A3DT6CAeB+fC3eYQdM/ZoqmpAYX5OawwtGJoaOiNzgA8tjgLl8AsYZiT6XsLu/XPC8Piomh89/Vu
DLJQaKqxDxElrEccfQ+7TlgK88fHeaV+ua7XGYDbZ/Vh7RIhDHMemJ+E1ZN4pPrYYYv2EdQ2taC0
KB91HWJkBz+Cto4la8DrobFmB/Lbh9kSEujt3gLflCpMT4wp1j0/BqCttgTlDR2KsWlUlxUjLzcP
NU1dwpTSvCzUtfcKw41VRahkaRsr8lFQUS8EM/6GRn7J5SXTKMrOQOfAmGJcfgmga2AUDWW5ryzH
n4aoqyxGXatYSFeRn47imiZhvoTNHx2XV+6fChkAueYG64WQqkC6VKUqYM+3lG3PQkpVIF2qUhXw
54pDBmAJ8cYGYGIaqX7OOGvpCNkU69FLhzEmaYDRNl2UMQPgdOo4HvhnQ9JRCuM9O3HoxCkYHj0j
fPaSvwpVlQHg1+2VlZHjd9sUn69cA4ODB2Fy8QYGhnpw2Xg/dulqw/T0IWjsPAYpJmGha4jIwi5I
mvOw8ZvPceORFybZuuQmQL4u/kKeuQaAG44HV47humsEG54S9Nj6HCwfRgj3M1w+pIUDRidhYHQU
sfn1KIt7AaPD1zE61oJd33+HQ0dPYN/WbTh6xQlSFmj5q3/n0wB0NJSzHrg82HMGexoRGhIN6bj8
7sOKwhykZ+YgLzsHGTmFGJ5g+zzSjwLWq8/LL0BBcRkGR+T7L2capcyEdQ68vAmwVHEWYe5yw2x/
mmvL0dAmNxijgyLkZcnnF5aUQzr6855KIAMg19xgvRBSFUiXqpTtwkJKVcCeb6kKpEtVqgL+XHHI
ACwh3tQA8OAt7ulCe0fny2Au6Ud7axv62HB3Rzu6usUYGRvHoLhTuMu/so71/lkjq0wvLPMaA8Ar
y5CkFzXVlcLrfCuq6jHGjAYmRlDGxjv7BzDE8jjKgnyfWIzBoRHwhw1625uEXjtfXrkuzg8NgDxA
93R1oLunVxiWj3eis1uE4RHW8Ej7UZSfj5LKBkiHR4Sb4rp6+tHXmodDeiYoqW9GSUkZRlhveGRI
ColivbPX/zYGgN9YODn58vZ/SWc9cooqFWPMABQVoF3Ev8MwKOy7EuVTCfzYz4VfGuGPUSrhN0pO
8uPKmLvcJN8++02UTE/IH+kcfeWswk+DDIBcc4P1QkhVIF2qUtblhdTsQL1QUhVIl6pUBfy54pAB
WEK8qQHgkrBeNH/ZjzAsBPRBFjj5KWSJEOh5j5hP5y/Q4ZWYX3NWBn6leKDkBkDVi4BmxSkB/mjf
lCJYKeHTOPzjFHwZJbPXw3ndmwCHWWM8PDz0cpwFeuU4zzdvGMbG5MtIh4YwxnrZfc1Z2LPjIJqk
U5hiAXRuz18pbgD4u+/ng96uNmRm5Qhf2FJSyQxAN/904xKCfxuBB0BVwXcxaG6gXijNDdYLoblB
dClrbrBeCKkK2POt2e3SUpeqgD9XHDIAS4ifYgBma25gf1PxQClmPXj+lEBfX59gBuZbfDuFhYWo
qKgQGpO5gfqnSCodgqS3A5npORBLhti46nRcPKDU1NSgo6MDXV1db6WKkkKUVNQK301QTqutrkZT
S/sr6Raz+HGoZnnmje3cwLtYpCpYL4RUBez51twgupQ1N1gvhFQF7PmWqkC6VKUq4M8VGYAlxrs2
AFw8WPIAnZOTI5wJmG/l5+cjOztbCEK8kZ8bqH+ypMOscPP3GaiYN0v8Zkd+bPh2u7u7XxEP5D9F
vcwc9fX1vjqttxdiZnBmT5srVYbofYnnhx8P3qDPDbyLRaqC9UJIVcCeb80NoktZqgL2fEtVwJ5v
qQqkS1WqAv5ckQFYYrwPA8ClqpFUJVUN3ZuINyLKpw9UBeuFEr8MwLervMdAKT7tXUhVkJtvqfqd
VIn/Dvzvu8rXYtbcY7MQmlsHlrLmGoKFkCpTMN9SZQqWqlSZgrniN1qTAVhC3LpzP3BkghkAiepA
TyKRSCTS3E6cKvF7qirr28gALBXIAKi3VFXivyVV61mK+pD2hURaDCIDsMQgA6De4jdkqrp+ry7i
n7lWdVxIJNJPFxmAJcbPMQBze4SkpSd+vwIPgNwAzL2PQV3EjwO/QZP/VVXOSSTSTxMZgCXGTzUA
/NG9zs7OVx73eh/ieVgM+Viq4oGPf1mQ3wylznATpKqck0ikny4yAEuMn2IAeE+JN5g8ePBTp9wM
vA/xbfM88ED2PvOxlMWPGz9+/O5xVXQyc9DTO6AYkzM6zAyglH+MaEo4/r1sHRMvXxz4xnS0t73y
JkNgQnjDpBLZqBSdHe2CQRmQzsrf9KRwh7hyUf6VydHRn29g+B3LZABIpPkTGYAlxs8xAFzK06Zj
sz4SMzYy/INllFKm53/72d/xCdaYD0uF4blp/5aU+eDPmSvXywPa8Kj8LXmDc9LPloT/lQyCv3KX
v1pYVRpV6h+QzAQezhQLPsIxk0gxNTkJ6U+4hMLF8y3k5Weov38AE2ybwvFjwzxvE1NTGJYOvvHx
5Nvnx2+uARgV1eOU4R5s2LwZmzasgqndI/BfeKy7GptXrYZrSAJsTh2A3glT3H30BJ1D8uXehMmR
Xlgc2Y+1a9dju/YJNPaPY2q4DUaam7Hm+7XQOmqLIVYurhtrYtWGbdDQ2IGnES8/DjXWUQRDI1P0
KUxHT0USjh4zg/z7iD8dMgAk0vyKDMAS4+cagAE2zJ9zLUgLxZlTJjhvboW8hg7hG/mvBqF+SAaH
MC4bE8bH+POkrIcX7PsUaSUNGBuWvzznp0iVAeDBv74gCTfuuKF/RKZif/oxMChlxmMCw+I2eHi4
oaa9D0PSNzABLMiPDIrwzPkGzpw+BROTC/D0icbQODMR3fVw83BHc48U0jc0FDxoj46NYUQI4D/1
JjQJC/z9iAj0R35VC1vHEIZZ3kJ9vVHe1C2YANXLvSrVBkCG01obYHjVFbxfPdzXAu21n+F2QDri
nlzF5v3nUZYTim+/Xoei5i70S/qFzxTzMwLlpUVoEQ0KY5yayiJUNs3+NDEg7ajAndsPhWHbI7tx
L7gIYffPYu+5+8I0Lw8PdEi6YbRtJzMaqWjplAjTlYy25mCHhiFECgPQWRyFvXsPCwZlaLAThYVF
rOwp7cA0KkoLUdveI4yNDg1A1NmFpsZ2RZ7JAJBI8y0yAEuMn2sAZBNTKIp7hmUr1uOBmwdu21/A
J998j8zqbqFHrIQHXHFDIewcnrAmWYZ7N2+humMAJXmpKG94NUDIRodZQGS92Vld7ZGhwVc+csOD
Js/LqwaAB4oJOJ3Xw//z33+LqMImTMlG5D39WeuStFfg+o2HGBgeRlpKIjr7WfCbGheCMP/gDf9q
4dDIy1PKoyy48nkS6Qhk4mqs/fwznLvmiMeP7mH/1tXQP3+LBVAJUlKS0c3XJcB64kNDM0FmakKG
AbaOVz/UMwlf1/uIzKjCNNu+MotT4ywt2xflsjyIjQnHhPX4WQ+fH4v+ARZkJ/pgsGMLXKMK2KqY
oRpqh/b6VQjKfvVDRNzc8LcYKuHmjJsxJX1ikVBhlYx1FWLV8pVoZeVBSWWsO7ZpHsFp/Q349R+/
goHOdvyvf/01bjk9xrGzJ9HcJ4Htqd1Yu3U7vv12LcIyShDkag0tAwMc0NmF214xr5w54aSGu2PD
6g0oaevHdSMNbNurj70798I9poTNlWLXxmXYunsfvvvqe/gm8WlyRtvyoLnPGL2KA9RdGgvDwxfQ
UlcMzY2rcMiQreeQCXr6+vH4+hkcMDTC/v272TrKkPTMHL/7019gYePGSoocMgAk0vyKDMAS4+ca
AB5Y4zxv4OOVmiiql1+/zYgLQX5NJ0TNRbhw7ggOn2E9xo5+hN47jX/4b7+A1XVL/OK//XcYWT9C
fHQIiiobEOLlAmsrM+joGSI+p441ymMIuG8N/QO6OHXODFkVrajKi8LRI0YwPnYWOeVNGB0decUA
DA6Pobc+G8dPX4bPU0cYnLMXguj4qATej62go6MDt5A0xDy9in/8r/8LTr6RiImJRHR4EB69CBU+
MJQe/gJe4WnoaMjHGRNDHLtwBcVNXRgbGRIMwEhXOfZq6KBCpAgfA7VYv3YtYrJLERISgurKEtyw
uogLZ+1Q3tgMd+erMDp0CO4RyUIArCuOhbGRNowv2KOqPB/f/uZf8PGOU+iX9uGe3TnoaGvDPSoD
40M9cL5xGeZnLWBqZoG43CpMTMrwwuU2EvJqmCFgAXu8Dyd09sEzrlj4Yt/4UAcO796B+NIuFKX6
47DRIZwwMUN5cx+GehtwzdwEh46dQFxxPSQdlbC1MIPZaWtkVzaDfx1QyWh7Llav+B6dLx0IahI8
sEP3KnISvHHWzpdtuxHa+ucxOdmPQ0cOIeCFGzZvNRLStlcVIDzQHZ/9x6+gf/QUDmttxR8+3QLx
rPVxQp/ewa7t6+ETm4ZrentwwuoJCrJTsXr5OqTW9oN/1plTEf0QqzYZCz18Dj8DsEvjCPoV4+KK
eOgbnEdtSRrWf7UStk4PEJachrbSRPz2n/4dxidOQ3fnGnyvcQZud87ikPltxZJyyACQSPMrMgBL
jJ99D8CglHU+x/DigTV2bN+N1d+tgdUdd9bTHcChLd9h9+FzuHB0L75Yo4OIgEdYtmITYpIjsfab
5XALS8HZQxp4HpUF/S2fYJuxNe5fPoa1WmeQEPwEq9ZuR2CgD1b89Tdw9ouA7vKPoX30Mm7dtkZA
Yh5ksrFXDAAPECH3LkPziDlKcyLxzRffo1oyiQS3a/jquy3w8fHGTo29cHa+gVWrNiMxIxV79+1G
aGggNmzaBYlsEqdYsLrnFQrDLSuhd+oyTuptwZdrddEzMomhIWYAuiuwZ8c+ZNWJhDMDvKdqsl8H
Lm4e2Keni0Rmfn77y3+CW2AiHlqewjert8D+mjn+9KdP4RMSif3rvsXV+564etIQJhZ2MN6zHSYO
nnhkdYL1do3g7+WB5cvWIzQmGss++q+4ei8AbnansfekPWT99Vj7/WpkN/QJhgTjvTiusx/PE0oF
AzAx3IWj+/YgLisHmz76LQ5fsMH1W9eQWloF2yOaWKNpCKuLR/GnLzcjOsIHv/vVP8PJPQLN7d3C
sZxhahiGO1bC7EGEfHx6CCc0voXVsySURLnB2MKdGZ8KaO4/ySp6D4yMWb6fP8GW7UeE5F21xQj1
c8XyT77Fi/BYRPo+wrEzlhhUGID+lgp4+8rXXRl2D3v1rfDI8TRsPFOEaUd27IRrYDzCgqOE8ZKo
B9iseW7GAExJG7Hui6+Q2iw/qxHvZoVN+80wNiRBWUE+IsK8sHL5Kty/fw8rv1qNkOgEBLrfwUU7
V7jfPo3TN54KyykhA0Aiza/IACwxfq4B4NeeCzJT0Nov760NtDdCd+Ma1tjewtqP/wKdQ8asx2uA
LTsOIjU5CrqHLrJUMhzW1kN1lxRXTbTgHZ2O00f2Ial+DCO18diibwDL0ydg+ShOWKfz1SNw9E1G
aXIQjh45ghOnjsI3IlO4fj5jAPgp7fEBHNFciW9Xb8au3bvw51/9O+74J+Hm8QOw9UgT1jUslaA2
PxY6+mdZQBdBa+9OVHYNwuaUEW46OeHIEVPUVmTgL//+Kxw0Po7Dhnos7yyv3VKMjowyA8DPAGij
uENxylzWjq0b1rMgEwMDlrf4qADs0NYVZp3RWIUVm/bg6LGj2L1lB66YncX2nceFefwSQd9AF6zP
HEdgSh7O6+5DcEG3MMfloiHOXbaCzoFdqJGwlOIy6B44hCf3b+HQuevCWQ3hcseUBEd3bMGTKMXp
8clu7F29HvHlnUgPdYfRkWM4fvYs4pISsPWrj7FT2wBHjxph86a98HjiDE09fXALI+kV/+AmwN6G
fGjt3IBtu3Zj++ZV0DOxAk+R5e+EE9c8WQYqsf/AGcEAGLBj1Ng7gGsnNbBu6w4sW7YGoenF8HM2
x3ZmSHZv3YqrTwJnLgGMiBtgsG8Ntu7cjeWrNyI8txGDnSXYs2Y1Nm3YgL0mthCLu3DOaBs2s/V9
+d33iMxrUCwtJ+CRDZYvX4Pdu3djxbLVSGb73F2Zht3bdsDAwBCbtuugtKEVLtdOQGO/NnZs2gzX
6GyEPTqPUzfcFGuRQwaARJpfkQFYYrzNJYCwB5fwx6/WwicyHqlxEdi5fh2eBkXj5L5tsHjgi8gX
Tjhw0gLVxYn48q/fI7u8BHtXrcR971icNtLAs/BUGB/YgpBCETpz/fGNxgEEedzFqg1aCA8Nx4qv
v8Rd7wj4PHFFdHwKTu5fjeU7zoCftFZ+FW9sYhqFka5Ys01PCGqc6kQPfLt+Dzzu2eK7dbsRERmB
PXu0ERweiDVfr0Z0YiI0dm5EXvskapOf4e//r7+DuWssJkfasXvN97j1LBz+j2yFvPeNjEM6NIox
USXWL1uOu89CkJQYhRM6O7HN4DIzPuXYprkPMeE++H7jJkjZ9p+yXv02FiQzUuOhq3cQUQlx0Fj5
NW56BOHmhaO44uQG22N6ML7yEHcvGWGXtgliwgKx8tu18A0KZMFwGevt8xvqpuBqaYz/+b/+hNCs
WkyPjwi/wxT752ZljC/XaSIuMRn3rxzDN+u00djRhkd3nJGQnATdzV9h3zEbWJ8+iCPmzkiJegHt
w2cRH/5MyGcHyyi/B0D1Y4AyFObkoLSqTjHOgrd0AOI+ttCUDN09YhY8J9HT3a3onU+gqCAXDZ3K
k/NATXkeCsubFWOzmB5Dfm4OGsUvb/AbHehBXl6h8LvKmURhbi6aul+9CVBJd0O18CVJkeTl/f/i
rgZhWu+saeXFuSirkV+eGhoQQdz/8iZFDhkAEml+RQZgifE2lwDGRwYRwgL2nj2a0NytB1f/BKG3
11qVhWOH92L3HiPWy6uEbKQXlkeMcOtJCMKe3MbJU9fwxOMRsooq8eyJE/LqeyGqzcG12w8wPDaC
53etWA/WDJvXfoN7QalICnqIPSzIHj5mKtz5PsqCFs8DNwCy8XHE+z/FY18WwCfHhTMCY4OduGlr
jeKGNrx4cBG7WG/xumsQpFIJbp4+jqu29+Dy9BGq2gcxMdCMS2fPIKe2G+Pjk6gpjMch/V3Yo30c
CSW1GGPb4uscHezCjQvH2L7uYToAKzsXdErGMNJdC6eHj1BckAWHu3chGpJhVNINR2sTlufdsHcN
xNjUNKpyQ6Gno4EDxqao6RCjOMYHOnuPo7yhHrcsjmH3rl24H5iI0f5WONy0QXX7gHAsaxKf4q/f
bkQ3i9NDg4rfQSrFsKQX960vQVNzDw4ankZhVTMmZVI8e2gDzT37hPshqtr6Mcjyd/60Hvt9dPA8
Pp8Fz3xcv30HosFxwUS97j0A6gAZABJpfkUGYInxsw0ATy9hAZQFNyVTLADzO96HZ91JPz7KHwuU
97zGx0YxPjklvMBlfHwCw0NSFsAnhMAmUdytXpEVhZsO95CdGoV1K1YIp4lnw6+B87woDQAf5o8A
TsjGFI/UMUmkwreph1igVD4FMM3NAcs/P40+ya+bs+0Kz+6ztBzhDvs5d+vLRvgd+PLH9Piz9q++
vIY/dy9BPz8GE+MYGhoWbibk+88NgzLp9CSbxvI0MsYOsgL+qN6wsJ1pdgyGZ9LyJwYkincU8Ess
3W01uGisCTvXEExNTwn5ECRsQzqzHGfmaYFZmeT7NDj0MsBPyEYxKB0Sjg3/vfnxIwNABoBEmi+R
AVhi/BQDwN+frvx4jPJd6vMpHpzEnS1IjI9DQkICsgsrIGUF6gfp2LaVBmAh8rEYJB0aQkdTFRKT
UiEaGBJeWqQq3c8VP25kAOQGQNXxIZFIL6UqHqgSGYAlxk8xADz4d3R0CO/g58FjvsVfLysS9wrB
T8p67/zFOqKebnSrSMvzwPMyd/qHIn4sxL19GGLHolcsf/2yqnRvI378+Kt11RVuAPhxXYhjSyJ9
KOL1g78+XFVMmCsyAEuMNzUA/FQ47y2Nj48vGk1M8EsJqueR3kw8CKoz/HKIquNCIpHk4p0xbgTe
5EwAGYAlxk8xAL29vYpmkyAIglAH+BdDyQB8oJABIAiCIF4Hv0xIBuADhQwAQRAE8TrIAHzAkAEg
CIIgXgcZgA8YMgAEQRDE6yAD8AFDBoAgCIJ4HWQAPmDehQFoK8+EV3CSYoxtq7Mezo4OsLGxgZOT
B5p65G/j4/Q0FeGmvQ1u3L6H+n71fUadIAhiMUAG4ANm4Q3ANOyObMc//Oob1PfKXxGcF+SMP326
Fjdv3oSt1UV8+91aZNT0or8hA+vWbIDdbSfYWV/AF9+tQ0HzS3NAEARBvFvIAHzAzLcB4C+Wmf1y
mYHGTJwzvwF3Z0tcuR8sTMvwv4ej5q7CMCfJ4xr2md5FTbo/Pvl+L5pE8u/65SWGIC07B+7P/cE/
OjwmakBAUDgKctPg8fQhLpw1QXBSqZC2sy4N586ZwPbec4yMv9y+Mj8kEolEer1eBxmAD5j5NADK
tPz1tUp8b5ni9E0vNBZFYtX6/eDnAPKCH8Dg3B15AoakJhlbtx0Rhn1drLFj+x5s27AVjm6BbMoI
tLeuRWrLGDKeX8MxS1e42x/Bb5bvwmNnR3y1YgdKygqxk39u9/4TGO/bAUvXcGFdMhn/uI78vfck
EolEUi3evr/uuyBkAD5g5ssAcAfJC8grTA7hwJavWODfjG07tuFX//JLhJX2oCruKYzM7isSAXWJ
T7FZ5yzaWxpmvunfVVsFo82r4BCYj0y/W7B1fgYb02NIr++H582TcAwpENLt09PCnVv20D5oJYxz
ukRixRBBEATxt1C+8lcVZAA+YObTAHAnOZuCkHvYqW+qGAMyve2x4YAZcqI9sV7jGPLz85EcH4a1
33wFj4QKFEfdx8crNiMyIx9lJQUw2LkRt4PyWenswLYvPsLmAxeF9dy9eACWnvymQinWbd2MsJho
bFz+HSKTs3Dniglsn0YI6QiCIIi/DTcAs8/czoYMwAfMQhqAcM878IkrVIwxhjtgf90BOVkp0Nmp
gd27d0NP9zi8IjIUCSYQ+cwJmns1sVtDG3c9I4Xv93PMtL+DiVOYMBzj/wghGZVsaAz2N+zQOgyU
pnhit6YG9I9fRvOspwoIgiCIH4cMgJqykAZgfphGQYIv9uzei6pu9f12PUEQxEJBBkBNWfwGYBIP
bE3xJDRLMU4QBEHMJ2QA1JTFbwAIgiCIhYQMgJpCBoAgCEK9IQOgppABIAiCUG/IAKgpZAAIgiDU
GzIAasq7NAB8fmlpKYqLi1+rsrKy1xZEgiAIYv4hA6CmvEsD4Orqih07duDSpUuv1bZt2+Dt7a1Y
giAIglhoyACoKe/SANy9exfh4fL39L8OPz8/PH78WDEGRLjdgZ6eLnR1daGjfQB+cfmKOW+OqDYP
R/T1hHUYHD6KmKwyYXplTjR8Y5UvIZIzLumB/ZUTQlrzG08wMK6Y8ZZUpATgsv3L1x9jWoaHNqdh
/0T+gaQ3pbsmHx6+0YoxoCo1Gl4+iYqxn0deQiAM9Q6wfT6I4Hj5x5V+LtHBHkgrb1WMEQSxFCAD
oKa8SwPg7OyMgIAAxZhqnj17hidPnijGpnF6vwauOHkhOTkZsWEeWPnZShS3/7QXAuUGPsCqbYaI
i4tDuJ8n1nz5ObzjSzDY24mWTpEilRxTw704ddMTmelpOK27Azqmzoo5b8M4bpodwH98sgw5DQPC
lJ6SWKz9ZjfKGypxzfw6RG9oNCrjPLHbwFwxxgLuHXMc0LdTjP10skIe4rOvN8A7JBZxUQHY8MU3
eBpbrJj7pkzhjrUNCloG0dXehJ6BYcV0giCWAmQA1JTFbgAuHTkEn+RKoXCOSlugvX0TSlr64fH4
Nsq7ZUB/HSzvuKG2qgCXzc7iiLYWtA6ZQSR9GVGzgx7hhKVynUB5jAt2nbJDeX4CglMKUJ4RCkMj
Q1xzcMTxI9o4fPEmymo7MDrUh6ryCsR438Xz8Exh2UAPF/hGxOO+oyVMjA5j2/b9KGyWsBrUC8sz
R7Bz+1Y4PovA5Kyva4qrk3HJ9gGSAlxx6dYLYZrdkY34l3/9CMeP6eG//eM/4Yp7HDoaimFsoAsd
wyPIruuCpCUfp08ehtGp82iVTArL1ST7Qv/ky4Cf4GKHE2ddIO1tx/mTR6C1bxduPA1lRw6I93uI
A7q6OGZmj97haaSGusLA0ABWd5THYhyntDchOL9TMQ6IWiuRW9mEaN8HOGh4EA5P/VGRGw89HV3o
nTiHRtEwRC1lMDHQF86S2D8MQUtNMv7tf/wPaJ5xRGDQc+TU90LcUoKDWruxfdsuBKXXQCauwSX2
+xzVPYA9B06hvX9UsUWCIN43ZADUlMVtAICrejvwyTffY9OmTfjoj5/B2S+dTZ3GYX0NJNWzINKZ
gxV7jiIj2R+//3Q5krMKYKy1CZc9X54Wzwl+jCOXXp5+761IgvZJe4T53sblBwEIf3QJ61hQamjp
YnOH4XzDHJoaO7B263aEpZWgszgCGnpnMS4bhPbuPSgqL8Pyr/4Kt/BUeN40gba5M17Yn4PeKWYc
inNw5PgJ1Ij4h4/leNubYOehK4jwd8afl60F/2ZifoATNqw/gqqqLOzYroP86irs//YbHDx7FVbn
DfDZqt2ICXPHt+u3IresFjJ5/Ed1kg8OnrohH2EkP74BM8tnSPS8js+/3glPbz/4RCWiLCUYH//u
C1yzs8P+DV/CyPw+nK8dxr4zdmhsVQb8XhzfrotKFR9PtDq+HXoWD9FYkorlv/8MF67a4ZTeJqzU
PMbMVjYsr16BHVv3Hz/5DHHFZTiutQ+h2bVwMDeCZ3Qqzu3ZAkefJBSkhWLTur2IjQ3Anz/7GvHp
+TA12AGTe6GKLREE8b4hA6CmLP4zAEYIymkS1h/vdRfHbV2EOcaH9yOfZ2eoEpv0TiM5zhfHrW4L
81zsTHHqXogwzOFnAEyuuSvGgAwfO2hfuof0iMewehKMMHdb3PJPY3NGEez/8h4FcSELWms2CR8k
sr5wAQ/u38EVW5Y3WTt0jxwR0lQneUHngiVMD+gjorBPmDY63A/JiOIMxMQA9HeugTbr1R8yOozP
//wXPMtoxmBpDLT3X2MJBnHE2BwiUT2W//b3OGduAQvzi9A/dBr+Xg9wdvZ9A4zGdH/s172kGAOi
nCxw7IIHxsckeOFyF1fZsucvOiPQxQ5/+WItzM3NceHUMVjceARH+/N4llShWJIzBVP9TXCLr1aM
AzUFSUgurIGTzQkEFYshq4zGH375V5hbmOPKhbMwPm2OkOdPcejIcVy5cgUff/wVYkpqYXP2DBpY
+/H4+mm4er2A3lY9KD/JdOmoJuxuOeDMtevCuJezOYyuy8+EEATx/iEDoKYsdgNgor0ffplNivEB
7Nu6GVXiYVw9shf6pg6wO6WBX67UQVqcN7ROXhZSXb9wCEduBwrDnPzgh/hixU7hKYR7DtZYtWwV
0li3N5UZgfPOPgh8eBkXXViPdHoMp7U2YovOaSEPV07sh+7pa8Lp9NLoJ/jNLz5CYg0L8tJqbNur
Ke/Jh9zD5pN2iHvmgI3b9eH68A7W7dyHWrFMsW1naBjIP2PMqY55gFWsF12aHIJtm86xKYPY9vly
uPon4jILlJccn8DrsT1Omt1FZow7tM9YyhdUMCFpwd4NX+Cc9W22P05Y/u1fEVXQiNwYP1xzeIRn
Tx3w6WdbEB8XC62dG/A8IBgWJw7C1S8Nd68dxu1A+aUMJRWpAfji8+9gf+cRy/strPj4a8QVNcHx
sh4expSz7TVDV2MNnNz9cM/6DGydvHHXzAD7j1siLMQbv/7tHxBa3ACL/dth7uiPa2ze88RCOJzU
hPapq7h3/TK2apxCZrI/9hqfFrb50PoEdK55CMMEQbx/yACoKe/aAISEvOyZq4I/Ajj7EkBqbAxq
O3iolZOZGIbCln6MdVTD4sJ5PHB9goDYTLQ3VyMmVf7BoIKMBCQV1QvDnIG2KtiYX4apqSkuXbVG
RWu/ML2xPBsZrPdaX5aFzFJF+okReNy3FdLaPfDAsExxMb8zjwUyRa92RIzw6CjwEN/TUIKA+Bw+
FaHPHwjLJbGAqCQvPhRJ+bWKMcZEP3x8fFFeUY6ocH45g/Xi2XJO7nGYHO/H9atmMLWwQ1P/CCTt
lYhOla97NtKuKthePi9sKzK9XJg21NeK2/YWuHDBDEmFdcK0xpIkIc1NV1+MTQGFmXEoqn95vV9J
a2UOzM1MYXr+ErLL24VpOanRKGnsFoYH2stwia3nisMDDIxNY2qoHdctzWBpewOuHj5oHhhHdUYY
7G88QVJKPKo7BjE9LsEdO3OYXriKWtEYJgaaEJGQKqyvLDcFsbn8c84EQSwGyACoKe/SADg6OsLJ
yQktLS2v1Y0bN+DiIj/Nv1joby2Bwa51uO2dpJhCEATx4UAGQE15lwYgNjYW+vr6OH369Gt18OBB
pKbKe4qLhb7WUrg99QXdt04QxIcIGQA15V0aAIIgCGLxQQZATSEDQBAEod6QAVBTyAAQBEGoN2QA
1BQyAARBEOoNGQA1hQwAQRCEekMGQE0hA0AQBKHekAFQU8gAEARBqDcTExNkANSR+TQAPA0vSCQS
iURaOhoZGYFUqvx6x6uQAfiAmS8DwOEOkp8F4AWJRCKRSEtDPLjLZPLvl8yFDMAHzHwaAIIgCOLD
ggzABwwZAIIgCOJ1kAH4gCEDQBAEQbwOMgAfMGQACIIgiNdBBuADhgwAQRAE8TrIAHzAkAEgCIIg
XgcZgA+YBTUAsm6Y6OshuVIkjA51VuDWDWeoft3Eq/g6XsZJazfFGFAS74MtW7dh586dOKh/AqGp
xfIZE1J4OF3FdjZ9n64+wvOr5NMJgiCIt4YMwAfMghqAkSb85R//b3yy4zQm2ai0Lhk7t+5Hv3wu
pqenFEOvMi1twaGda/HF2l2o7B4VpvncNMXe43YoKytDakIQVn7zNWLK2pHhcx3Ltx9Dc1sL8tKD
sXz5KhS2zX2hxbTi7+whOdNTqvNAEARBkAH4oJlPA8DfKDU2Nia8V5oz3VsJ40PHcezIAdx4ngoM
lENn/2HIMAUfJzOsXbcBW/Yboay1T0ivJDPwPpz9U5DicwtX7ocK03zvmOOSU4gwzEl9bg+DK49R
mRqE5Wu344lXGOpaOtHd3YGGklQcP2cpBPuyhBewd3oK78f22KuthfWrv4fD01g2Zxput0ywev1G
aOifRl2X3DRMTk4K+8BfikEikUjqoqnXdIbIAHzAzJcB4K8C7uvrE94GyF8rKUwTV0BH1wRtbTXQ
3LoLqVmpOHPCjPXUI7FutQYaWMD2sjeFhoE5swQvMdFcjYNmDnhodQJ//mqHMC3IyRznb/kJw5yK
GA9oaF8WhqsLYmF+7iy2rVuHQ6esMCgbguGuLSjskMDxrA48Y4tw7fhWGNj4oCk/Gt9t1UJUgAdW
rd2HxrYuPL5pCa+EImFdvCLwfRgeHiaRSCS1EG/j+RsBVUEG4ANmPg3A3I8BcQOwV9MAfGpBlBvW
rPwWRqetEen/BPqnnIQ0I9Ux2LpNF8qXUPY3ZGHtmpW4fMkMZhcvY8WnnyK8qB1xbra46hKtSAU4
m+nC5JYX0sK9kNX4crsG61fgflwtMv3vwOySJY4dPY3BccDqzAGEFrP8j9Zhp+EhOFlfwaFzLvKF
xgfR3Cm/T4EgCELd4Gc+6WNAasiCGgBRKbZs2oeWMfn4qY1/xH//SAN9XfXYs+prmF68iu1rVuHq
wzB5AsZdUx2cd3o5nuNrj+2HLiP0iT0++W4Hrl27hnMmx/Ddhn1olY6jINQZf/n8G5yzvAarixex
ZbsWStqGmbNowaf/8g8wtpefNThjsA0eqS3MYZRi2RYNlJXnY9v3X8H0siVWrfgOHnElQjqCIAh1
gz4HrKYspAHA2ADS07IxzO8AZAx1NyA8OkUY7u8ox23HW/BWjCvJSolFs1h+CUFgtA9JqelorKuE
ywNn3Lp1C57PQjEw9vJ2vpbKXNxm0285u6Gh5+WyRprrEFrUJQwX52egScSMwfgA4lNShUsOvW0F
cGTLhaXKT/8TBEGoI2QA1JQFNQDvi8lB2J7ShPYJ65lLCwRBEIRqyACoKR+kAZgaQVxkONoH5E8j
EARBEK+HDICa8kEaAIIgCOKNIQOgppABIAiCUG/IAKgpZAAIgiDUGzIAaspCGwD+Vj3+YqDFIp4f
giAI4iVkANSUhTQA/NWSfBlVgfh9ib+tkOeVIAiCkEMGQE1ZSAPA3y71utdLvi/4fnR3d0MsFr83
8cqkavr7EM8L/11VzVvsUuZ7Ke/D24jv82IqS4tF/LiIRKJFXS4WWyeEDICastAG4HX3BeRnpyMu
Lh49wwv3qN7QgAhtXa++4pfvB6+A/O/7UkdHh3AmQtW8dymeB54X5e+71MTzzX/Lzs7OJbsPbyO+
z3zf33d5Xmzix4UHrMVYLnh+urq6hLZxMUEGQE151wZgStoNE90d2L5nH3R19bB243b4JZcp5s4v
qT43YXDZUTEmR7kf/K90WP6p4aFBCfpV7PO8iVUcfhyU47wBUDYGXP0DEkyxDsGEbOSV6QNseFA6
jAlWOQcG5NP5/DHZOEaHh15N+zPEl+d54RWbD4/KeKM0DQnbFh8fHpW/Rkk6yPM4a1k2Tzo0grGR
YQyPjEE29jLf/O/QiPy4Kns5oyNvn1dV4vnmvyU/o6PchyHFbyrf9jRGhqRvt222LN9X2eiIMD77
d1Ql/luOT07xDAh5mJ6a+Jt16+eK7zPfd34M+DjftmyC/YaKbU9NysvN6LyVlwHIxicUx1T+W79S
RvixUhz/YengnO3xsjyEMXYcpSxIjI+NCr8V//u2+Zorfly4KVKWCz5tdt6E+s7yP7te8r+SWesY
GJSycj3GfvuhV+rf6/SD5V8jnh8eTMkAEIuCd20Anl8/Bo1j9ooxoDErHNYOT4VhSU8dnj9/jtSS
WmG8vakWpUXZ8PHxQmO3/FLCyEALvF48R3yu3DR0NlUiIzkFOXmVkPR2IZAtHxCRKrwBMCvgFgyu
3BbSKVHux/DYOBoLYqGtexwN4mGMSF8Wbl7QZ1dmYXzW8ZGPK9O/TPvKtFfSvKpXDcAgJmUDsDQ5
jHsBqZia4I2NPN3QiAytZem47vQQvVIZO5YSZhJG4ff0LoKSizDODMPsbci3+XI7c/Mwd5znQWkA
xsdl8H94DXsPnYdoaJyNT6Awzgs7NPajtKWPBRDpzPIj7NgVpQTjkW8ksuMD8MgvWlieB8sR2QTE
zaU4d8oYu3btwuFzl1Da1MUCqPyLY7O3L6xPMcwb49nTZ+YrNHve7PmzDQBv4MUtlbh0zggaGho4
fskKNV0DGGUBa2ZZxXrmrov/ZrOnK//yfS1LD8MdNx+hzMyeL9fLdQpGbmocCUFu2L9XExqae+Do
EQjpmAxSxbZmr3v2el5d58tpr05XruPl/JcGQMKM4SjSwp9h/77t2Ll7D+4HxmFyaoqVlztCeeFl
5+W65q7/h+t+OY+JDU+MSuHu4oCY3GqMjw4JQSMt+DF27jVEfY98vLk4ARrbtyOpuJmlGZ5Zj5QZ
xcaSZNx180ZJdhweeoUhNykED70jhLL22nLLh2dNfyWNYnhmXDGf/51rAObWd25QZi87e5gbFHFT
KRzvP0JFcQ4c7rmgl9WJQWW6OemVw7OnzV2ncpz/JQNALBrerQEYx/FtOxBbJhbGRG31yMkvQlNH
D/paK3BAcwvOnD+PrVs2wj+pHK6WuvjV52thrLcfa3YeR3t7M47p7MCJs+exe9tGuIblwc1yL373
6XJ4+0fi7g0zHD9rij0bv4OlawSK4p7AyPyOsC0l8v3oY0OTeHzNBP/6i9/irl8S2wHWuDPXz29c
5DcL8rxLWSMxwf6Osl4L/8t7PmPjk6xnMMp6WhNCUJMODbMe7rCw3hFWUaQsSPMeF+99jbKGn/dD
G/KicPT0NfSzHjZvRGYbgGE2rbkwFt9+9J9Yr2OC3jHWm2K/xRgLpJymrECs260NEe+8TMs/mnz1
5B5cdZN/GZH3TqQs3+Os5zfK8j3O88uC9QjbNs/nKOuhCb0t1iufGOdPZIxikgVrZS9faQCAKVw7
sgn/5X//eySWdwrrtj++Bf/lf/s7JJTLL6OMsfXzfZuYkKGzpQFtPX147mAC3YvyYzwoHcGwqBY7
Vi3DcavbyEjPgIudKZat0UStaIhlf5oFIRYMWU9wQnmcpyaFxpifSRB6jSwQ8QaH52liclp+rFmA
4D3YmX1if/k+8eM3YwDYMeBfdTy6dxMOXbmPstISXDutjQ37TSBlh3KabYdvj/+OwvZGxzDJ9mOU
9fImZGOsNzqCEaGXzAwD2z4vt7KJKVYOJtDT3oT61m4Uxfvi1OW7rBSzY8HKBD9+fHn+m/PleM8/
0dsRf/1yFQKiYpGelIB9G1bizPXnQjmYZvss7Af7Tfi2RxR5GGR550+nKM828HLGzcyUkGf2e7Gy
xu+lGWd5EY4Z+63lAeylARhh5aghNxiffrEKEWl5yM2IwffffAq/pFLYnd2Pm75pwm/EfzuJRMr2
ix3/4WHhjMEIKy+8N863M8TWO8aONz+rI/xl+ykZHBJ+J15nThlsg1NwDhuUP03jdfMEa+z/NzxL
KBXGfW6Z8MYf7nFygy5jx5Lv7wRbt6izBQ3tPUjyuo79Z+0R8sQaB83vCemE+saOo7J+8W1zg9vH
zzqw34cfB17P+vp5uZj1W7JjxcvkGM8vC/Lj7C8vF3MNwA/qO/tF2suTYXzSCsPjA7h4wgRple1s
8rS83errRk1jG8oSX2DjPgMMsR+QT+d1a5jlRVlWeX5He6px8ugZlLUPYJql4WWT54n/5b8nP+Yz
vyPbRzIAxKLh3RqACZzW3IaAnDZhLDf6OQy0NfDJdj0EuDril7/6BEZGRtixdgWOX76P2zYmcAzh
X+kbw/Z9e/HM7T5+829/FNJoblkDnePXccvSEDYvEoX1hTy9hYOHj0Fny3fYfcYB+THuMLK4K8xT
wvejXzIESUshjplcRFFOHPbqHkOfjOVuuBfONkexZt166J66BhFLF/zUio2vg4buCdR19iE9zAWb
Nq7Bhl37kFbdgfSQ+7B58Fxo4O5et0BSXjke2J6Drp4WVq9Zj9DkMrhZ6+Lv//Gf8TgqV2gMZhsA
3jDdv3YWPnHZsD2jD8943nBOIy/mGTQ2bMbmtauxTuckC35S3Dqnj+1bduPzTz+Ge2QW3G6aQHPH
PngGJiEq8B409+yD/glTVHf1oyw1GDrs2G7dsg1PQ9PQVpMHI4O92Ll1E645PcMQa5T5ac2XBmAc
9heP4ZNvV+KGewSmhlpgtH8Hvl+7DqllbQh2vYn9rFe5e48eIjNrUZEZgvteEQh+bImj1x4KeR5n
/iT60VXsPHiJjTNLIb8CgNqKcoh7OmB5Rht7NXQQHJcFj7sXsJYd5z3GF9DWNwSX62fhl1KOCWYg
zK3tUFFeiuOH9mHvju3YulUThY0ilKQEQluL79N2PAlKZI2W7FUDMCHFBbbMnsPnkZpbgu7ONhQV
l7DgNgh3pyvQ3LsPRhcs0TLAfoPqNBzYvxFr1m+GR3g2Qj1uwNk7mv0+Ely3vYqswmJcPKYJnX3H
cf++M576BsCKGaR//Kff4/yVy6wnGyTsm/stczwOSBJ+/8lRMQ5uWQ3PZPkZLM40K1NVtc0oTQ/C
7p3bcMLkBgqK02CwdwvWrt+AOywYiepzcO7iRfSzoJcY8AAu/nFIDnrE8rsX29ashqn1Q9br7IOT
zWns0dwFLYMTqGjpFcyE0gAMj02gpTAey5athMOTQFQ3tKC5vgItHd24fUkf329mx3HjOlg5B2JI
0o0bF09hz/590NY7icq2XoQ+vcZ67rtww9kP2RlB0NbWxD4DQ8QXN2JiqBMWR/Zix5Zd+PjTT/E8
sZwda/np9Od3LfDXr5bD7KYrGxvGeeMDWLb8a8F4ZIS6Q2e3JjQ1tOAemo2OqgzcdHmO1GAXGF25
jST/e/jm+zXQ2rkJBsctMCCbRk7UU2zdtArrdmgirqQRuWGuOGX1EN0txazem6ClVwofF0vhtzx0
zoKNDyI7ip/12IVtW3fieWSmUC5mG4DBIWYW59R3bl88bQ3w9//wzzhtdhr/6x/+AQeuOMHF4Tz2
sPzecbyH20/cUZIVi9XfL4PW3t3YsUMb1e29cHO8AK/4Ikz0N8LupgO8n9zAP/z9P+Ls/WDUFsVB
V1cTe/T0EJ5bhV7WsTllrM1++80wveaEvmFWZkVkAIhFwru+BJAe4IhvN2ujvlMkfJGvLOwh/rhq
G0K8n2Dl6j3ILy7Hk5uX4fwiBncsjeEcUcxSdWLjnj3w932GlSu2IqugFD73rWH/KBh3zHVw7XkK
psWl+PijPyO5uBL+dqex28Qe2RGPoXfxlrBdJXw/xtiG455a4+s1uxEU8AKf/e4PCC8VIcv7Br5Z
pYnisgpYXDiHG9etsXrFeqQVlcPp2mVY37DH9lVrEZJWhKAHVtiy7yxrMEywj5kFzhGdbfCLzYLO
5s9x+nYQoh9b47tdR5Gb6Iv1Ww+gTsR6nqwnpzQAEtZjHu+tx/pvPoP9Ez+c1d6ErYdsMDHWhW0r
VzAzkIewx1ew7eBpZpBuYvMeY1RUlUB7y7d4woL64e1/xrm73ihP8sMff/tHXLxqix3ffYrdx6xw
5eAOrNqih2c+TxCbWwy3K4fx0Wcb4OnjAfeQSAywbc81AJZnDsPQ5CzOW9xAVkIgjrNhQ+2diCtq
RrD7TTbdCgc2f4OtR6yQGvQAemYOCHe3mzEAPN4/vnQMZy3c+eFAa3kG9Pftg8GhUyhkPfJt3/4H
bvkmIv6ZA1at0URJWSXMDmritJULzhltgIM/61l2l2CL5j5kZSTh87/+EZGphXh0xQgG52xwXocF
zR2G8PR2RWBiptAwzRgAVn4Hh8YwNdYP19tW0Nu/F+tXrcGTsDQURLrh17/9C65es8X3n/4eRqxM
nDuwA2ccvJCfEIQzV+xx6YQmTlznl6Kk0N67HeHxiVj56b/BPaYIic+vQ+usNZL9H2CbzgVU5IVj
43Zd9A30YNeGNYgubme/mQyj/TXY891WZDdJMMUaVP9HdtDS0YX1kyAkeF/HH7/+DlWNLTDeuY4F
zOcoYcFo1YrNeP78EdZv2YR+tnVfx1M4fesZPGwPY43mcVQW5TFDvA73XFzw5a9+ywL4IzzweILy
pm6hN6o0ALw88ZDSUJKM08dOYPvqldipqY+aTglunN2DjUbXUJgUgk+/Xo3C2kbcu3EJl6/ZYPWn
v8aVR+FwMt2BLYcvCUZxxUe/g8EZcxzT2oAv1h3APTszaBqaoaqiENvXfAW3GGbKFQbAzf48tIxP
4cz5y8jPSsBJkzM4orcTnrGFSAt9grOXzXFcewu+3noQhakh2GV0DimhT2FkfhtxXo74buNelBYV
Q3/retg6uWDPujXwjs1DtIcDlq/RQgfriZ/R24a/fP4167knojrJC7/5zUewYL/l2i/+BENWBk/t
WoOtzKh5eD1GaGoexli5mG0A+Lm0WLdrr9T3wPxOtOb4Y/VGbVTVl2L3xs2IyK6A0fa/4KidG9qK
47FVSx856XFYvuxrJGcXwfG0No5ecobZ0S2wfZEC9FVhq4YGMnMzmDnajZR89lt99RfsNT4PU6Nd
+GjZTjy+ZYE//G4Znnh54rFfAEQDwxCTASAWC+/aAPBTzd73zLF520asX78ROqyB3Gt8CYOyUdyz
MsYG1mPdwBrXwpYevGC9Ns/ESraMCHpHjqBFMopnt89h/aat2MAajvSadvjcPQvnoAxWgqWwOqmF
rdu3YceuzTjl8AxlKf64eFsejJTw03bTYwM4rbcZ27UO4djxE9i19msYW7rA3eYMjlm+ENJNT47i
qd0Z1vO3FMYxPYEE3zvYvOukfHywGvtZ79vq6im2rLMw6fSh3fCLSYfJ4X3IbJFBVBSM1VrGKMuK
xn4DM+HU8SA7lkoDMM4iZmbIPXz+zUqcPHEcJ44a4K9fbEBqeizrjekLvRRpdRIMTp2F3YVTMH8g
P+3vePkw7vvG4IzBJkSU9qI01Am/+d03sLKxhqmJMUwu3kZrWyMeOFrj9CldnDF3QruoE89cHGF2
8SgMj19Bs0jKeoLyyxFKA3Dl2AFYP/bFLbZPGppaeBYUgeM6WxGVXgCzI9o4dcUGl4z2Y6fxVaQE
Pxb2O+yp7YwBGJuYRlbAXazZdQjCR5nHh1CWk4QVX3yEez4RzCBtRGH3NAJunsFRy2c8BSqjH0FH
jwU91tt+El/DOpH12K19AOlJMdA6fEJI05kXiK07DqKhtQn3Ha7B5OQBnLO8j/6xcfT3yQ0Av8Fs
oLsRbm7uLITLGapMxLcrNsP68hn89csNsGHH5/RRI1heu8YC2Q7kdfDQAPSKu2F9ahcuPggWxg/p
7kZ4LOsp7t6EetYm5gffgf5FBxTG+UDvlIOQ5ryxAawsLXHopAWGmaEclAximpVBExY0heDAEHe1
wdf5Mv688QDCve9g/0lzNnUIGmu3IL9THgAu6u3CVWtraOpoC+PhDy/gwu3n8HA4C3tv+Wl728O7
YOcWhcKUMJhbXcFebW2EJJVhXDY2YwBGxsaQnxiCwIR8YRnOvdNaOHDuLu7YHMf98EJA1oqNuzUQ
HhUD/f27YWF3mwXe73HR2R/3LfRg8yIVsqZU/PEXv8P5q9a4cuEMTpw2w5EDOnAOzBPWecVEGw/D
c2cMgKuNCY7bPYarozl27NyNB8+DYG6sAY/wNNxmZc3o3CXYmx7D6l2GyE0OxQGTK8wAuAlnAMI9
buKMo7y+eV8/h33M5O/ROSt0DDDZju3frUQt20z0nRP4P/7P/4kWViESHpvjt39drfgtD8HM1hWt
TdW4Y2+J40f345K9G2tLxtHXqzAAwpmhwR/Udx3TexhoyobmAVO2sVEY7NVBVZcEZ/XX43laEybb
cqCpdwQZ8aHQOnqW5wh1ie7Q1TPBmRP78CCylK23Fbv2aqK8pgIH9U6gurYQX//n71j9s8TVy6bY
r22M0oZ2BD17iMsWp6FjaCKcuRlgZZYMALEoePcGQI5sVH5X8lx4r1TeLPPlJzDF1isffllhBlma
McWokGZKaDIE+HVU5fL8muvseZxhtmBpnAdWrt/LmmI5E52F+HbZSrzw9sSqZd/A5vpNrF6zEU9e
eEFj9Tcws76BnRvW4bqLO4w11uL4xWsw1trGGlcn5MZ64PNPVuG6nSX+7T9+wRrmXBzavxFR5f1o
SX+GL7broaYwCR/9+hP4JBULvRMedPnNf9OyftYAr8LjmJdPQVgZbYexhSNM9TVYL8wWh3auxSfb
jJAb74dvv1kLe9sb+NW//DNcgpJhvGcZ3BKqIWnKw/Z1a3H7kTtOHdwPezdfvLh/E7YOLrh6Vg/f
bToIr2dPcNnSEfdunscf/vw9StoGMSIdnGUAJnCW9bQuuSciyf0i/p9//ivaWe9r34Zl8AuLwtov
/wSHJ564oL8Nq3TOI9HfGQcuOCDQxRx6insABvi15bE+nDu4Axu1DOHsfA83zM/jX/713/AkKBpa
W79CbMUAmvNCsfKLL2B3/RbWLl8OJ79kuFkfxerth2DOAswvv1gr3Pz59Wd/xqXrt7FvyxpcuusO
T+cbsHd8zIKQFr5YrQuxbEpoTJUGYGK0D2e11+HrnQfh5OyMS8b62H/0KgpzErBl/Qa4PPWEAQt8
TyLT4XLFEGt2G8LK9Ch2GF6A92N7LFu+A/ZW5/Cv//kR4pKSsHHtVygRAVm+17Hb5BoqUwLxO9ab
yyhrQ2HUY/z9//cf8CSqgHlafjllQLgBsiYnDMu++gKXbOzw8N596G36Fn/YaIgwT3ts0DosHCcH
1pPcuOsg7CzOsl6pForL8rHp6y9Zj/w6VnzyC5y85YuAO2fx6VpNONhb4dt1OxAcFYVLZ87jGev9
f/vXj3DNNYa71BkDMDo+idrMIHz6lz/juIUd7t29zcrEOnhG5MD27D5YP2emZKAaKzZugusjJ3z1
xZd45u2NXd9/DBMHbzia7sLpO/6YGu2G0a4tOH/9Hq6bHcUJu0dIDLiHb5dvwXVrW/zz//xnuMWy
4Ke4B+DelUPYb/4UdWnu+Lv/3z+htKMfJzVXwMU3HPvWfIoLNx/i5vlD+OvafchJCIDGobNICHgI
7XP2iH1mj3/50ze46XgTy1euQUhKJk7uXgOjMxasHO/GriPWKEjxw5at2nh00xobNY1RlJuE7evX
44GbJ4y098DJKxiuDjZwcHqKc0YaWL7FGIOsbehXGIDR8SmUJz7/QX3/+qsViI6Pxle/+5SZphQc
WLMcF5iZOLD7W7hEVzAjlM62p4PctBj85le/wJUbt7Fz3Urc8IrF8xunsHLzQVa39PGvf/lWMKab
P/0Udi4+OG+khWMWDnC6ZgrDC3aIDfPGuQu2cH1og9///gsklnUy4933Snu2GCADoKa8LwPwvhga
GUFhWiyCYlIxqriRbGxUinD/Fyis72S99SCYnjsHj5BkTDLvUV+agAsXzuHu00CMsh5uV2MhrMxN
YXn7AdoHRljQkcDr/nWYs0D13C8AVfVNiI0IQk37AHoaS+EVHCEcW/dbN+AemCRUJsEAsMokEbXD
28sLTT2DwqNJQyNjaCjJgG94IrqbK3H1ohluOz9EQGQ8xidkiPF5hAuXr+GJuztKqhoQF+6LwupW
4Uau2tJkmJmeg72TF/pYb7ChLANWFqa4ZG6HiqYeiNsq4XD9Cs5fuIy0/CqWD/lNbEoDMDIyhKTo
ECQV1kHUVAq/gBiMjA4ixO856lnPqCg5GBdMTeHo+gihCZmoL89HVEoOKgrSEJ2aK9yUxc3b4NAI
xofF8HZ3hilLf8v1OSKjYlFSXoWIEG9UNYswwUxbflowzrHj/NAvAqOTLJC318He8iIcHjxBYHQy
avLjsW7zWlhetcPN+z6QToyjriQVV9mxv3z1OsobOjDG8szLpNDTY/vAH5mUDYrg9fS+sG2720/R
3jvEyuYUirPChd/1rlsIJPzmNmkX3O5fgyk7niX13cL9Hy4OVrjmeB/eQaGoratDUIA32vpG0FSe
hdD4NAz198CZ9TzDMmoh68jBylVrUSUan3mCRLgRkP0WLVVZsL56CabsWPuHRyM2KQvlRRkIiowV
bsYcGeyG6z0bnLtkjuzqFuFmv5xoP5y/ZAE3ZjoLKpvwxO4Ytusaw9rcGtG5NZCNSRHs/YDt13k8
eR6KAXac+Q1lSgPAH9Pkj4c2V2SzbV9mx9YMAXG57FhPITU2BBmlDRgZ6IS3nz/axH2I8nrI8ncJ
99yfIK2gEjnJYUjMKWV1Yhw9reWwszLFRStn1HUPYGpiGIFud3HR3BZunp4oqW0Xbhzkv3k+q0th
yQUYEjfB1zsYEla+Y4O9UMzqUkNxMi6dN8WNhw/gExGP5roKhMUmoa6iAJHJWWioyIfzXQf2u5jB
JyZHuITR01IGW0tTXLl5F13SUSSHeiM0VX4fkOejByhv7WOGOlb4LW8/DoJUNobK/ARcuWSKq9a3
UN3CL40MzVwC4DfmlmQm/KC+RwR5I6e0FgH3bwv30OTGBcPB4RGCwvxRVNsBaU8jgsKj0NLcAM/H
TrhsdhG3Xdn2JiYw2NmAm9cu4cZ9V/gEh0MkGUbci8e47RLIfod23L5uxsqVAyo7+lgdb8K9O9dw
/rwZqycFws2ePJiSASAWBepmAPjLbwaHhoW7r/k+CfvGJNyVLtxRLK+Y02w+P5swPKp4URHrbfE7
56XD8p4PR/7+AIlw7ZvDzzjwu5J5EBgaHBCu8U+zYMeDPWdqfGwm6ArblgwKZyiUzyXzafy5an6X
Pn8USQl/NJDPn5h1MoM3wONswsiQ/HnrEWU+MSVcZlA+88wRHuEbfFm5+Z3SfBllXnjF5sMyfgc2
C6o8iE9NsXyzbU5OTQv54z1MAbazk2w/+F3j/LEyfvc+/8uXF8oK+8tPu86ceGHBl9/9zO8458Fo
iAVLvi9jiuPMdk44rjx4y5EfzfaSOOifOAf5VFa22LqHZh173sjz7c02ADPbVv4gbDn59viz8Irz
QorfcYAdD2Uyfnz4b6GEPzHAG0N+pzw/28R/c77PyjSjA22wOKUDSydvZhKZeeH7rRDfN35MlPB9
509f8GmTwu8oz6Ny2zLFEyRjih+X1yPOI/szuOWTLAxPKO5sZ8VKDtsHob6yfVYagJltj87aNs8z
Xzf77cZGpKysysublNVJ5mXlsL/8aRZ+fPhfnpfZZUd5tzs3wwIsf8oyJxxXZhj4+yuE48mOhYRN
G2eJeZqZusPgZZg/MTPByjZ/4kL+5MXL7UxNKJ6CmDVNXu7Y8ePli+WB/67D7Pfkj2bK4b8lP97y
dxFweL3gx0JpAPiw8okPnl/hODHxssif+uBHnR8nfoz4wZhU1il+Nov9dvyJFeWuK7cnmVVWp1gb
x6fxy3n8MiE/E6WEr4efFVPCywFPSwaAWDSoowFQNpjvS/wNZcrG6H2K54Hn5U0q9jtXf5/wOleV
8xTi+ea/pdLEqEoz35IwE9Db04Gq6joW9Ib/Zr35ORL2iwUwcS/rQf7I+nk6vu/vuzwvNvHjwg3A
uywXbyqeHx5M516afN+QAVBT1M0A8H3hDQMv0O9LPOiqmv4+xPOifG/6YpJIpHinu4p5SvF8817e
u94HnjdeH8TihdummO07NwGq5inF95nvOz8Gquarq95XuXgT8fzw9oe3Qzygvg/xsssv38yGDICa
om4GgMPzSiKRSO9L/AwAbx/fh3gg52dIZkMGQE1RRwNAEAShrvBAP7ctJwOgppABIAiCUB/IABAz
kAEgCIJQH8gAEDOQASAIglAfyAAQM5ABIAiCUB/IABAzkAEgCIJQH8gAEDOQAVAfptm/vr5+9IjE
EIl7SSTSYpVI/pe3ofMNGQBiBjIA6sPIyCiqqmuFhkUs7iORSItYtbUNrM3tU9Te+YMMADHDYjEA
FdnJcHdzxaNHj5geo4wFquzcLAyxvP0U6opyUFHfqRibRkVuHjr7Xn3rlbrCK2dHZ5dijCCIxQwP
/mQAiAVlcRiACRzbvhYaesdw4cIFJjNkFJQgLT0ZQz9yBkzW24qgCPk305XcNFyP//ofazEkfMFj
CsfWbIJPSoMwT93hlbOtvUMxRhDEYqanh78OmwwAsYAsDgMwitOHjFHxStJR5BYUYXCgD0lxYXjw
+Anr2Tfi2aPbuHbNHlUtIsS5XcIvfvMJYvJrFcsAj20u4suvl+Pqg0Bh/Ny2XQjP7YCkuw7O9jaw
sb2JiiYJMNaLhPhIPL7riCchyagrz4DVNRuUt8j3sSg1DDY2NghOKRXG82IikVPSLAwvVcgAEMTS
gQwAseAsDgMwhbN7NmLF+m3Ys2cPjC9YY7CnAfsP6qOqsghfffZ7WDs/wVVDLazbYQjH69a47xeB
BB8HfPrlGiSXNirWAzhevoDnYXE4dmA38ps7Ya11ADEFbYj1u4szppdhZWqEVQdOo6U2F//5+9/A
wvo6ln/2J+w0NMHVM3rYZ3odRSnh2LB6K6ysrNjf7/E8vhClKYkorGxTbGVpQgaAIJYOZACIBWdx
GIBxnNHVwp3nEcjMzER+SQUmxHUwPH4c5cU5OHjytJCqpTgexwwMcOWqNfwj8tDfkI3Dp28I85Tc
On8Sz1Kb0VUcgQNGJ3BC0xDxhe3IjPHCIUM9HDq4D7/5bjeys+Kha3JeWMbl/EF4JDATIWvA8TMW
sD97BJ8s2wQDti2NzathdttLSLfUIQNAEEsHMgDEgrNYLgEc1dJBUq1EMc4QV2LfQQOUFGZhn6ER
xtik/IwUpGQVIdLTBr//aCdKi1KwdYMe2vteFlxbk8NwCsoXhh9e1cf/8b//d6QXV0Fn5Zdwi8lH
Vow7/uOrLUhNjYK28UkhneOpA3gaUw105kL3yBW8eGCD7VpHUF5eDpvTx/AiuhDSvl5IpKNC+qUK
GQCCWDqQASAWnMVyBuD+jZvIb5xV2CWtuH7nLhrrq3D9rhOm2KSiBF/s3LEFu3fthXt4NibGB2G4
dTNuuCXIl2H4PXJGWKb8noBpaQO0tu9GcfsoskLvY8u2HTA8ZADds7aorCzAzXsPhXRBjxwQm98K
9NXA5qYrpqaGccfCGDt2sPSmtugZGUe06wOEJpYL6ZcqZAAIYulABoBYcBaHASDeBWQACGLpQAaA
WHDIAKgPZAAIYulABoBYcMgAqA9DQ8No71C+JIkgiMWM/I2Ar29zfy5kAIgZyACoD2NjMlRW1aCl
tR2tbR0kEmkRq7KqlrW9s26MnifIABAzkAFQL2QyGYZHRoTvApBIpMWqEYyO8Wef5h8yAMQMZAAI
giDUBzIAxAxkAAiCINQHMgDEDGQACIIg1AcyAMQMZAAIgiDUBzIAxAxkAAiCINQHMgDEDGQACIIg
1AcyAMQMZAAIgiDUBzIAxAxkAAiCINQHMgDEDGQACIIg1AcyAMQMZAAIgiDUBzIAxAxkAAiCINQH
MgDEDGQACIIg1AcyAMQMZAAIgiDUBzIAxAxkANSHiYkJ1NU3orGpBU3NrSQSaRGrprYeQ8PDito7
f5ABIGYgA6A+DA0No7mlFVNT0yQSaZGrs7MHYvHr29yfCxkAYgYyAOoDr5xt7R2KMYIgFjM9PWLW
5vYpxuYPMgDEDIvDAEzA5+lTlLdLFOM/k/Fe2JieR3GrVBiVtJbjoaMHxoQxggwAQSwdyAAQC87i
MACjOLxnLyJLOhXjb0awqxM8o4sUY4zRVvz1//07rDWwFUZFhRHYtEwLdA5CDhkAglg6kAEgFpzF
YQDGcMbAEHHl3YpxVvibynH60EEcOHAA5yzvY2hMhljvh9A5oIP9eidRVlOOnV/8O379uQYa+sfl
C/XV4OSRE9DV24fH0aWYbsvGvs3HMCKT4qHNBWFdegYmaOyWoiDhBY4eP4ZdW7fB9rEHrEwNsGWP
LjpGptHXWooTRwxYen2EpNewFQ/A2eo2Oub/fpx3ChkAglg6kAEgFpzFagDaqrNhaXEJdnZ2+OTT
j/EiNgkHln2O89Z34e3rh9LmDjiZHcbZG14YnZgWlpnurYSh0QXU1xZhv5YB8jMTYaBhgsGRXjy6
YyWsa+/mL3HUKRBBD85hxYELKMwKw+//4zcITcvEtRNauPUiHBd2b4KGgSnsLM/gt3/4BAVtg+hs
7YBsStjMkoUMAEEsHcgAEAvOojEAhoeR3SZTjAOZwR7QPXgEV69a4OvPPsOjhAq0lqXimqUNjuge
QXhqNbzvWsMlvFixBDcAVTigfRS8o5764i42rN2EQ3oW6GiuxAnDg2xdV6GrsQ4HbTwR4HYNzuGF
LGU3jukdAbcQUY9vwcbhHjRXfI3jFyxw1fIqdPbqIL/pTfZh8UMGgCCWDmQAiAVncRiAcRzZtg5H
Ltrj4cOH8AyIgPNFI2zVPoXAYH/85U9/gv2zMDjZ28Hf3wc667/FZacQRNy3wOrtx9HeLzcO0+Jy
7Nx+AK3CFQEZ9L//D/z7p3qozovGiq+/R0BAAAx3fY+dFx7C+74ZrDwT2aabsH/bHvDbBr3tL8Dq
YQhcrhnj8CUH+Hneg57hBXQPDyM5MhEDL/3JkoQMAEEsHcgAEAvO4jAAQErwc5hfvgQzMzNY33HF
wGAfHt2ygoXNdXi88EVNZz/K0sPY/Iu4/fAFC++AtK0MVldtUd8zIl/JaC+ioxIgZfvDEdXmw8Mr
gg1NIz7QVVjWzfMZkgtrUFuWhbzqNmBqEHFRscyCALUFmciuaGdDY3h4yxpml6xQ1sbzP4gAd1+I
R9ngEoYMAEEsHcgAEAvOYjEAxMLDK2d7x0970oIgiPeDSNRLBoBYWMgAqA+8ctY3NLEKPUYikRa5
Wlrb6U2AxMJCBkB9mJyaQnNLmyDeuJBIpMUr/s2O0bH5f40ZGQBiBjIABEEQ6gMZAGIGMgAEQRDq
AxkAYgYyAARBEOoDGQBiBjIABEEQ6gMZAGIGMgAEQRDqAxkAYgYyAARBEOoDGQBiBjIABEEQ6gMZ
AGIGMgAEQRDqAxkAYgYyAARBEOoDGQBiBjIABEEQ6gMZAGIGMgAEQRDqAxkAYgYyAARBEOoDGQBi
BjIABEEQ6gMZAGIGMgDqxeCgFH39/PckkUiLWQMDEkxNTSlq7vxBBoCYgQyA+sC/MV5ZVYOurh50
dYtIJNKiVQ+qa+rR19evqL3zBxkAYgYyAOoDr5wdnV2KMYIgFjO9vbzN7VOMzR9kAIgZFpMBmJRN
Cn+nxoYxVFuNgbJSDDa0CNM44309GO2TKMZ+jCnI+vswNTmtGH8TpiHrFbP/FUxNQCbuY/ulGP8A
4JWzrb1DMUYQxGKmp0dMBoBYWBaDAZga7kf7Cw8U2zhC0tKNgSRfJKxch9zDRsjW1UKB+Q3IRqcx
kBOLjswSxVI/wrQExRdN0Nc2opjwJowhZ+t3KLoXLoxN99ciV/ckhoaF0Q8CMgAEsXQgA0AsOIvB
AEyP9qL46D6Ef7YKXaVt6I3yRKlzsGKmDJVn9VHuGYPJIQlk0lE+EX1ZKehOz8MU66FPDvVjuLUJ
otRkDLaK2XwZCs8eQX/XOCYHutEdHwdxXoWwuuGmekyy/eWMsGVkUpl8BEMoMtJC3Ob9zDhImB9o
QvbewxgeY+uX9KCHrUOUUyqknJT2YaSjFeL0dIxKZBhrq0ZPTtHM2YPhmmJ0JqRgXLHqwbIKyIYV
G32PkAEgiKUDGQBiwVkclwAmMVCSj57MTIwOyiAOe4qS276KeSxw5YejwPoxOoNdUB0Qi3ZXB2Qd
NkGRyTE0xudhIOkFYpatZEH/NFI19kJcWocyq/Pob+pA3c0rKL5ohryDuqgLS0b9zYtoiGNmYLwb
OUbGkPZyQ8HpQ+kVWzT7uCHP7AamZCLk6Z7EiFSCOgdzFAnrOICakFQMpHghbt0WFJw4ipRdmiix
uITUrRvRlFqOgeRQ5BqfQJHZeRRctMfIwChanj7DYM/7P5VABoAglg5kAIgFZzHeBNgT+Bgld/wU
Y6zA5oYIBqAr5DEzAHHo8n2I7EMmqH/mj/76LojCHqLw9nMhbaenDYqv30G5nQUG2gfQFezODMAF
5GptQ+alBxipSkPxTXcMpAej+MZTYRk5/Sg0McXw0CQaHa6g6pE7io6bYWR0jG3XA8WXLiDvwA5k
mt2DKMYThY7y7eXp7EO/BJCm+aPsjitKjhxAmrYxyswvI/H779CcWSukWwyQASCIpQMZAGLBWYwG
oDvABcWO8jMA08P9KD2qhdqIPPSEPkD501CMtLVgoLwSTbcvId3AGl3RHii88VhI3+hwAZUuHii/
YYXOhBhk7DmA3tIyNDleRNoxO5ZiAlU2V5Bz7Cx6KmffEd+PgmOnMCCaxrSkFVk7VyFh+3FIqguQ
oaEFcWkpWpzNkXHmNrqj3FH2OIgtM43ikycwOMKWjnmBcicPlJ0zROk9X0jKilB26Qp66/glicUB
GQCCWDqQASAWnMVoAAaS/JC4ah2y9fWQpbUfZbfdwZ8P6A56gNqQRHT5uSBLTx+5hgaoC05FX7I3
EtavR85BXWQZX8KIeACV16+ir7YR5aaGyDlkjFy9fci5fE9Yv8jnJhL3nnp5x7/AAEoummOgQ37j
YG/YfcRv1MWoRMzWcYit4whyD+5Hvs1TiBN9UekZwVJNoeyiGaTDPM9s2pMojNRmsXxoIUv/IAot
72F8ZByNzg8g6VRdud4lZAAIYulABoBYcBajAZieHMdYdyeGW1owKnpZAaZko5gclz8qONbRguFO
ee+6J8AJxfeeY6StFcoXZ00MKwrz1BiGmlswMTLGlpdhemIczQ9sUBuYJp8/wzQmR0Ywze8qVDCz
jmnZy3WwijI1LsOkbFyYJSzDFpmeYNNG5Xf9TQ0PYKilXRjmyMRiTE7M/xu9fipkAAhi6UAGgFhw
FqMB+Kn0xj5DtU+0YuzH6QlxRab+GYwOvf+A/K4ZGhqmFwERxBKBvwhILH59m/tzIQNAzPAhGAB5
F/zVE/qvY2psTDGkfoyyfeevAm7v6EIHiURa1KqqrmPt7oCi9s4fZACIGT4IA0C8MbyCSgal7Hch
kUiLWVIWkHm7Ot+QASBmIANAEAShPpABIGYgA0AQBKE+kAEgZiADQBAEoT6QASBmIANAEAShPpAB
IGYgA0AQBKE+kAEgZiADQBAEoT6QASBmIANAEAShPpABIGYgA0AQBKE+kAEgZiADQBAEoT6QASBm
IANAEAShPpABIGYgA0AQBKE+kAEgZiADQBAEoT6QASBmIANAEAShPpABIGYgA6B+TE1NkUikRS7e
pi4EZACIGcgAqA8TExMoKSlBeXk5iURa5CooKIBUKlXU3vmDDAAxAxkA9WFkZATFxcVobW1Fc3Mz
iURapOJ1lJv1H2tzfy5kAIgZyACoD7wil5aWkgEgkRa5eB3ldbWvr09Re+cPMgDEDIvDAIzj3vUb
yGt8WdjLM8PhFhynGCPmAzIAJNLSEBkA4p2wOAzAGI7u10JUaZdinE0ZHkTfwMtlecGazfDwsGLo
JSOjY4ohzvQP0oywcbarApMTE5DJxhVj6gEZABJpcaipqQkdHR2C+LByvL29XRgmA0C8ExaLAThj
YIi48m7FOJAX44lbzyMxIqqD4d4d2Lh+NU7Zu2JgUIybl05AR0cHRudsIR4ex33bk9ipsR9rVi2H
w/ME9LbW4vABLezbo4Gj5rcxIpMh+PF17NHWgZaBMQrrRWjKioaTU4Bia+oBGQASaXGos7MTkZGR
yMzMRHd3txBgk5KSBHEjQAaAeCcsVgOQ4HUdF53d4HL+KEwd/CAdEMH5gTNuXzmHv368ClevXsWq
z3+Hy3c8cM54Fyw9UiGuS8T3+w4jyssF33yxES6e/ohKyURNVjj+8K8fwYwtc3Dnd1i28wjGJycw
NiZTbE09IANAIi0O8Z5+Xl4eLC0tUVRUJBgBKysroX7yeWQAiHfC4jAAozhjeBi5HZOKcSDV3xFX
HzzGVX19+Ka3C9O6u1pgf1wbq3YchKurKyzPmeDxi1BYXDqGzNZxQFKJtXsM0SEdQlpMOB463cSe
Xcfh+8QZn3++Co8eu+KOnQXOXHEU1qdukAEgkRaH+Gl+3vPnd/qbm5vj2rVrqKqqQldXF10CIN4d
i8MATODY9rXYqXcMFy5cgI2TGwLc7GF6xxMlMZ5YtXorLpw9jg1aR5CUGI19Ghtx08EBezX2IDG3
GmYm+xFdKQHERVjNDEB4RBCOGJ+Fva0lVqzUQE5eEc4c3IqL1g44fnAPHN1j0V2Zh6CgFMX21QMy
ACTS4hEP9DzgcxNQUVEhXBZQziMDQLwTFocBACqyk+Hu5opHjx7heWAUmpobWUFqEeaVZMax6Y9R
1y1/KUZbTb6QLqWkQRivKC2ASMp2QjaIrIJSTE6NIzHCT1imtEF+WUEmaYfr40fwi0kXxnsbK5GW
ViIMqwtkAEikxSd+yr+tre2VaWQAiHfCYjEAxMJDBoBEWhoiA0C8E8gAqA+8IpeVlc3cZEQikRan
eB3ldZUMALGgkAFQH2QyGXJzc4WGhfcuSCTS4hSvo9nZ2UK7O9+QASBmIAOgXvBKzisyiURa3OJt
J/8q4HxDBoCYgQwAQRCE+kAGgJiBDABBEIT6QAaAmIEMAEEQhPpABoCYgQwAQRCE+kAGgJiBDABB
EIT6QAaAmIEMAEEQhPpABoCYgQwAQRCE+kAGgJiBDABBEIT6QAaAmIEMAEEQhPpABoCYgQwAQRCE
+kAGgJiBDABBEIT6QAaAmIEMAEEQhPpABoCYgQwAQRCE+kAGgJiBDABBEIT6QAaAmIEMAEEQhPpA
BoCYgQwAQRCE+kAGgJjhfRsAvtzY2BiJRCKRfqJkMpmiJX1zyAAQM7xvA8DT8HWTSCQS6c3V19f3
s86wkgEgZlgMBkDV9kgkEon0evE2WSqVKlrSN4cMADEDGQASiURaeiIDQLw1ZABIJBJp6YkMAPHW
kAEgkUikpScyAMRbQwaARCKRlp7IABBvDRkAEolEWnoiA0C8NWQASCSSOokHuqUgHtxV5V8pMgDE
W7NYDQAv2KR3L94I8N9M1W9CIi1l8QDGn52vra1FTU3NolZ1dTUaGxt/NOiSASDemsVqAFpbW4UK
0NTURHqHamhoQFdX1xtV9vkQLx8k0nxJKh18bdnl83nZzsnJEQJsVVXVolVlZSXy8/NV7odSZACI
t2axGQBeyLhLz83NRXl5OekdqqKiAoWFhSgtLRUag9m/y0Kpvb2Dmb02tLa1k0hvrRZWlkRiscpg
pTQAJSUlrNyxtC0ti1a8A8TrIW935+6HUmQAiLdmMRoAvh1eSdvaWGBgFYH0bsSPd319vWAEeMMy
+3eZb/Fy0dnZxYxHFdu2vOEmkd5WdfWNqKquZcHsh+VXaQCKi4uF8t7c3LyoxdtAMgDEgrJYDQCv
pNwJq6oYpIURP978+ui7MgAdHZ1C8OcfNRli2yOR3lYSVrZq6xpY+f3hfSw/zwA0obmlFb198mA7
0N+H1hY2nZVbsViEFj5f5XJvLzIAxILzIRkAfgqwr1++nu7ODjZt4Srnj6qpSeiN9M3ar57uTmG6
yvQLqKbmFlZ5Rehoa0FTk+o0Sr0PA9Dc3Co0PKrSkEg/VbztmE8D0NrWAVFXK57cu4Hjx4/jmsN9
NHX2o7kqDx5ePqhv7mD1RvWybysyAMSC8yEYAH7zWke3CO31Zbh/5ybs7OwRlV7I1iOa96DLt9XG
ApdY1P3adfPg31hdiqf378Lezg529vYIT8yBiC3Dl1e1zMKoBe0tDYiMjEB+eS3aW3/8eJIBIC11
zasBYD3/vu5WmB7UwLL1+3HbyQmHd23Aln2mKMwMw/qdu1HR0iucHeDrlvT3CmcE2ju7IWHjfJq4
h5XxFtYZ6ONt2wAz4q1v3AaQASAWnA/BALSxCldfmoJtK5Zjj64RzpgY49tln+OGawgLuj3oYuaA
56NfYQj4ON/GIKs8ou4O4WmDjq4eSFmagb5ets4mdLJxYZ/FIjbcLSw/ODiAbtabLstKgptXBMR9
YnSwbSuXE04Nsvx0dPeiIMoTf/j1H3H4hAlOHj2EL79eDr8EZkrY+gb4ulgD1cO2zXvlol75Zz17
xT1C49DVI1bkV4x2bjbYMny6iOW5s70Vre1d6GX71cIaqP4BCdu+BF0d/BpoO9uvPgywfLe3t0Hc
zxqHkU5s2rgOD8JzWGPGz4r88PgpRQaAtNQ1nwaA1+PcSFesXL8dDeJRjI6MYKCjFs4PHyM52h+7
dPTRLJYiyuch9PUP4oLtA3SI+pGTGIIThvo4eNAQXmEZaKkthOMNK5w4eQrRmSXo6mxXub25IgNA
LDgfggHo7xPB4rgG9K7ch2xiEtNsvfV5scyxP4JocAiZcQE4b2qK227+zK33ISE6CB5uj2F6zhRh
CbnMrUuQnxYhpLG//wzdvf1ITwjDPafbuP/0OZJjwmB2/jwuXb2FupZOOJ7dhX//z8+RUNKAipzY
meXaukSCCejoFiMj2BX7D1vId5LhbKGPA5Yu6Kovgd1lM5y/cBGRSfnsuIoQ+MKFreMcHrgHoEfc
h6QoX1w4bwqHB8+Qm5aAZz7BLPj3IOj5M6QX1aGmIJEZEH90tDfhjp05zp67gvTSBrTUFOG5x2PY
2N9AYWU1nj24AfMrl/DNqnXwiCtALxkA0geu+TQAPazNC7xrCaPDtugbHpSf8WvtwPgUUJMeAM1D
RxEX7IMv//IVLlnbYv23n+LEtYcI9nLC0ROncfGELj5avQspiaH4y59/h2u33VBSWYv2tje7/EAG
gFhwlrwBaGmDqLMK+uu2ITSjGpLebubOAwWXHpmWi7z4AKz55jucu2KBDSuX4aZrIC4e3oz//HIr
rpw9hC/W70N6eiK2rViJk2bm2LFuOS7ffoabF7Twp283wt3TAxYXTuD4mUvYv3UltC5cxyPro/hk
2QYEBPli56o1M8sdv3ofoj7WS2cGID/qGZYvW4vbD1zw0MkBq1Z8Do+obAS52UPf0BimR3Xw9XYd
hAc8w+d/+JSZCyscP38ZSQkR+P6jv+CE2VUcP30Oz5+5YNPWvaisLcMf/8f/jcuPouDjeAY6J6/C
9rQeNu49jEsn9fH9On3ERbzAH//wG1y84Qy7c8exftNeWJufwb//6iO8SC4hA0D64DWfBqBT1IcU
vzvYtEsfopFJ9IrF6Be1IzouHhmxftA/aQIni3P49R+/gaGRIfZqbMURUys8e3QX+/bvh6H2bvzy
8/UIDPaCtpExuiTj6HyDe3GUIgNALDhL3wC0skrZDKOd6/EgLAeYGEGknxuOG+zDxzt1ccfCFL/8
7RfQ1dfDtg3fw+iMBUxPGcAphKWV1mOT5n5YXTLFb37xFxxgaXZuXov9R87jqpkxrr+IB8b64GBx
Gnv36WDb2mX4av85ZER548RVFyR738a//OtHM8tt0jqGpu4+dIt6URTrhY9//xccNDqMg/oH4eIT
yY7FAEI8nbF/nyZ09+7Ev/xlBaLTs2Bx1Ah6Ridxzd4FZRVlcLhwDHsOHMZFcweUlpfh7HF9XLS4
Ci2NjTh36SpMThzBUx9v7PxuK4o6RtlRlOHkgc04f+Uya5RMMY0x6K3fAr+MJjZvGPv37sKjiFwy
AKQPXvNpAPglNVFrFfZvXI49RywQl5CAW6YG+GbdAWSlhGKn7kGEej/Byu/XICI5DVeOGeDm3cfY
9d3nsLjvizD3G/iff1wGX39PbNunhdo2xRMEKralSmQAiAXnQ7gEIBL3IdTdBp98sxERiVmoqa2D
x3UT/HqVBl48csTy7zcgOTcftmeP4OY9L1w4uQ8OPskYacnHis0auH//Nlau+J4F4zzctTgFy5vu
sDY7iKtukWjJDsKff/8xIjOL4HBeD3/eZozEQFds3nUS0f6PsGzZSsVyJjh9xRldvWJ09vQiPdAF
27ROQzrNQjCrpHyf+jqrsOnTP8HCJRBJAQ/w73/6Ep6hMfDzDUJaEtvOv/0GFrefIyggCJmZCVj1
p//EKXt/xL24gf/3H34Bv7gMnN71Lf6wUhftXa3Y992XsHjoj8LkIKxdsREPXW5jl/5h9A8P4+ze
zThh6YqyjBD85vd/gltsId0DQPrgNZ8GgN8LxO/xaa4uwtljhti2fTsz6ieQXcbapfJ0WN+8jQ5x
P7weWmHL1m3QO3EZVc1dSAxidX/bNugfOoSjZrZITY3HjTt3Ud/azeqYqu2oFhkAYsH5EAwAf9St
V9wFHydbrFn9PdauWcV65fo4fN4GTawC37U8iu9Xr8GWvYYoqKiH841LeBaVjYGWEhidOI38uja4
O57HCubkN2hoI72oFu7OlnjonwCpqAVWpw9gzbp10NyzCwaX76ChMhfrly3HA+8EeD24olhOCzEZ
/AafDuEu4IKEQJy9dB3N3T1oFfLZgu6ebgQ8smY9htXYrbkb23RPID4lCYf2bsXGjRthYGKJsvJS
nDfai3UbNkBT2xhZFa1oyI/Crt37USsaxlNbExiZOULKKmVegh82rVuJFcyE3HKPRXVeFM5ZWKO9
dwgVWVHYvvpbbGQN04ad2ojIrkDP37j5iAwAaalrfg2A4qmf9k6h/eNvKOV/+Q23wqVHFhR5Gt4B
6e+Xq621BV3dYkV6Frz7xGhra1ek/WlPAJEBIBacD8EAcHETIGYVtLOjXajcYlb5xPzZ+xY2LO5l
lbAV3SKxUHnb2juEisqX6WQBm99NL1Kk6eoRoZsFSl5peRqhootEbJgtL8xj6dvaWEPSqWI5fle/
vJLzRwE7WF5eyWNTM1uHWLhDv6OrG2JmCPhd/iL2l+eZP6/f2cnGRcw0KLbXKdzdz/PA0vAbDDu7
0NPFttMof5qhh+WD749YzJZh+eno4HngTzV0C08Z8PXzJw/e5NTj+zAAMy8CGpKSSG8t/qjdfBqA
9ykyAMSC86EYAKX4MoIUw3OnK4dnT1eVpnnWdD6snKecLwwr5s+ePluqpimnz17m5bgizZz5yjQv
5ynSKaarTDdr3uxpPyae7l0aAP4q4LLyKrZd3qNiDTKJ9Jbiwb+quk4wA6rKHBkAMgDELD40A0D6
+XqXBkApfhZAONvCz8qQSG8rVpb4GT9VwUppAHhg5R8D4iZgMYs+BkQsOIvZAPBKoOzBkhZe/HjX
1dW9UwPAyweJNJ96XaDi87gB4J8DVn5yd7GK18G8vDyV+6EUGQDirVmsBoAXft4brampIb0j8eNd
Vlb2Tj8HTCK9K/G2hbdj/IuXvKxzs7tYxfPH7yf6saBLBoB4axabAVCqurpacMGq3DFp4cQNAL8c
wH83Vb8LibTUxQPdUtDfOgtHBoB4axarAZhdEUjvVu/q9D+JRPr5IgNAvDWL1QCQSCQS6fUiA0C8
NWQASCQSaemJDADx1pABIJFIpKUnMgDEW0MGgEQikZaeyAAQbw0ZABKJRFp6IgNAvDVkAEgkEmnp
iQwA8daQASCRSKSlJzIAxFtDBoD0vsQbFP71Nl62SCTSq1LWkbn1RimehgwA8VaQASC9D/HGhH9m
ubyiCrW19cJX3Egk0kvxL2XyL2byNlRVHSIDQLw1ZABI70O8XAhfAWzrUJQEgiBm090tQmNTMwvy
ZACIBWJxGwAJBlnhGxyWf5hmUMYK6fQUhtgyQ1NTGBwZxgDL1w+XW0Cx7UlYIZeOjb77bX9A4uWi
vb2DqVNREgiCmE1PjxhNzS1kAIiFY9EaAF7YWJ5a4+PQUlAJ6cgI6tydkHFAD1mHDiHz2Dm0VbLK
wU3ATPpZBfTHxl+ZPmv+zLRZw3PGB8dk6MyMQfmzEEhkspfLk36SyAAQxI9DBoBYcBarARgcG0N3
TjwSv/8W8domEHeLUHj6MAqdXqCzoAC1D22RcuQs+kZYgZ6cgIQVXqlsHINDUgyOjjGNMMmEswSS
kVGhxz44MgYpK8w8rYRVKskQ78mPse1J2LwRSAalkE5MYHB4WP6Xpxlmy47LWHo2j1WSYZbn1mAX
pJ60Bt8zvh5V+Sf9uMgAEMSPQwaAWHAWqwGQDI2it74YBZfPoMD+AQviwygyM0VjSScm2XLSjkKk
6Bmiu7UdZdYXkXnwILLPWKC7Q4SOpBBkHzZE+oGDqM+qgLg8C7knjJGudQDVYTGodHJAc1kHujNC
kGd5lwX7MZTamKOlrB61LnZI2a2BbFMbtr9DqPe8jQwjI1R4h6Ip2APpOrpI3bkVWTZP0FOcjnIX
X0iY8VC1D6TXiwwAQfw4ZACIBWcx3wPQ39eLAQkr/JJ+1stnBuDsISRu24dck5NI3b0DJR5hGOjr
QPkde5TdvYPU7etQ9DQAxSd1kX7CHHX+fmgrr0SFpQkS9xmj1t8fLdn5qHKyRIl7KGrumSJi5W50
lGQj++QZ1Ho+QpqeCXoaGlBqdgwFju4ovmKEPGc/dKaFIFXzEDqq61Bpcwbppo6QDA9C1NiCAbaP
qvJPer3IABDEj0MGgFhwFvVNgKzASdjyEukQhiYGUWh6AoV3PdGanIC2/HLw4tqTF4+soydQdpv1
1DW3IdfRBwOielTeu4v8s2dQ4uzPjEQ7ah4/QOGl8yi0c0NnYTxyTI6jwMYOJbcdkXXsKMp9wlDr
bIP8O8GY4uvN8kfm2QsosjNHQ2kXOqOfIvO8s3D2oSvBCxnnb4BXvaEp1vtnx0Zl/kmvFRkAgvhx
yAAQC86iNgBKSQaZAZAg74QxalKrMcqWk46OQDo5hdaQR0jcsR8N4ZHI2L0J2dYPUevhggp3LxSf
M0L6cSvU+b1A6X03VNy8iAQNY/QzQ5G5+UukXn6Cvrp0hP3yP1Ff1Ine4lgkb9uKsgcP2br2oCow
EUUWx1CVXI3BtiKkbd+B0nsuyNi1FimnHdHbVofGuAwMsEKvMt+k14oMAEH8OGQAiAVnSRgAfpPe
0ABaEuLQWdsm3OgnTGfGYFDajwafxyi0uYFqLx+0FlRBVJGDEmsLlDg+ZAVXgr6mcpQ5WLM0Dmiv
bsGQTIa2xAi0FNWy/e5kBsEfoq4BZjLGhTv8C65cQnVQgnDTX2tSNDpqWzHEhruy41FkdQ1Vz73R
nF0CUXke6kISMDAyOie/pL8lMgAE8eOQASAWnKVhAJj6B4SAPDjEKgMblk/vl58dmIJwdz5/N4B0
dFi4c5+Pcwl38kuHX46PDAn7Mjg+IaQdGODLT0EyKN8Gf9eAsK5JfmMfSyc8WTAoX2ZMMY9vZ2xE
/hTB+BhdAvgZUhqAjo4udkQJgpiLSNRLBoBYWJaMASB9UFIagMbGZoyOjWGMRCLNiNeJ1lZWP+hN
gMRCQgaA9D7EGxNenqpr6lDDvwVAIpFmxOtEVXUtC7yi1wZeMgDEW0MGgPS+xBsU3oDxHo6UlRMS
iaQQrxOsbvxY0CUDQLw1ZABIJBJp6YkMAPHWkAEgkUikpScyAMRbQwaARCKRlp7IABBvDRkAEolE
WnoiA0C8NWQASCQSaemJDADx1pABIJFIpKUnMgDEW0MGgEQikZaeyAAQbw0ZABKJRFp6IgNAvDVk
AEjvS7xB4S88GRyUsPJHIpFmi9eNHwu6ZACIt4YMAOl9iDcmYrEYlVU1qKmRv/qURCK9VEVlNbq7
uwWDrKoOkQEg3hoyAKT3IV4u2tra0dzciomJCRKJNEftHV30MSBiYSEDQHof4uWCfw2wvb1TURII
gpiNiD4HTCw0i9oAsG0OjoxicEg68839wdExxbf92faGWMXoV7HcXPFlB4cwNM0KP3PWgyPDP+0b
/jwfsgnFduXblkhZZXiTbc+nWD4krIJJZWM/Lf+LUGQACOLH6ekRkwEgFpZFawB40B2TQVRThZ52
EQaHpZCy4N1dnIEyh+sou/8YPR2sAozyYK5i+dliwX9A1IoaD1fUBAahJb+UrY8tpyqtCg2ODKE9
LRZlt26h9JYDyh89g1g8iMHXVMyFkmRoGOLqYjSl5gjDqtIsFZEBIIgfhwwAseAsVgMwODqC7qIM
ZOzbg/RzVhD1DaEjzhuJW3ah2NEJJZYXkLxDD211nUKPmBdd3jvnRmFAynr7k1PyadOTwvRGd0ek
6p9iwTMFbSWVzEyw+SzPQ2z70vEJYVg4q6A4wzA0IVP0siVsHSMoPHkQqYZnUfngPvKO6yPz4nX0
j04K25GfFZhiFYQH6RHFOMsLP0PBzzwox0eGhW3x6Tzd0OS4sA3pBDtObNrg2LiQbmhqQn4MFON8
/wZHxjDKhjuj3ZB8xAK82kvHl+6ZADIABPHjkAEgFpzFagAkIzKIKzKQqrkJacbm6OvtQY7hHtRl
1mOMLceDYYOfB5oK6jHY34oyOwvkXbFBZ6MI/S2VqPX3Rpm9DUpdfNHX04j0Dd8iWf8yWnMy0F5R
i66CVFQ8uo/Kpx5oiI5A5UMnFF2/j/bCHBRbnEd1eLJgBgZYoR8eH0SRmSkaS0VCnmWyVqQcOICu
zgE0BXii4Px5lDp7om9wBH2NZSixsUCBhS3aa9oh6W1FxR075F0wR3NeCRpD/NHR0IO+2kLU+Edi
UCZj++GJjvpOdGZGIu/MaZR7BLFty9CWHIly59uoCU+EqCIXhVevIs/kMLKu3oe4rhQ1vlEYYMaA
Gw9Vx3AxiwwAQfw4ZACIBWfRXgKQDKKvqx09jY0QtbRC3FCILNaDFw3KhIDX388KG1t+dHoQ+Ue0
kXPVERU3zZFqcBEtSYGIWbYC5a4eyNi/G2W+ESg4vB+ZpndQ6WyBIrdg1D28hLg9hmhJjkWqxlrk
WN5BvrEW4ndqo9LFEUmaWuhsZYFqeAjDUyMovnAcmSZXUO3mhoLThsgyd0BfZxOKr11GqaMj0ndv
Q6l/FErPGDLDYoYKJ0fUp2Sh6roZW9chVD5wRnVwBMpsmFnwTkSjhyXCvtwCcUcTMvT1URvkh7Q9
e1H17Bmy9u9B+fMYlJobIvnwBTRFBSFDWxdlbp7IM9qHNFNHYdvNSdkYWKKXAsgAEMSPQwaAWHAW
9U2AbNlBVqD4qXBJTy0ydXXQ3sYDMiusU5MQN9WjIzsGqXuOoI+ta4op/6wRiu84Itf2NmRsvMb5
Koo8IlF77zrKA/LQEnoPxU9DUOdqi9KgTExgENknD6NbAnSEubDlngjL5R4/iaYSVvlGhhUG4BjS
DE+h9IYtylx4b1+GgbYaFFuYIffsGaRsXotcRy/0FCch7/RpFFjaoiEuFz2V2Sg4dxb55laoCU5B
R3owcq9cRclNa2Sdu4zi67YoeeiOmgfXke8QIOxDb2EoMs+cR5HtFTQUdUKU7o+M044sr6xRyAhE
+hlb4RKAcKmA/S4qj90iFxkAgvhxyAAQC86iNgAzkkA6KUO140Uk651Be1EZ2pPDkbxlJxoz85Cr
r4nSF5Foi/FFqs5x1AW6I9PMSjhDUGF7FoVuoai0vcQCfxKa/BxQ+DgQtQ8sUOgRg9GxLmQc1kV7
hwwt3o7I+f+3dx7uUVz5mt6/YP+Affbu3p1n986dZ8beO7N3nG0wNg7YBgNGIJEFiJyjCMaAQCST
Tc45imCSAOWcc2jFVueWuhUBg23m29+pluS23fJICMnq7u/leZ9WV1dXnao+dc53qqua9Qfkfc1I
CZkuAcDoCgA/tCB70TyUJ5bje1nmo3+4ri8wXNqD6BFTYC8pRdbMsUj56hsY46JgSM1G8caFiB45
FzWJCdDHpKDq9DZEDghEnRxIqSPeR/yS3bDnROP2S/8BnSzXHncBsYFSjrx85IfOQc7uU8gLX4zS
6GI06BIQHzABhqw8FCyfgtg54WhsaYRdVykhqcXD/ur7MgAQ8tswAJAexzsCgNj8UDrjRpQd2o6k
4AlInjoD5XfTZBT8DHUFCUifHiyd/3RUp1bAWZqMwpMX0SKVWh9xEuUP0uTxLCqi8mBJvI7ye8kw
3L2A8pgsqbB1KDr4Dez2R7DGS1C4dFfe14TifQdgqbRptyC2PGlG2fEj0Gfo0PLdQ608TS2P0Fhb
g4J1i5E0bRYyli2H7mY8jPcvIXnSBKTMWoianHLY0u4jddokJE+ZCd3tRDyS7S0//DVKrifiYYsJ
WStWwlLtlJDxCBXHtyNhdBAyVu9AQ6M8P38Q1ZllePzjEwkQe5E4IRgZS5ag6EIkavOTUHToEhqf
uL4S+dX+6uMyABDy2zAAkB7HawJAY4M22nVdtf9UuyVQPWq3C373VKbLczXtyWM0SVhQdxFor6nf
EXj0EE3aY4t29b32XH21oO4YaJDO6Im6kK7B9Zr2GwGt09p+glM9/06eqwOx7ZZDWba626BFleep
rF+CiHqvunVRBQ+tLFIGdfW+q6xi6/37zU/ldXX7YlOztj2u9TRrdwOo96ptUetS79XWKetzLUN9
9fHM9V7ZF13+PYM+pKoX6pcADQYTfpRtekYp/ZlWq52/BEh6Fu8JANSXVI2J+r8A1O+dq989L6eU
tquOiaJiHWw29X8BMACQHoIBgP5eqgZF1Q/1SCn9uW3HhqdjR8kAQLoNAwCllHqfDACk2zAAUEqp
98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk
2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCl
lHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kA
QLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAA
UEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqfDACk2zAAUEqp98kAQLoNAwCllHqf
DACk2zAAUEqp98kAQLoNAwCllHqfDACk2/SFAKCWTSmltPPW19f/0/bVEwwApJ3fOwA8e/ZMq3iU
Ukq75uPHj1tb0s6j3scAQDR+7wBACCGk92AAIO0wABBCiP/AAEDaYQAghBD/gQGAtMMAQAgh/gMD
AGmHAYAQQvwHBgDSDgMAIYT4DwwApB0GAEII8R8YAEg7DACEEOI/MACQdvpyAFA/EkT7lupzJj2L
p/1O/c+eggGAtNMXA4BaVmFhIQoKCrRH2jcsKipCdnY2TCZT6ydFXiSq0Wedp8r8/HyUlJS01owX
CwMAaacvBgD1PnUA1NTU0D6kwWBAaWkpqqqqWj8p8iJRjXBeXp62nz3tf+o/6vV6LQz2xBk3BgDS
Tl8NACoFezow6O+n6ph0Op3WOJEXj2qEVaPPAEDVMabOuDEAkB6FAYB2VgaAnoUBgLbJAEB6BV8I
AAaTCQaj8adp8rfRbofRZkNNX25MDa3ltNuk/D+V02CximbUyHapbTBYLF3fjrZlW+W96rk0KDVG
WZ69FgazSXtuMFta1293ra9G5vnlctxkAOhZnicAWKSuqMbZqurIP/n8Oq8BNql3Jrc62ZF60SLr
Nsq82qPB83zPrdQ1o8msbWObNq1Od39b9Xopu9UGixwPqk4rTXJM/LQe66/eY5BjyNJ2rKiymc2u
5/L3L+ftjgwApFfw6gAgB4lBDuCaqgo5YKTDs0gQsEqHZqpC6d1bKLkXjRqLPNc6PA/v765q/SbV
iUoZ2hoAWY/WoZokkHS0TvU+i03KVYPSe3dQHPlAOnt5bjVLp2xGVU4adCmZqKkshS4mBmUpKagq
r+p8x2A0u5YdeQtlabla+Qxmacyqy1By6yYqisphrLWhuihX5rmLYpmmrU8aN4/La5UBoGfpSgDQ
Sydd31CP/MxEXL16FUmZeXDWO+W17nZEBpgMeqRJnauoNmgdulpXbV2dTK+BVQKkTeqpqgNqfjVv
SnIiikrLkJebjfIqqdsdhADV4dpr62Bt7XA9zfNLjRLmK0oKEXn3Nq5du4br168jKj5F64g9zd8V
zVKO3Iw05BeXwyzHq1pXaUEO7t6+pe3T6MQ0OBoaJQipfaDqv5RFV4LsHPmM1CBD1BUVICen8OcD
kBcgAwDpFbw5AKjOsjo/ExmrViI5fCcqy2V6USoSxgchdsIkxI8fjbhpoXLQqo5aRr/S+Jgcda7R
thohS3gwSsU21dpleapTtmrTTA6H/O0aJdfI6MPkcLo6+dbG1Wiza/MYZYRQXZSD0tiU1hAgr0nj
qDrtylLpsKVRMdhk+U5ZnvmnQKDWU1OaiaRJYxEzPlgrZ8yEGSgvlXUZChEXMBiZp64gc+VcxC9Y
gZyjR1CWUyoBR8JGnaO1vGpZ0kC7b5OaprbLXI30ZTMQPWq0GIS8W8kw2SqQFBwkzwMRNWIiymSf
5G5YjKhhgUiaNR3pe09KeKqV97vK6EkGgJ6lKwHA6ajFyR1r8PqbAxA0ejQ+eKc/Nuy6AFtdrXRs
VtTX16NO6qT6rCwSNmul41bTrFKvzVL/1ChaX12t/W1Xf7d2yBa7A6Xpt/HHP/w3bDl/H03OOtjM
Bty7fQdVllpkxscgObsIDlmP6sybnTYcObAbSSmJmBw8ClH5JjxuadDOHhglHKv1VMuyrXJc1Tvs
iLsfiayiCi0E2NrK1BoILBLe1fNat0DtbGzApZ1f4t9ffhUBASMwdOhQLArbBXt9s5ShDrU2qxYG
nPI+p5TJIMeoGsXbJYQ7pL2yyejcKsdgvRyD7mcnDBKSnZYKDOv/Zwybv0HW0ywdnBO7lk3Fy6/0
k30aiE8Gvotpi9fLMSzHv7zXVudE7MX9CJqyAmanrK+pARc2r8DEKWGwS+dYJ8em+/aocvzqc5B9
5r59HanmZwAgPY5XBwAZ3VdnRCHqo7dx99NxqKioQcaySUjefALmlkewNEqD9dUSZF+KgqXZidJb
Ecg7cwnVNRbUVJWiPD0VJTeuovDmAxikwajMTkdZcgIKTp1BeX6p1snXlBeg4OQxFEXGSycvnW2d
HeUxd5B38iz0xloUHliDyE/GolwaNXV6vaYyB7Gff4yUrSdhlhFaecxt5B4/owUCFQ5UuU0OGzJW
TENi2EGYmltgaWlEbvgiJKz4GkVnduHeR6NReO0M7vf7EDmX76OqMA/VVa6OvejiaRR8e08aJSmL
3YiSby8j7+xlVFerUb+EDIMEFylz3okTMD4BdBe3IH7lZpRc2IPYWSthkgNUd/dblOfmIn3hHKRs
2ANdggQYZ4N0PL/dKDEA9CydDQBmmwMF8Rfx9jvv4kF2NZ48fYrihGsYHTwDJZZG1OhycOjgAUTc
T5AOyImczBREP7iLgwcPI6OwEoXZSUjJyNc6yaKcNETJSNcsYVotu6GxHvs2LseUkIkYF7IYtuan
clzcxRt/+zs2HT2PacPfw9AZ61BYlI+46EhcjohAamYu9CVZmBQ8EgdPXcbJE3L8GOU4KcpCQlqm
FgLS01KRnZWAYf1ew4Tle9DQ3ITE+9elTIeQLmVqkvVmp8VKuQ/ihhxrZu0rDQkAcgwd3rAModsv
te4l6cAaHchKT8adWzdk3lhYTVU4efggTl29A7t0zEV5mUiIi8bJo8eQVliG5AfXceJchIR5i+xb
1z60OxoQc3k/ps2YipGB4xFfYMR3D53YsGA61h+5LWv5EU5jKUZ88CY2nb6HBgkvWgC4sBcjg0Pb
A8C5jcswLngdmp8+ROSNizh46DBSsyQgyesVxZna9kREqs+hXvscIu98i4ibd2VwIMGl9fP0JAMA
6RW8+isA6ez0ZYUovnsLxffuo1oavoSJIdCVymhf6wzbRsh25G3/EtGB45AweRziZq1Decpd3Hvv
HSTOWYSozz5D3u1k5ITPwd2PA5A4dQKiJy2QTrsIqXOmI2npcsQHByP7/F2UXjuC6BGjkDB1IuLm
hiLjq7m4/caHKIzJhEn2UXVODB70/zvil+9A4em9iBkZiMSZU2Td01FeopdRvBz4VVLO8VOgK5FO
3WLUgoxBl4L4cdORumoB7r72HpIXS1n+83Wkhu9E0qKZKErMQdbq2YgNnoqYgKFIP3QBBQe2IX7q
LCTPn4XEJetQbVANnDq7IaO8hy3Q3TqPB4M+QX5UOgp2rMKDoQGyDinPiu3S4duQvmwm4qbNQlzg
F0gK2w+DHOQe93OrDAA9S2cDQJ3Us4vbV2H6/C1o/u6h9nmYZYTtqG9AZV48Rn7cH0GTQtDv1Tdx
8EIstoaOxR/+9jYmTRyFgYMCcWTPRowKno9H3z/FsikB+HLfVTQ4ZfRstMBSnoHgMRNRrDdgzrjP
cSWlAqUJZ/Gn//1vmLBgOQb3exnvBMzH/q+X4y9/+3/4Kmw9xk0IwvWoBEwY+hb6fxaEUYMHYPys
MFw5sRXjF62VA/oJFs4Mxtx1GzHolZcwaMoqXDm+F59/FoBF86dh2JhpiLp/B8MHDMCMefMRMHoc
7qYXoVYCszoDcF629T/f/hgLFy3A7NlzkFZQhvD5AXj5rQ+w45tvMG9iAIaMmoiP+7+JVV9fxOVD
q/GHl1/B+MDhePnV1zF5ajDeeu1lhJ+4hUZnnexDAxobbPhydjAuxBTixIZZWLb9tDRij7Fx0Qys
3nsFjfW1aGx5iJPbQjFu6XY0NtW3ngHYh8DJy9sDwPlNyzFj/nbcO7cXb0kZ582agqnLN6C4IAtT
RgzFtHmLMPSzT3Hsagy2rRiPv7zWH+F7jsIkAb6jr0qUDACkV/DuiwBlxNp6YZs6NW7U50sACEZp
kVEOMLOkbFGdbi9OQcywIOlwbaj9sQnJs4KRsXMHEuYuhElGyUUHwpAUfgjZW5Yi42Qkah+bpGOd
jsxd2xD5xrtIDl2B+NHDETtjNuInTkH+/VzYnzZJiEhFybXTSP5yJ0wtTdopfnODFekrlqM4KR3J
kyYgP7oQdfgHMpZMQtrhazDLiMygyjleyllQ4yqnjOhqiuIQN24eSqNvIWHaGpgfWWSemSjXVSFt
5XzknDiG2NEzoG/6ASZTJXQPriJ64EDETJqFlPkzEfm+hJCEAtdZBhUApDwVCfelLIuRunUvstYs
Q2LoVlmXESnTxyJ1zwUtJJgffgdTTTZiJNToCmtgVNcueNzXDAA9TWcDQG1DIyJ2r8akOevR8vQ7
GUm6LtqzOepwcsNiBEz8Slte3u1DGDVuMkKXzsC6Y2pUCywN/hibDhzHnMkhuPPgHiaMGo2MChss
RoOMnhsRf2Uv/uVf/oDhI0fhz//nv2N06F4pWB2mj5+EzBoHDq5Zgr1X03DzyGpM/Wq3LPEJZk4Z
hSt3ojBx3Be4m28HGsswcujH+GrtCsz6crPM8wOWSWe78ext6QQX4Wp8JhZ9PgCvDxiCqSHBePWv
f0bYjn1YND4AE2cuw+79J5FdXKF9L++UdufstpUYMHgMdu3eic2btyC/pAKr54/BTilHVew5fPhh
MJpkLXVF0fjiiwCsW7MUU9dKuR8ZJFTI8atvwa2DYZi4+Gs0SKdtlMBtLk3Ba3/6A977ZBjefe0l
/Pm90Wj+/gdsXjwTX+2LQFNDHVoef4cjmxZifOjO9gAQff4bjJ6yGnXSrtW3NCNi21pMm7MdaQ/O
Y9hnw7FizSZcjUzClb1r8T//9T8wedo0DP7gLQSELMGa5TOw8cRtPHvykF8BkL6BdwcAdw3aSD9z
1XTEL96CGouEAmM5UmaGIOdiBBLHBSEvMkM6z2IZBY9D9sG9SJSRvbHlBxTsWo3kTUeQtXUpsi7F
wGovQXzIDGQf2IOoYaNQkpiO/P1bkbF9H5JlNJ9x/JYspwy5J06i8MxBxM9eA4NTOnGDBA+HASmz
ZiA/MgGpM8YjQw54S6MFSZMCkXX+vvYVgslRi+zwhYibHwa9yQqjWY/0BZMkhBxBZeINxIxdIuUv
RVzAROiyi5AaOhu5Fy4gNmAsynQWmSdS1n0EcSOHIePwZZTdv4akuUugy6+A0WaFviQTmRu2osrc
CH3mbUQHTEbe8d1IWLIB5iePkbF0JlK3HUTevn0oLzGiKiECUaOCUVFpkdDUcefDANCzdDYAmKRu
l2feQb833sDJm2lwysg//tJ+DJ8wG6f3bsagwRNhe/QE1/d8KZ3VQqwJnYal28/gabMZ4z97F8ci
s3D98BZ8+uEgrNpyWBtlq+Onqd6GxZO/QOiOE0hJSsK9S4fw9ruDUFihw8QhI3A/rxJfLwhB2OFI
RBxahRlrduPZwzqETByByxIAxgV8hAtxpTDm3MWQIQHY8fUaDA0JxaMmG74Y9A7Cz9zEmhmTcVhG
w8vHDcKEheuRkngfcydNxvErkYiLjkFczC30f+llLN8mo/BGh+srgPVLMG/9MdlD/5BpTXgs05fN
GoUdlxNRHnsB/d8ahHxLI7JvHsXnw8djc3goFm46hIf2YowbNgLp1Q24uONLTJaRfH1jPRyyjDPb
lmHk1KVITUlBasIDDH7vLZyNycGu5bOxcs8ltLQ0oiwrFh+99Sr2X09CfZ0NZnsdCmIuyfreR6Ic
N831FswJfB8Lwk+jsjQXkfdiEHHya/z1pYHYFr4G/QZ8gnuJqdizbinWf30Ua5eHIPzYt2iSdsrT
5+ouAwDpFXwnAIhmKwwVBUidP106vVGIGTkCSSskDNjrobtxFNHDP0fU50ORtu0sqtIjkbRqLYwN
36Hw0Bak7TmD3L1hyLkaB4u1FIlz50GXU4pcCQUxo4IQM3o8CiJlxJFxD3GjA2Q5Q5C0/htU5SQg
auBHyL5wH0bp2E3OWuSGL0H0mEUoeXAdcUHDETV0qISNrVpnrzXu6syEoQwZofMQPWIkYgK+kNfX
o9ragMq4q0iYvU4CgA5JU+ejLK8Y6WsWozi9FEVHtyB62DA8GDoced9K43fvLGIDAxATGITUjfvl
Pep2QhMM5moZ8S+W7R2O6C8CkXP+gYSOGqQtnIEHn36KuNmrUG00I2/bV4geOkxCznDkRES7XVzo
WQaAnqWzAUDpcDhw9/xBvPfue/hs8Gf44P2PcORiLBrlc146dTj6DfwQb/UfjNjMCuxYFYy/vvEO
Pnq/P8bM/Ao1joewFkbjr3/8Cy4llMJht0iosEmouIdRI8Yit7pOu2juUXMtFgd/gZ3n72DjtFEY
Mn4lzu8LxxuvD0d42Aqs3nUcT5tknvkhuBWbitljP5B1vot33nkH6/dfg6k8A5+/+SYGffoxXn2r
Hw7cSsG5TQvwWr9xiHpwAwGDB2Lo558gaPoKpKcnIXjEJxgeMAKfDR2DW4n5sNsscNQ7cWZnGJZu
PIr6BgnZElQapDPesGI69lyKxpPmOmz/cirefOc9vPn2AJz6NgNXjq7H8h0n0WQtwayJk5BR5cC1
g5uwKOygFnYc1krMGReIk3cyZRvr8fDxY5zbtgTTVm7DqW1f4q+vvIlPP/tU9un72LDrrIz8Ha7v
6yXg18m+2rN+Jt55ux8GffAuBo8Jgc5Wj6iLBzDwgw8wYvhgTJq7FlU1eqydPxoffjYUAz8egpux
Ei42LMDOs3e08nv6TN1lACC9gk8FADlo1O1uplorKnOyUJFXoH01oK6QV1f763VFqMiVafJ3TU01
9BUV2nUC+qpK6CurXI/VrlNz+vJy7VS6GlFXZmdqt+GpK/3VHQA1lTpUZOdqtyCqe+qrS4tQVarm
Vw23shqV+dKQ29RFgWWoyMqRv9Wtga0Nu5RTXZBkkoagKi9bypQvZWq9U6BaylFR2VoGKZ/Mq8qp
16ttsKMqPwdVJWXa7wOo2w31pYWubbLXSsfRuh/UnQC1suzcLJlX3fKn1q1uMTSgIjPLdZugRXRf
ntonqlzq/R3IANCzdCUAqFvq1IVmhiqddJ7p0FW57gxQV7fXSseZmZEhDXENfnjcjBVzRiPs4CWU
lRTJKLZWu/gv5sp+jJ2yANX2BhhleWqdVeVl8vlKXTC5brFTYVJfVYESXbl0gJXIlXqmjqWC/HyU
yrTKKnVrag0qKspRXV0tVqGoIAdZeUWwS32yqDsAytRtc/narYSVVXoYjdXIzcmFWX0HXiUhOCMT
RqsddTK/obpc25YyKbfq/FU908pVWYkKOT7b9ovqjCtlnZVV1VoZ1R0JuVmZyJO67nDUoUpe0+aX
+SrkOFbrrpZju30ZUs6S4hLtva79qW59rEFxSQkqKyuQl5OtlaNQV6HdaqnuLGjb7+rYcso6iuTY
Speym6yu2xrVVzC64jzXNIsVVqtV2wb1ORRXyGdVZ9fKopW5bVm/IQMA6RV8KgC0KQe5ukVQ6T5d
+8GgtmlqHu3eXTm45VG7jU49b2tkWhvB9mW5fTfuGmWr79pbn6vX1ftbX9eWJ42C6++2ed1eb9O9
nO2dt0xrXVdbGbSGyn1dbWXT5vn1drpsK/dP86rGS5vWXlYP8/yGqvFkAOg5uhIA2lSdtfoBHpN7
/ZTPWU3TvkOXjmf7+sXYfyUKzTKCtkgoLc2MxKcDBuDYjUTt9fblyXrVf/TU/lxUy9du6ZM6qO6b
V2VTdwyoe+DVj/+o++PVPGq6ax4zLKpOtb7fJPVTTVPLNco8rrK56mtb2dV0FWjU+3+5Lcq2e+7d
p6l51fu056pManu1Y05CQ2vZ1GtqvaosaprJbRna9LZjTr0u5dLKKPOoMrj2X0fHhdoHrnnayyCa
1La3TdPCy0+fg3r+szL/ExkASK/gkwGA9ogMAD3L8wSAzqiW597Z6WUEXK1XFw5a/+lZH/r7yABA
egUGANpZGQB6lp4NAO7LVKP1n4+oad+SAYD0Cn01AKjK39Zw0b6h6jTKysoYAHoI1Qir4Kv2s6f9
T/1HFQIYAEiP01cDQFZWFkpKSrT/f572DdXoPycnB5WVla2fFHmRqEY4MzPT476n/mVxcbF2rDEA
kB6lLwYAhbp4RqVgT+mY/n6qq71VQ0BePOoYUhfMedrv1L9UbZ+6s6AnYAAg7fTVAEAIIeTFwwBA
2mEAIIQQ/4EBgLTDAEAIIf4DAwBphwGAEEL8BwYA0g4DACGE+A8MAKQdBgBCCPEfGABIOwwAhBDi
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
G1sAAAAASUVORK5CYII=</Preview>
  <Form>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
5eRUQK/RWDO5f5Jgqc4//6d3/g+msWo3rQUDAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load = {
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$comboboxO365countrycode.SelectedItem = "US"
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					Try
					{
						New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					}
					Catch
					{
						add-logs -text "WARN: $_"
						$InfoMessage = $_
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					add-logs -text 'LOG: Checking if user is being put in an specific OU'
					If ($comboboxOUTree.SelectedItem -ne $null)
					{
						
						add-logs -text 'LOG: Specific OU specified, moving user'
						$CanocicalName = $comboboxOUTree.SelectedItem
						add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
						$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
						add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
						$User | Move-ADObject -TargetPath $OUTOMove
						add-logs -text 'LOG: Done'
					}
					Else
					{
						add-logs -text 'LOG: No OU Specified, skipping'
					}
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking DirSync option'
		#If DirSync is enabled
		If ($checkboxRunDirSyncAfterUserC.CheckState -eq 'Checked')
		{
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text 'LOG: Running DirSync'
			add-logs -text 'CMD: Start-ADSyncSyncCycle'
			Start-ADSyncSyncCycle
			add-logs -text 'LOG: Done'
		}
		#If DirSync is not enabled
		Else
		{
			add-logs -text "LOG: User is not being AD-Synced"
			add-logs -text 'LOG: Checking all required parameters for data...'
			If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
			{
				add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'LOG: All required parameters are valid'
				
				#Check to see if the user is being enabled upon creation or disabled
				
				#User is going to be disabled
				add-logs -text 'LOG: Checking enabled status of user'
				If ($checkboxBlockCred.Checked -eq $true)
				{
					#If user is going to be disabled
					add-logs -text 'LOG: User is Disabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
				Else
				{
					#User is going to be enabled upon creation
					add-logs -text 'LOG: User is Enabled'
					add-logs -text 'LOG: Creating user'
					If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
					{
						add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
						$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
						$InfoTitle = "Warning"
						Show-MessageBox_psf
					}
					Else
					{
						If ($comboboxO365Licenses.SelectedItem -ne $null)
						{
							$Lookup = @()
							Add-Logs -text "LOG: Getting License selected for user"
							$License = $comboboxO365Licenses.SelectedItem
							Add-Logs -text "LOG: Getting AccountSKU Domain"
							$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
							Add-Logs -text "LOG: Looking up SKU for license"
							$Lookup += $Sku.Keys | Where-Object { $Sku["$_"] -eq "$license" }
							If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
							{
								Add-Logs -text "LOG: No SKU found during lookup"
								$BackSKU = "$LicenseDomain$License"
								Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
								$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
								If ($CheckSku -ne $Null)
								{
									Add-Logs -text "LOG: Assigning $BackSKU to User"
									$licenseforuser = $CheckSku
								}
								Else
								{
									Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
									$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
									Add-Logs -text "WARN: Assigning $ReLic to user instead"
									$licenseforuser = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
								}
								
							}
							Else
							{
								Add-Logs -text "LOG: Found the SKU for the license"
								Foreach ($Item in $Lookup)
								{
									Add-Logs -text "LOG: Checking License $Item"
									$BackSKU = "$LicenseDomain$Item"
									Add-Logs -text "LOG: Looking up $BackSKU in tenant"
									Add-Logs -text "LOG: Verifying $BackSKU in tenant"
									$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
									If ($CheckSku -ne $Null)
									{
										Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
										$licenseforuser = $CheckSku
									}
									Else
									{
										Add-Logs -text "WARN: $BackSKU was not found in tenant"
									}
								}
							}
						}
						Try
						{
							add-logs -text 'LOG: Creating User'
							$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $licenseforuser -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
							add-logs -text 'LOG: Done'
						}
						Catch
						{
							add-logs -text "WARN: $_"
							$InfoMessage = $_
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
						#Find if user should be added to any Security groups
						add-logs -text 'LOG: Getting checked Security groups'
						$groups = $checkedlistboxO365SecurityGroups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Security Groups found'
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
								$UserGUID = (($User).ObjectID).GUID
								add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
								Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
							}
						}
						Else
						{
							add-logs -text 'LOG: No Security Groups checked'
						}
						Add-Logs -text 'LOG: Done with Security Groups'
						
						#Check user licenses, if licensed create and wait for mailbox
						Add-Logs -text 'LOG: Checking if license was applied to the user'
						If ($comboboxO365Licenses.SelectedItem -ne $Null)
						{
							Add-Logs -text 'LOG: License is applied to the new user'
							Do
							{
								Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 20 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: 10 seconds remaining'
								Start-Sleep -Seconds 10
								Add-Logs -text 'LOG: Done'
								
								Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
							}
							Until ((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null)
							
							add-logs -text 'LOG: Checking E-Mail address field for entered data'
							If ($textboxO365EmailAddress.Text -like "*@*")
							{
								add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
								If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
								{
									add-logs -text 'LOG: Email is different from UPN, proceeding.'
									
									Try
									{
										$PrimEmail = $textboxO365EmailAddress.Text
										add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
										$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										$DN = $Mailbox.DisplayName
										add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
										Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
										add-logs -text "LOG: Done"
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
								Else
								{
									add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
								}
								
							}
							Else
							{
								add-logs -text "LOG: No E-Mail entered"
							}
							
							#Add any email aliases
							add-logs -text 'LOG: Checking Alias Addresses field for entered data'
							If ($textboxo365proxyaddresses.Text -ne $null)
							{
								add-logs -text 'LOG: Found Alias Addresses to add'
								$Proxys = $textboxo365proxyaddresses.Lines
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								foreach ($Proxy in $Proxys)
								{
									add-logs -text "LOG: Adding $Proxy for $DN"
									Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
									add-logs -text 'LOG: Done'
								}
							}
							Else
							{
								add-logs -text 'LOG: No Alias Addresses found'
							}
							add-logs -text 'LOG: Done with Alias Addresses'
							
							#Find if user should be added to any mail groups
							add-logs -text 'LOG: Getting checked mail groups'
							$groups = $checkedlistboxDISTROo365groups.CheckedItems
							If ($groups -ne $null)
							{
								add-logs -text 'LOG: Mail Groups found'
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								foreach ($group in $groups)
								{
									add-logs -text "LOG: Adding $DN to $Group"
									add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
									Try
									{
										Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
									}
									Catch
									{
										add-logs -text "WARN: $_"
										Add-Type -AssemblyName System.Windows.Forms
										[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
									}
								}
							}
							Else
							{
								add-logs -text 'LOG: No Mail Groups checked'
							}
							Add-Logs -text 'LOG: Done with Mail Groups'
							
							#Shared Mailboxes
							Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
							$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
							#If there are shared mailboxes to add the user to (full access rights)
							If ($SharedMailboxes -ne $null)
							{
								$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
								$DN = ($User).DisplayName
								If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										$Automap = $comboboxsharedmailboxautomap.Text
										Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
										Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:$Automap"
										Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$Automap
									}
								}
								ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
										Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
										Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
										Add-Logs -text "LOG: Done"
									}
									
								}
								Else
								{
									foreach ($SharedMailbox in $SharedMailboxes)
									{
										#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
										Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
										Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
										Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
										Add-Logs -text 'LOG: Done'
									}
								}
							}
							Else
							{
								Add-Logs -text 'LOG: No Shared Mailboxes selected'
							}
							Add-Logs -text 'LOG: Done with Shared Mailboxes'
							
							Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
							#Hide from GAL
							If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
							{
								Add-Logs -text 'LOG: Hide from global address list is set to True'
								Add-Logs -text 'LOG: Hiding mailbox from global address list'
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								If ($null -ne $mailbox)
								{
									Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
								}
								Else
								{
									Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
									$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
									$InfoTitle = "Warning"
									Show-MessageBox_psf
								}
							}
							Else
							{
								Add-Logs -text 'LOG: Hide from global address list is set to False'
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No license is being added for the new user'
							Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
							Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
							Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
						}
						
						#If MFA is set to TRUE then enable MFA for the user
						Add-Logs -text 'LOG: Checking MFA status for the user'
						If ($comboboxMFA.Selecteditem -eq "True")
						{
							$UserMFA = ($User).UserPrincipalName
							Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
							Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
							$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
							Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
							$Auth.RelyingParty = "*"
							Add-Logs -text 'CMD: $MFA = @($Auth)'
							$MFA = @($Auth)
							Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
							Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
							Add-Logs -text 'LOG: Done'
						}
						Else
						{
							Add-Logs -text 'LOG: MFA is set to False'
						}
						Add-Logs -text 'LOG: Done'
					}
				}
			}
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}


$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}


$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		
		
		add-logs -text 'LOG: Connected to Office 365!'
		
		$Global:O365_Pre_Req++
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Organizational Unit Tree'
		add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
		$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
		If ($null -eq $OUTree)
		{
			$InfoMessage = 'Could not load Organizational Unit structure'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxOUTree.Enabled = $false
		}
		Else
		{
			add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
			Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
			add-logs -text 'LOG: Done'
			$comboboxOUTree.Enabled = $true
		}
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$textboxUPNDomain.Text ="Not Available"
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
			$comboboxDomains.Enabled = $false
		}
		Else
		{
			$comboboxDomains.Enabled = $true
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {

		$textboxSamAccount.Text = $textboxUserLogonName.Text
	
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
		
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
		
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunDirSyncAfterUserC.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$comboboxO365countrycode.SelectedItem = "US"
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	$textboxo365city.Text = ""
	$textboxo365state.Text = ""
	$textboxo365zip.Text = ""
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$Global:O365_Pre_Req--
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}



$saveLogAsToolStripMenuItem_Click={
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged={
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click={
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Brad Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>