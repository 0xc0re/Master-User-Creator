<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAIo2SURBVHhe7f11cBxZu+ULn39v3JgbNybiu/FN
3Jk5M+e8B95zXsbmbre7zcwsM1syM7MtMzPbsmzLYma2mJmZmcnr7p1VZZflrLZlS7aqav0ilrQz
a1dSZe1n7f1kZv0DIYQQQgghhBBCCCGEEEIIIYQQQsggZfNvf/MbuxMnz9pduHTD7uz5yxRFURT1
Qbp89bbd1q3b7f7Lf/k/7bQxhgxWfv3rX3s+c/ZBUmE9kvLrkJhXQ1EURVEfpKSCOiQX1GLvgSPQ
hhkyWJE9/5SiBgTE5SIgNkf8pyiKoqgPVGw2QpKLEZGYTQMw2Ll89aZdekkjguLzEJxAURRFUR+n
0OQiYQByaAAGOxcuXbNLK24UH1o+QhIpiqLMW6FJBQhLKURY8gBIu9wBX49Wch0Dvh6xbLkO/WMY
llKMFwkcARj00ABQFEVpJAOZf0w2PEJT4RnW//IQ8gpPE+vJR2BczoCtRyfZGw+Kz1XWq/Z6f0gu
OzAu9w0TQANgJNAAUBRFaYK/DMp2HpFwDUiAS0D8ACgBjj4xcPKPV/6r1+kfOfnFCsXB0TcOzv5x
qnU+XuI4iWXbe0UjRJga3bGkATAS3tcAyNeDVeZTFEWZgqQB8I3KFAEtXhnWDpK95wFQYGw27Dyj
RFCOR2hygXL91UAoWPT87b1j4OAbq4wEBIppfcmRgTfmiV78G9KfZ6gsFCJig4MwM3LfdMeSBsBI
kAYgvaRJfGiaXJGaZPAPl7kebVmtDkVRlDFL5rP9orOU3n94cpEIoKLTMwAKis1RArNrYKJYp1hP
gmxXe0sEUvE/LKlIqaP815eYF5pUqNRTf38BQsS6NL3/eCVIv20SXs8LSZR5fHltwmtDookJYp6Q
bp5OwXrlUBHw5UiDfmwITy3hXQDGwLsMgPxQc0pq0NLeiabWDiTnVrzxQfeW/ODlF0l/njxZw4Uj
1J/XrxLrC0+RXwjNtGZ9r6c/VMpyxP68UNmnvktu4wceA7l/2u3QKUz0HFTr9payDwN47CnKRPSp
DECgMADPtQZArkcGejXJQO8WnKz04B3lUL6e5Dyv8HSljtp7pUJFO60zAGGifdeYBY2kIdAYBdlj
L4BbSArsRS/ePTRFaWukZG7f3jdGvJakHB9d/dfv10h2DGkAjJRfMgByyD8irQhd3T3QUd/cpjkB
etXVKB++4YkIjMt7HTDlFykuA74RqWL63UFUvq9vwVY41Phs+EWmK4FSKjg2E/7RGZpp1fe8W/IE
DonPhEdgJNwDoxEQm9vH7dJI59RDErLhHZYojmnfliHXGRybIbYjAh5BsfAMihbbE4NA4bzftT1y
3YFRSXDxi0RoPxgiijJlye/TYDEA4SklSg7f2c0PQSFRvRSJwOBI2Dl6KxcUGjIB72MAZKfEUazn
6XM3hIRFw+apCx44BMLGJRSPnrgo8547esLOM0LZpjffrxENgBHzLgMQnVGC7p6X2vAPNLZ0iNc0
Q0XydVlPCUTiRApPysH929dh4xyCF+llymsR6aVwcHiGWzbOCEstVXJDEeK1F2naXqx474u0UqWe
fE9AeDScA+MQkSHfL3u+8rWyVz16eWLJ+i+0vVq5TP+wSNg890KonC/qevsH4olzgFJ+/X5NsFRO
TDGte7/sHcttUbZHTGvmyWVG4fEzRzx39cUzJ084B8SJOvJ9mvXLfe69LBlwZR25L2Fie1+kFMDF
OxABCeLYJGeJwB2pGADlNe0+v7FfyrI163i1LeJ4BUWlwNHDHzaPbXHf1gkOHsHwjxPmTKxbf/2a
46XdJrE/yn6EvoDNMw+EinVp6lAUpab3NQAyuL4aildRqPiOq71Po4L3MgARoh14JAJxdnautuWV
yHb4dVscKtrK56LXHp5crLqM9zEAss3wFCbi7iNHtLe1Kct9JNqYew8dlHJPdxcuXb0v1hPVJwMg
2x8aACNAGoCM0mblRJBfAH3JXn5kWjE6OruVk0FS19gmgpj4gFOLEJcpAq4IYEp9xQBk4+mTJ7j7
2FEEKBn8yxASk4xHjx6Jk9kP4eKkDopJgYtPENyD4jQXiojA7B0UAWefcATF5cDB0R53bBzgE5kh
3l8CH+F4Hb2C4Se+NHI0wi8yBd7B0fAIEV9SGbxFkAsIF8HawQdhOgMQEISnLoGIyCyHX2gMnOT7
o7MRmSEC4os4MR0I78h0sXwxHZkK79BYpVctTUyYOMnDEjPw+Km9qJODqMwKZT/Cxf4GRqfBJywB
bv6iRy0CbUBkgrIsr4g0zb4miCDvHyp63BHKk7ACX8Tg7j3x5fEKF1/8bLEu4dbF+8KT8+AREAYn
71D4xeQq+xkQmQyf8AS4+gTDMyxZCeS6z0GagKicGnj5+sFJNBox2dWISC2EV3CEsm/eERnKF07K
T+yfs1eQOD5J4lhUiGMTCVt7cWykKdEuj6KotyXNuLwF0C0oSbQ10jBLc64i8d12DUqGowisTsIs
6MvRLx5+UdlKsFR9b1KxYgTsfWI16xHfc7V6kRkVeOwSgqSkFNTX1eGejSNsRRv3yM4Tz+w90NXV
CT9/0YaIbZBtoNoywkSb7iS2x1kaGlGWbbyUMnor2nDNKG6hsq+uYluu37VDdXWttqUH6usbcO7S
Hdy191XaSnktgG4ZmuVoJGOAcp2BWKbuWMr6kXwQ0ODnlwyAVEB8HooqG5QT4qUwnxmF1fCJyUFS
Tjl6el4qIwTKkL8MnomZsHN0h72bN+y9IhCdUwUXTx/Ri/YWPXJfYQBKlYDu6heKJ8/s4Roigm9A
IB7beynD7P4xWXByccb9J87KF9ErMATPXPzgGfgCto4ewmHm4andMzx65grP0CTFAMherpoBsHMP
g7+Yb2PnCjfR8/YVy5PTTxw94SkMxFMHV2EqcsX6XHDvsYOoozUkwqT4BYvtc/bHC/El1B0HOSLh
4eOLO/efwMU/RhiBKDzVW5a3+NIHRScp+2bv5AI7j1Bl+sHDR3DwjUZgVDweyyE1YSQcnMXr7oEi
2Afh0VNXBIpegLOzE+4/dRHGIBwPHz+D54tMsS3imGrXL/fLw9sHDn6xwpSUw8XDE0+cvIXhCIfN
U0ex/hz4hYThsZ0L3AMi8cTOCc6BSQiKjKUBoKj30PsYgIi0ctG2RcLbN0T0wGMQ9iL2DYWERuGZ
k69YjkwZypG53st4fwNgKwxAbGw8cnNycPG2g2jD8uEenoUrt+3QUFcDT+9AxXR8rAGQvfmE3Frc
tPXGo8f2aKivQ0NDvWiv7HHyymPEF9SJerI+DYDJYcgAKEP84sSIFb388pomxQDIgB+fVYbU/EqU
aedJc5BWUCXeI044YQCePBeBNSoFT+zdEBiTJoKjh+iViuDn4KUEa++QSDh6BML2qa1y0YkyfP/M
RQS8FNFjr4KPMAQy3xQj1mtra4unrgFKr1oJiuHJwmC4wEsEuygRkOV26gyAraMwGCJIykDpExgs
AqwMwAli2Y5wC0lUAri9/XPYiO1wD3ghTm47uASKL4ebB5yFm4/O0gR7aVL8gsPw1CVAvEfPAIjl
unv74pl7OOLya+Ho6IBH9p7Ksmyf2okgH4PgWDlUH4jnDuI1B0+lR/5MbK9/ggi+8Umwfe4J/6hE
cWw8EJ5RJXryVXD19BJf4ni4unsqvfvYvDq4eXjBUSxPNkK69esMgOx1RCRnw9bOWRiHUsTk1MAn
KBjP3UPg4OIOz8hsZYQgNCYBT4Qp8heNkvxPA0BRv6z3MQCRGZW4/8wbyYmJqKmuRGVF+Ruqq62C
nYM7PMLSldHEt5fRNwMQFhaB4uIiYehdlDz9Y9FWOrl4Ket2cfNRgvvHGoBI0bbYeUbi2q3HyMrK
RKLYt/i4eOTkZOHGHVs8dgtV6tAAmCCvDIDeF0F+uDGiZ19e24Qe2e3XQwb/+uZ2vNTOl3/l3QGK
AUgQBuCZE4JEYHL38sHd+zaKQw2LTcRjRx8Ex6Qo+aWQ1Aq4e3rimUcYorKqEJqQJXr2Dkog9gkM
FPPDESOMxpOnT+HoFw3/yBT4vEgWJ3QO7Jzc4Rudp6QglC+t+AKFxCbD5omjWG+ZCIhVcHH3wHPv
SESKoB6elAcH0SN38IqAk6uLCOAhCIhKg294kjh58+DoJoJ4aJr4wmt72zIFkJAOG1s7eIlgqqQA
5PB6ajHcffyV+11jsivh6OSEp25BCIjWLCs4PkNsrz28xLYFhkfARpgDmd6wFfulMQDJonfugYAY
sa3PnJVjEJNdAUcXN7iFJisGwDkwAVFi2W6e3nDyj33DAEgDojEAcYhMzVVSFH5xhYjNqYaHjx8c
vCPEslzhEpKKGOHmA18IU+Tkj4AIOQLgLQyAxjBRFKWu9zUA94QBCAsJET3zLGRmpL+hgrxs0Yt2
EJ2VjPc2AGrXEUTJFIBTMPz9AlBaUoQyodLiAqFCMV2oTDs4uinBPUIYALVlSAMgUxKKSZAjtLKN
Tpb/X5cjxX7Kq/2v3XyEwoJcpKakYP+Rszh8/DKShBEoKcrH9RsPRWcpQex7mXLNgpS8jkm3jAjR
NtIAGCkXLl+zy65oU3qrMtDJYfXojFJ06l35r09RRQOS8yqRU1qnTKcXViMqXXPhWURKtnCpziIQ
l+NFfAruP3qK4BQRhGPiRTDyESdhPp7Z2eO5W4AmuIsg5y8C1XPhZJ85usI7Iguh0XF48MgWXi/S
lBz6U3tXOHj4w9E7XAThQtg7e8A/Nl98QUqV7ZWSZXcvbzwSvX1pEGzsvUSALUdQZIySfrBzcoVb
cBJC41LE8pxh7xEglhmkDPm7iN62/LJGZ4rt1y1PBH257sfPHMR7PfBUbJtneCq8A4NFzzxWCboh
MUl4JpblIJZlL5YlnbCLmxueOHrD3tFJfHl9hbmphJMwCraiHBSdKI6NB15klotA7iuMgRueu3ji
qYufcq2Ci6uHkoeLy6tRAr1zYLwyKqHbpmixLE9fX2EM4pT1+waFChMg9sXNW/TwPRCcLBqbmETY
PnUQx1Ms/7kLfKJzERoVp4wARIj365ZFUdTbihRBKyguD+7ByWJa3QDIFKF8At7tB89x38bxLd17
5ID7T8X3Ubnb5+33awyA6HiIwKysx4ABkEHdSwTm2w/sVdcjde+xCwJjRWdIBnSVZYSJbXD2TxDB
O1HppRsyAN6irb1x9xkeCONy4uxNPHIOVEzBhes2eGBjj8vXHygdkkjRTqkZANk5UkYZxH/dsZTt
VVRyLg3AYEcagLzqDhEAyxEjJIfWE3I1vXypul6S88prW5AmAn9dU7uoW6F8cWKy5PtLlQvcokQw
ldOR6cXifwWixf/w5Hyl5xyZmq9cTPciVV5gKL50YjogUgTnxDwR2CoRK94XFp8u3GQe4nKr8SIx
S7yeIk400dvNFsZCmAi5jZr1SWnKcaI3HRaXLnr3qcKMiGmxrKi0QgRGJYsvnBwWrxTzqhAhTkp5
wZ18WpXsgUeI5b3efs3ypBmQ645KK1DeHxSbruxTpFiedLuybqxYVmRKnmZZCXnK8mMyikWgT1X2
VV6kFyO+BNHiPUExacrFlC/EfBnU5baGxqYhICb91bTcDvnFiRXlSHFs5IjE620SEmVlvnb9cl/C
EzKV/ZXOXL5P2Sbt/sneTFxulTBn8gtb8OayKIp6S7Hiuyiv4NcEZnUDIF+XF/gFxhcoHZGAuDfl
LwKyvEhQBkbV92sNgAzMHiEpYj3qBiAsUd5FVCLalkIEiGUGimXrS86Ty5J3AKi+X0psq0tgkjLS
INsDNQMgH/AmrzWS65EXE8vbi2W6VLYpIeI170gxLzZXtNdiO8UyDBkAl4BE0XEUbbH2WMbn1iBG
tO3aMEMGK9IAFNR2KcFXBk2dZHBUkxJolGCqqaP/HhmUEvKqEa+djhdlZb4IRHK+bl5Cfo3yP17M
jxeBNiG/9tXrUvL11/VrkChej8+revX+eGFQdHVfS65D1hXLFstV6sr1KsuueVVPs/7X69Nth+51
fb3aNrlM7bR+3beWpV2fssxX87T7K17TzVO2Ve6j/rbK9+jKvdaj09vrf3MZmnm9jqd4Tf/YUhSl
Lvk9knfceIRoRwBEgFPTm4G0l5ShdhH8e73nlcTrMgXgGpQIz1DRWRHreWsZepIBXm6T8l9f2vX8
opIKlQcJ6UYaXt1qrCaxHfLWQ7k9mnkysMvevJwv5+nmvy05iuAmjIaMDbpjmVhQh7j0AhqAwc4l
YQCKG14qgUQGT4qiKHNUUkGtCHYl8BaBOSlfBLBsYaz7W6JnHCWCqasImN7h6cp6ZYdAte7HSCwz
NrNCCf5ypCE+R3YeDKjXa3L08835sgOkK2vn600nyrRlULLS0dAdy5SSRsRnFNEADHakAShrAlIK
618pmaLMWnWUWapeBK9a0TNPg094Bnxe9L98X2TCIzgFIfEF8I3MgndYumq9/pBnSCoCZZoiOlcp
K/PlfvWnxDK9xPHyjchCSlHDqxiSUdaCxMxiGoDBjjQA5S2A/EVAnTKEe8soaRik0m0fRVFU/ypT
9IbSixtEr7YaSaJnOxBKFiYjq7xZWZ/a6/0m0ROX+5NZ2vTGvDekP09XVqtnSNrlynWki/1JFcdO
xpCsinYkZZfSAAx25DUAbxiAkibUNbSgvq4edX2QfGrUp1BDQ6PJqLGxaeDV1PxJ1NTcYjJqbmkd
cLW0tn0Stba1m4za2jsGXO0dneiQ6hxodSnq7BpYfYr1dHV3o6enB2W1bUgu1DMAWTQAgx41A9DQ
2ILG+no09EGNDQ2fRE2NjSaj5qamAVdLc/MnUWtLi8morbV1wCWfu/4p1NHebjLq7OgYcMlH7H4K
dXd3mYx6euSj4ntQXkcDYHSoGYB6YQBkUK/vgxpEcP4UahSB01TUJAL0QKtZBOdPoRYROE1FrSJA
D7TaRHD+FGoXgdNU1CEC9ECrU/TOP4W6ZM/ZRNTdLQzASxoAo2SgDIAMcL3n9Yf0g6eubKzqHawH
QmrBeiCkFkiNVWoBu7+lFqwHQmqB1FilFrD7W2rBeiCkFkiNVTQARsyHGoC6ujp0dL1+THB3Z7to
PNvR3dUhAnUjWtta3wre7yu5/KYWzU9T6mhu1FwDoAuesnGTw+idYhs628W6RFk23voBdrBLLWD3
t9SC9UCodxA1ZqkF7P5W70A9UFILpMYqtYDd31IL1gMhtUBqrKIBMGI+1AC0trYgwPUhDh4+hIMH
DuKpeygy0kJg7xmC0qwo7Nlijar2ThGk1YP8L6m5tQ1leUk4Y30Ehw4dwpEz11BQLtbZLINaMzpb
q3DuwGEkldQg1McO8id9pQmorq4WRsB4RgbUAnZ/Sy1YD4TUAqmxSi1g97fUgvVASC2QGqvUAnZ/
Sy1YD4TUAqmxigbAiPkgAyCCNLpasWHecCzbeQz3bt2AZ1A08guSlEfc5sW4Y8qopSjvfIn2tnZt
Hx5oF6ZBvl8t6OtLvA0RDlfx40/jcdfGBrcf2qGovFa5mlVDK9bPsUBQRjnSEoKQmFOJyrQAbDpg
DXk5SnOTcVwroBaw+1tqwXogpBZIjVVqAbu/pRasB0JqgdRYpRaw+1tqwXogpBZIjVU0AEbMhxqA
nrYG7LFagojC1wE+KcQPHj7xKEr2wZzJq1Er5lUWxOHQlg1Ys3M3EnLL0PEeqYGOHiD0+Q1s3nle
We7Lbs2tLMWpEdix2QpHTh3H/BkLEV1UjQh3d8Ql5+Di7oX41e/+jHP3HNDY2q5cAa8WdAeT1AJ2
f0stWA+E1AKpsUotYPe31IL1QEgtkBqr1AJ2f0stWA+E1AKpsYoGwIj5UAPwsqsVO5eNx5xVm3Dk
0EGEJOfD4+oRLLG6gMr8UFhMW4+6xnKsWTYb12w94fzwNGYs3ojK5i4RnH/5AkFpABK87+NPv/sj
5lhYYMO+S6irK8PSGWNw5r4dfJxu4du/DUd6YzOOLLTA+cdheOF4DkMnzEBkSo7mfm6VgDvYpBaw
+1tqwXogpBZIjVVqAbu/pRasB0JqgdRYpRaw+1tqwXogpBZIjVU0AEbMBxuAzhbsXDEZa/Za496d
W0jILoX37VNYu+0GKnJDsGjuDiTFeeGbv/8Vuw8fxZ5t6zBu5jJkVTUruXy1wK+TNADhDjexwmof
KmprUVnbjNQgOyxcvg2ayw5bsWPpCsSWV+PMmhW45hCPikQXWFhtYwqgl9SC9UBILZAaq9QCdn9L
LVgPhNQCqbFKLWD3t9SC9UBILZAaq2gAjJgPTgG0N2D7irnwTCxTQrLE6eIhrN50FRU5QZgzZQNy
c6IwYfQI+MRkICstCbEJSagVvXb5QB+1wK+TNAAhz65izcbjynK7xPlVnOCFcWMmI6ehG60FUfjp
b8ORWNuIkysW4/LzWBRHPcVYi5Vo7pIGQD3gDjapBez+llqwHgipBVJjlVrA7m+pBeuBkFogNVap
Bez+llqwHgipBVJjFQ2AEfOhBqC7rRHHd1jBPSobnW3N6Hr5Et73Loje/kNU5kdgzeKdaBb9cecb
1pg1bTYWL1mGS/dd0Sq+ZI3vuDOgvful6PE/ww/ffIN5Cxdi3vw1SC2pxJOL+zFm8mRs3bkec6Yv
R2Z9I67t2Io7zrFor8nFgrFDse3YZTS2dfIaAK3UgvVASC2QGqvUAnZ/Sy1YD4TUAqmxSi1g97fU
gvVASC2QGqtoAIyYDzIAWlVXV6G2rk4py8BdV1uLmppa5b3ylrz6xiZ0d3WitCAHmVn5aFBy8+pB
/23VobiwAJmZmcjKykFVXaPyjIHCvBwUV9WgpblRMSJ1tTViG+rR3NqOxuoK5BUUolEEPrWAO9ik
FrD7W2rBeiCkFkiNVWoBu7+lFqwHQmqB1FilFrD7W2rBeiCkFkiNVTQARszHGAAZaBsaNGUZtOW0
DDryQUAyKGgCuSgrjap8SE/vIP8LEgGy5VWDqXtvoyi3Kc+eb25p1jxPXyxb19uXP7Iin+XeO9AO
VvUO1gOh3oF6oKQWSI1VvYP1QEgtWA+E1AKpsUotYPe31IL1QEgtkBqraACMmI8xAPpSDeIDILVA
aqxSC9j9LbVgPRBSC6TGKrWA3d9SC9YDIbVAaqxSC9j9LbVgPRBSC6TGKhoAI4YG4PNJLWD3t9SC
9UBILZAaq9QCdn9LLcANhNSCnLFKLZD2t9QC3EBIBk1TkfwpYOEAaACMkbcMgFBNvbxPXz3Qf26p
mQLKsNSMB/XLUjNS1OeXmvE0VqkZT2NWW2sLSqqbkVKkiSE0AEaCmgGoqpWBVj0AUxT18ZI/pkVR
pqKG+joUVjTQABgbNAAURVHUx6hRxAsaACOEBoCSqlVu4awxS8kejNoxoSjq/UQDYKR8rAFQyztT
xiOZ85ZBsKqq6q1hPXOQND4VFRWq5zZFUe8nGgAj5WMMgAwgMnCUl5crjShlfKqsrERxcbFyy5i5
Ih9aJc2A2jlOUdS7RQNgpHzsCEBpaaliAmQj+jkke68ykMntkGW1OpRhyWNWVlam3JqmRrswBvIm
nzfpUX50SSJvNevs6tJO9Y329l7ve9n1armSlz3d2nvZO7Q/AjUwyONAA0BRHy4aACPlYw2A7P3r
yg2NTejRttQ9XZ3KSVFfrz70rJN8X0tbB7o62jXLUKnzS9INYUsTIMtynlyOfDSwvDf1F7dB2eZm
5V7W99lWKbnsxiZxwPRob2tR5reIdX7ofnyI5HraOjrR2d6qlKU6OrvQ3tr83tsgj5k0cL0NQHdD
CQ5sWY6x48djyuQJuOUYpMyvzY/BxAkT4RQQjl2WFli3Yw+uP7JDXyxARU4slkydhNEjR+HK02Bl
Xka4C8aOGoURw2cgILEQLYXRGPv9EEydOhXzV29FbadSTeHWycN4HpSmnerG6d1bEZZZrZ3uOzQA
FPVxogEwUvrDAMjGUwbStqYaPH98HUeOHIG9XxhaRTBq7FW/rq5e6TG2NDUogV/28lKiAuDqL+q3
tr1R930kg5hswKUBkGU5r6mlDaXZ8bj/yAF1ovzWQ43k9oogLh9gUVeaCzsHB5TWNGlNwC9LBv/q
khzcvngWR8V+nj59HfHphSKM9CAtNgguvqHCCLznfojtkMuTv5cgy6p1fkHy/tvEyFCExqRq78dt
RmSQL+LS8tDS3KT6nt6Sx0ymAd40AB3YsWQyFu68iCrxek5yAEZ8/Xd4xObi8bH1WLT5AqI872D4
mPkoKClHrViOhi4UFBTomYEeFOTno6WXOwhxvIFLdz3R3piK0cNmoKymArPH/QTnhGrkvfDADYcA
JHo+wPTZm5CcnIE2veAvObR2Ka44x2inurB+zhR4JmkMQGFBPmrqXhu0xtoyFJRVaia6O5URjZrK
GnTqDWvQAFDUx4kGwEjpnxGARvR0NOLQ+iWYutgKZ06fwqjh32HH2cfoEkG2W9vYylGBnq4WPL17
G2mljYjzc4ZrUBLKcxLgHRwp6mrqSXq6OpRGua3jdfToED3txubXgapN29PtbQBkz//BsbX4v/6f
f4V3QqHYNtlDbny1HS9fikY/PwnX7tihuakWbu7uqGnpFutsV9bZKTakTQTT1nZd5Hmp/IiRNC+t
nS+RHmSLP/3uCxw8bo2D+3ZgyJCfYB+chDJhOryDI9ClHQWRP17ULAyIjpamRtTVN7yxHRU58bh2
+xla5Tr11ie/UG0drwfEdcejVRwPOcogy7Le5T2WsDp8TynLYLhn6TRY3/eRb3lFq/LDSU1KDYky
YiCmddTVVAnz8Pq4thRFYNhPI6ANmwo+t49izrLNWDDuC/z+i1GYNWkI/unf/4Lr165i27HTaGko
x7pFYzF2/ASMm7sWWQVFOHPACkuWLcOc5WsQna2/NEkzHp7bgaUbrVFTloxR3/+AbTu3w2rLSbSK
4xNsewJ/+GoIpk2cgDV7Lorjo32b4PjmNbjlHq+d6sK2pfMRklaMawfWYs6CxcqowYuscqSGOWDu
ovlYtMQCZ5/6oTTZG1/95Q9Yuvowytt0R4MGgKI+VjQARkq/GIBGEUxayjF5+I84fMtNaVTrC5Nw
77G96Gl1wfXpZWzatBGPfaNQXxKPP/zT/8bsDQewYPRf8dthC/EiMhyh0UlIivDD1StnsWWDJR46
h6BHRMikICdssrTE7v0H4RGWjOriNBzavwUbNu5AcEy6MAGtbxiAhqZWsSmp2LBhG25dPo5VO08q
ga+zvQlONmewZs0aOItg7Xx1O/77P/47HnsFIzQ0GF5ujnDwiUBnZxe87R8gMC4L2Qm+2Lx5E45d
voNKsdxmYQJaO3qQ6PsIFiv3KvspCXlyGmMXbEF2ZjICIuIRG+IG68NHcOehB4qLkrBv10bsOn4a
OZUNIl414/mDk8p2uIelwO78Bvz3//Uf8EgoQHacF9ZaWeLAuZtoEN3eUE9bnDp6Esf2HxbHw1d5
VGlckCtsnXyEOZEpjh7cPLIFW0/aKGWxlzhiNR9XnoejqjAOe3ZuxpatexGbXozOtlrcvHgEm7Zs
hU98FlpqCnD9gjWO7juNiJR8dAmDoaMhy18YuHFo1E5LQsWxW7LlAlwenoP1g2DUpHhixbZLaCqJ
wbItu/Do/FFYWJ1U6vq42ePGqb34z998gW07tmPUN3/C/K2Xldde0VSEzasWYtaqbYiPDsCoL4bB
3tMPpzcvw6It59HdIcxdkzBPL5sx8+ef8Cw8X/tG4Mj6VbjtkaSdeontIsgHJKRjw5SRWL7lCB46
2aOgqgzzhvwVE+evwZa1S/CffxyJpzZXMX7WHLS/jv0KNAAU9XGiATBS+isF0NrehbykECybNx1T
JkzEomWWyCqvQ/jzK/j6+59w+OB+fPXlN7j9xAFzxgzHrgsPsXvFFEy3OoGn1/Zh3dHreHp2I/7l
yzG4duEkvvlhAoJCAzFt5M+4ePMO5oz8K9aduoPjK2dg+KTFOH3mIK7ZeSrPCNc3AKKDjgCbU5i5
cjcyE4MxbMhoZDb0IPDBcXw3dCxu3riOSdPm4dypAxg6bBJ8/Vwxe+Fi2NvcxETRc5WBZ+7kcXjs
4IIpw37Alj2HMGXEt1iy45Loa74UvfIeJPnZYNaiLWgQvfbm1k7UZIdh9qz1uHP9CCwPXcWtg4vw
p6ETEBwYiAWTR2Dxxl1YOXc0pq44ANcHZzBkxCSxHVcwacZ8nD2xF8NGTYOX2I5JPw3B2Su3sWTK
OOw+9xTH14/FdxPmw+35A4waPx0VLV3YtWQSjtz1EvFejhb04IYwANtP2ypl2Rs+vn4x7rkGYOOU
oZhksQ4nTu6HY0gcHllvwY9jZ+HQ7o3467dj4enhgD/9+r/h8Hkb5BSWi+MoDYWWrjrMGTsE5+yj
NNMv67Fk3He44ZkA95vHxPoDUJnohqWbz6GhOAartu/BzeP7sHrPHaV6ZlI0bhzfhu+Hz4aLmwfO
H9mJU7ecldckcUFeiM3WDNlvnDoFF2/ZYNni+ZBjJY1Jrpgycz3iI0KRUaIZpVg6cQLswvOUsuTS
5oVYc/i+ZqI1HyO/G4HY4hYU56TD19MJy+ZOwD7ry5g/fiQOXrKFm4sN1m7YA2fby7Cw3KR5nx40
ABT1caIBMFL6ZQSgoRHVZfmIiktWGtTmulq4XzmAcbNX48CGpfj7kPGwEj3b6WNH4dYzDxzauhEh
OfVwunwQZ21fIMblAjaduAWbC7uw75a7WEIHZi+YhYMH92GJlbWyzOAnp7DB+hZy4wOx0XI5tu7a
gHt2Pmhqa0eNzgDIkYiX7di+bAK+HDIK02dMwx//9Z9xyT4IJ6wW4sSjcGVZDfW1SAx2xGKrQ2iu
ycaMufNRUlODjcuX4/Llc1i3/SSifR7h3/75T7Bca4VFc2diwer9qO/sRnunZgRg7rKdItxqyA62
wfh5G+FiewmbxX7cPG6F/Xc8gao4/P5//SuWrrHCiiULsHCZFRZPn4krDnHK++rFdsT6P8OabacR
7nEXc1efUObXJLlhvsUq7Ny6GGeeBCrz9lktwaWb97Bs0VJkVrWitalBzH2Jm/vWYu3+u0odya4F
M3DZ/gVSQpywdtUKbN25GZ4BIVg+fihGT7WApeVqjBs+CbduXsHchfNQJwxTU131GykASVGCnzBy
ozBnwQLMnDICq3acVK7Qf3p2j2IAKoQBWCZ66g3F0Vi4dgeqS7Iwd9IQzJo7Dz8J0xKVkIjtq2Zj
+Zp1mDBpBpyiMjULFkR63sawn4dh/uyZmLh4M2pbO+B0YR9GjJuG4UNG4GlIGuL972PYsFGYMXUs
5m85pqQFdJSnhWH8sB9hIbZt2ojh2H7iNjram7HLcjHWrFuHmRPH4a7rC4Q4ClM3Zx5WL16Adafv
Ijn4MWatWKddymtoACjq40QDYKT0hwGQF9S11eRh+vCvsOzgZYSHR+Dm4U2YvXov7O+cxZgpixEc
HIgVoiH2ik7C5tkTceC6C+4d3Sh66sdhd2M/1h69jgenNmHjWdGb7a4UPd7RuP/EFhOGjYW9iy8W
TxmF9cdvwMfRDs+dfXFix0L8/usZqBEd4XrtXQCtHd3IDrPHyPGzUa5Nvaf53cfQcXNw+/xhjJhg
AS9Pd1gsXAEnR1sMGzIR/v7umDB9GkpEB9j//mH8X//n/4MHARmoyw7BiB9H4LlXIE7tssKOMw/Q
2d2Nts6XSPZ7iO9/nASvoGB4uj3H6CHf4tyzEAQ9OYGVB67gyoElsLJ+gO7GQnFMhuHCY3fYXDyI
jUcv4/GFvRgxaTG8PFxgsWgVnOwfYcTP0+Hq9gyjfxyG564+2LF0NtYfuI6DG6di91V7ZT+SAp7g
t//zH7Hl1CMlpSGPfXv3S8S63sJfv/gedh6BcL13EV9+9RPCU/Px/N5tuHgEYOfKyRg1eyPOH9wM
C6uDCPZzxAJhRLzcnmDUuJHIr+tRrgFQvQ2wsxHhoaFITMvWzhDmSdStaWhBtwi45ZV16OlqQ2lZ
ufJad1slwkT9ykbttQzdjcp0drHuIsHX1BRlIzQsHK+vRABSYqOQlFmknQIq89MRFh6jjG30pqux
Rll2fEqOdg7Q3lKFUDEvNVNelKmhIDsOoeEJSvllewNKyiuUsj40ABT1caIBMFL6KwXQInriZRnR
2LJxDWbPng3LTYeQWSoa/s4m3Dq/C7NmzcLuM/fQ0NEOvweXsXTlHkSE+GLVAkvcvHMLdp7BCPGw
xWPPcHS0VePkKWuklTXghfM9rFy3BRbTRmDzqXtICnPBgvmzsGipJbxfJKO97fU1AB2dnQh1e4zL
953Q1d2FxsZmdDSU49SxI4jPKcS9C9swY8YMnLnngqaGauxftRLHTl/F1bu3UVLfgbr8OGzevBO5
VSLAifeHuN/HHLHdSy33IqWkEq3NTcrthWVZMVhlMVvZzwXzV+POUy+ldxwX4IB7jr7wdbyDBy4B
wjD0IC3aC0sXzcCchesQnFaAno46XLbeoGzHhUceYjsqsHPZUlx76o8Xvg8xc+ZMrNx2EOX1LXB+
cBZ2vpHKRYloL8PIb/+MZy/yxDI0tx3K2xY72tvgfP8KLGbMEtuzDC5+EXjZ0wmPp9cwb+4cLFu5
ES9SCtHWUIpDO1dh9qw5uGofiOqiZJw8cwpl9XIExYABMBNoACjq40QDYKT0lwGQahYmQB8ZMOsa
Gl89GwA93cotee1dIly+7EarUv+lkseXgVzeFiiv9JdX28u31BWl4Kz1cYS9CMPCySNwxsZXWYyO
ThH85DboDIAsN7e2obtTc8V8fb1QQ5Nyn39z05vPKGgQ2yUnO0XdLmEc5K9ZyZEMSZPYd7kNHXq3
JbSK9yvLFGpoatbO1dDTrXm/NAcd7a3K3QMdYn9k/ddX9ssearOyPbqlyiv7lbSFQNZv73x91X9z
U4NyB4QM8I31NXh2ZT+WrN2F2vYe5cv2+jNoUO600NHVqblDQH9Z8rkA+tvcI/ZZmiPd8w/evg3Q
vKABoKiPEw2AkfIxBkBedKdcA6At96vk77LXVSMyLAgBAQEIiYhFnQhajY1v1pMPstEZAN2DgExJ
jcIg1NdWICwwEJkF5WhVTIR63Q+RPGY0ANUDcw5TlAlIv803JBoAI+VDDYDuR1RKSkqUACIb0f5V
Faqqa9DULB9wo3nITW1NNaqq3q4rt0Makd7zTUPyMcs1aBbHoLGhbkAeuyyPnRyFMVfkkyQH5hym
KOOUbGdkuyr/v48JoAEwUj7EAMgTQp4Ysvcoh5Fl8JBl/WHUXyrrpj+kvqFyX+uba1k33Xt+U1OT
oubm5jfK+tP66l3PmMu6c1ftuAyGsm76l+a/q6ybft86LH9cWTfdu/w+dXRl3fT71umvsvwvf4Oj
q6tLMca6eb8kGgAj5WMMgG7YWPYgIyMjkZycjNTUVEX9WU5JSUFaWtqr+YbKavXVyvL/u+YbKve1
vvwv39Mf9XXzdfupX9bff0N1DNWX/+Xyk5KSXq3zQ8tyWe+ar1aW26FWX7d98r9a+X3qvKssj4tc
p5Raua911Mq69fUuv08dXVn+H4iyXEfv+bp9U6ujVtavryvL/2rl96mjX+5rfflfvqev9eX+6Mpy
vu5YGCq/T335fyDKch29y3Jb3lXHUH1ZlvPl/5iYGGRna+78kaMBNAAmzMcYADk0LyksLER+/usn
tRFCCDFOZPsujYCEBsDE6Q8DIK8DoAEghBDjR17fJUcDJDQAJk5/GICioiLk5uYqZUIIIcaLNADp
6elKmQbAxOkPA1BcXEwDQAghJoC8K0ZeGyChATBxmAIghBCigykAM+KTjwC0VeDQ3oPIqtbed97T
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
hDzhZFn+Vyu/T52PLct19LV+Zmbmq7KcL6d/qSz/v2v+QJXl+tTK76qj22ddWVdf/1i8q9zX+vK/
fE9f6nxIff39l/MNldXqD1RZru99y7p9+6X57yrL/2rl96nzsWW5jvetI/dPluV/tfmGyvL/u+b3
Z1mu411lXX3dfhoqy//vmm+orKsv/8tRWsn7GgCmAMyET50C6Onp0U4RQgj5lLyPAWAKwIz4lCkA
edGfPLnUlklRFEUNrEpLS9He3q5tkTUwBWDGfMoUQHd3tzK/tbWVoiiK+sSSwb/3KCxTAGbMpxwB
IIQQMrhgCsCMGUgD0NnZqZ0ihBAyGFEbAZAXDkpoAEycgUoByHtP5evyxKIoiqIGp2SbLv/rYArA
jBioEQB5QsmL/qS7pCiKogavXr58qW25mQIwKwbKABBCCDE+mAIwIwYqBUAIIcT4YArAjOAIACGE
EB1MAZgRNACEEEJ0MAVgRjAFQAghRAdTAGYERwAIIYToYArAjKABIIQQooMpADOCKQBCCCE6mAIw
IzgCQAghRAdTAGZEfxiAkpISGgBCCDEBmAIwI5gCIIQQooMpADOCKQBCCCE6mAIwI/rLAMhRAEII
IcaNbNeZAjAT+ssAhISEKCeNVGZmpvJfDiNlZGS8Ksv5cvqXyu9TX/4fiLJch1pZV0e3b79UX9bp
XV/+f1e5r/U/pCzX0Zc6siz3RX++bt96l/Xrq9XRn9+fZbmOXyrL7XpXfVnnl8ry/0CU5Tr6UsdQ
fd18/f1Um/9LZUPLGYiyXMe7yrr6uv3sXUd///XrqM03VO5rfflfvqc/6uvP713W3385/11l/fr9
UZZtOUcAzIT+MADypyTlfDlPSp40Uiz3raybNlRHX/r1ddO/VO5rfZb7p9xbutfk//d5P8sDW9ZN
68/vLf06+vVMuaxDTtMAmDD9YQAIIYSYHrKdpwEwYT7UAMgLRSoqKl65RoqiKMp0JIO/bOPVYkBv
0QAYKR9iAKSkCWhqahIffINSpiiKoga/ZJv9vlLa+MZG1RigLxoAI+VDRwAqK6uQlp6JrKwcZGVT
FEVRg1+5fVJ6RhaKi0veaQJoAIyUDzEATU2NKCgoRH5hCZpaO9HQ1E5RFEUNYjW2iP8ikNfU1qK2
tu6dkrn/svIKxQjIkQC1WKATDYCR8qEGoLCwCKXlVWjvBprbeyiKoqhBrLbOl2huaXmvi/qk5Ehv
VVU1cnLzaQBMlY8xACVllWjrEgagrZuiKIoaxGrtEEaABoDoQwNAURRl+qIBIG9BA0BRFGX6+iUD
oBbgaQDMABoAiqIo05eaAZBBXqqgoEC50l+W9V+jATBxaAAoiqJMX2oGQAb25ORkeHh4KM//1w/0
NABmAA0ARVGU6au3AWhublZ+BCgoKEj5QbfAwEDlx4B0wZ4GwAygAaAoijJ99TYAcshf/qpgeXk5
WltbUVpaiqysLBoAc4IGgKIoyvRl6BoA3VP+eA2AGUIDQFEUZfpSMwC/JBoAM4AGgKIoyvRFA0De
ggaAoijK9EUDQN6CBoCiKMr0RQNA3oIGgKIoyvRFA0DeggaAoijK9EUDQN6CBoCiKMr0RQNA3oIG
gKIoyvRFA0DeggaAoijK9EUDQN6CBoCiKMr0RQNA3oIGgKIoyvRFA0DeggaAoijK9EUDQN6CBoCi
KMr0RQNA3oIGgKIoyvRFA0DeggaAoijK9EUDQN6CBoCiKMr0RQNA3oIGgKIoyvRFA0DeggaAoijK
9EUDQN6CBoCiKMr0RQNA3oIGgKIoyvRFA0DeggaAoijK9EUDQN6CBoCiKMr0RQNA3oIGgKIoyvRF
A0DeggaAoijK9EUDQN6CBoCiKMr0RQNA3oIGgKIoyvRFA0DeggaAoijK9EUDQN6CBoCiKMr0pWYA
ZJDXb9v1p2kAzAAaAIqiKNOXmgGoqqpCY2OjEuw1Ab/qlQmgATADaAAoiqJMX70NQHNzMxISEpCW
loa2tjakpKQgMTFRmS9fpwEwA2gAKIqiTF+9DYDs+ZeUlCAwMBBRUVHK/7KyMmW+fJ0GwAygAaAo
ijJ9qaUAZG9fmoDg4GAl+Ot6/1I0AGYADQBFUZTpS80ASOl6/Lr/OtEAmAE0ABRFUaYvQwZASgZ7
tXk0ACYODQBFUZTp65cMgJpoAMyAjzEAZRXVEOeUOLFeUhRFUYNY7aKz1trWprThMri/S02Njaip
qaEBMGU+1AAUCAOQnVuAmvomVNc2UhRFUYNYNXXif3UNKioqUVFZ9U5VChUWlSAzK+eNiwPVRANg
pHyIAZDuUJ5I2Tm5yMnJEw6RoiiKGvzKR24flJ2di/LyircuEOwtGgAj5UMMgJQ0Ac3NTcrQEEVR
FGV6km38u4K/FA2AkfKhBoCiKIqipGgAjBQaAM1oBtU3qR1HauCk9hmYotT2nRr8ogEwUszdAMhb
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</Preview>
  <Form>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
E+7WKb0CAA==</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 30
						Add-Logs -text 'LOG: 30 seconds reamining'
						Start-Sleep -Seconds 25
						Add-Logs -text 'LOG: 10 seconds reamining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
								Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
								Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $DN to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 30
						Add-Logs -text 'LOG: 30 seconds reamining'
						Start-Sleep -Seconds 25
						Add-Logs -text 'LOG: 10 seconds reamining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						#Shared Mailboxes
						Add-Logs -text 'LOG: Checking if there are Share Mailboxes the user will be granted Full Access to'
						$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
						#If there are shared mailboxes to add the user to (full access rights)
						If ($SharedMailboxes -ne $null)
						{
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							$DN = ($User).DisplayName
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox"
								Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
								Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
							}
						}
						Else
						{
							Add-Logs -text 'LOG: No Shared Mailboxes selected'
						}
						Add-Logs -text 'LOG: Done with Shared Mailboxes'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
			$comboboxO365countrycode.SelectedItem = "US"
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>