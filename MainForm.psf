<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
RU5ErkJggg==</Preview>
  <Form>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
X/8PDU1wFTy9AgA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 65
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $User to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 65
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $User to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done'
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}

$disconnectFromOffice365ToolStripMenuItem_Click={
	Add-Logs -text 'LOG: Removing PSSessiong'
	Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
	Get-PSSession | Remove-PSSession
	$buttonConnectToOffice365.Enabled = $true
	$buttonConnectToOffice365.Text = "*Connect to Office 365"
	$buttonConnectToOffice365.ForeColor = 'Firebrick'
	Add-Logs -text 'LOG: Done'
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>