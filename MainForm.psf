<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAL7xSURBVHhe7P13VFTZ2u+Ln7/uGDece+84Y9wz
fufe95z3vHm/+9157+7daXe3bbepzVlBQQygSBAQEyZEEVFMmDAngojknHPOOeccqyigiN/fnKuq
tMSFrVKEgufT/ZW1Vs0Va635fOd81lr1nwiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIGYp1r/9zW+8
Ll666uV8857X1eu3SCQSiUT6JN2689Dr8OGjXv/5P//vXsoYQ8xW/v3f/z30pX8E8ut6kF/Tjbzq
ThKJRCKRPkn5td0oqO3CqTP2UIYZYrbCW/6F9RLEZFchJquS/SWRSCQS6ROVVYGEggak5lWQAZjt
3Lpz36ukUYq4nGrE55JIJBKJNDklFtQzA1BJBmC243zTxau4Qcq+tBok5JFIJNL8VmJ+LZIK65BU
MAVSLnfK16MUX8eUr4ctm69D/RgmFTYgJZd6AGY9ZABIJBJJIR7IojMrEJJYhNAkzSuEKSy5mK2n
BrHZlVO2HpV4azwup0pYr9jnmhBfdmx21VsmgAyAlkAGgEQikRTBnwdlr5A0BMbkIiAmZwqUC9+I
TPhF5wh/xctoRn5RWUzZ8I3Mhn90tmiZyYsdJ7Zs77AMJDBTozqWZAC0hA81APzzeJHpJBKJNBfE
DUBkehkLaDlCt3Ycbz1PgWKzKuAVms6Ccg4SC2qF+6+mQvGs5e8dngmfyCyhJyCWjauL9wy8NY21
4t+S+rSJhpkSWGzwYWaG75vqWJIB0BK4AShp7GVfmiJXJCYe/JN5rkc5LFaGRCKRtFk8nx2VUS60
/pML6lkAZY2eKVBcVqUQmANj89g62Xpyeb06XiyQsr9J+fVCGeGvuti0xPw6oZz4/LVIYOtStP5z
hCD9rkl4My0hj+fx+b0JbwyJIiawaUyqaSrFqw0nsoDPexrUY0NyUSM9BaAN/JIB4F9qZWMn+uRD
6O0fREFV61tf9HjxL55fSOrT+MmazByh+jSNiq0vuZBfEIpxxfrejH+qhOWw/UkR2aePF9/GTzwG
fP+U26FSEms5iJYdL2EfpvDYk0hzRNNlAGKZAXilNAB8PTzQi4kH+qD4AqEF78u78tXEp4Ullwhl
xOblSmT1tMoAJLH6XWEWFOKGQGEUeIu9FkEJhfBmrfjgxEKhruHiuX3vyEz2Wb5wfFTl38yvEG8Y
kgHQUt5nAHiXf2pxPYZHRqGiRzagOAHGlVWoBpHJeYjNrn4TMPmFlF2KyNQiNv7LQZTP93HBljnU
nApEpZUIgZIrPqsM0RmlinHReX5Z/AROyClDSGwagmMzEJNV9ZHbpZDKqSfkViA8KY8d049bBl9n
fFYp245UhMRlITQug21PJmKZ8/6l7eHrjk3PR0BUGhI1YIhIpLksfj3NFgOQXNgo5PD9g6IQl5A+
TmmIjU+Dl2+4cEPhRCbgQwwAb5T4svV4vgpCQlIG3DwD8MwnFm4BiXB9ESBMe+UbCq/QVGGb3p5f
ITIAWswvGYCM0kaMjI4pwz8g7Rtknym6ivjnvJwQiNiJlJxfiacP78LNPwEpJc3CZ6klTfDxeYkH
bv5IKmoSckOp7LOUYmUrls2bUtwklOPzxCRnwD82G6mlfH7e8uWfNb9u0fMTi5dPUbZq+TKjk9Lg
9ioMiXw6KxseHYsX/jHC8Jv5FcFSODHZuGp+3jrm2yJsDxtXTOPLTIf7S1+8CozES79Q+MdkszJ8
PsX6+T6PXxYPuLwM35cktr0phbUICI9FTC47NgXlLHCnCQZA+Ey5z2/tl7BsxTpebws7XnHphfAN
iYabuweeevjBJyQe0dnMnLF1q69fcbyU28T2R9iPxBS4vQxBIluXogyJRBLThxoAHlxfd8WLKJFd
42LzKVT7QQYgldUDriwQV1RUKWteDq+H39TFiayufMVa7ckFDaLL+BADwOuMUGYiHrv6Qj4wICzX
ldUxT577CMOjI8O4eecpW0/6RxkAXv+QAdACuAEobZIJJwK/ANTFW/lpxQ0YHBoRTgZOt3SABTH2
BRfVI7uMBVwWwITyggGogOeLF3js7ssCFA/+zUjILICrqys7maOQzE7quMxCBETEITguW3GjCAvM
4XGp8I9IRlx2JXx8vfHIzQcRaaVs/kZEMMfrGxaPKHbR8N6IqLRChMdnICSBXaQ8eLMgF5PMgrVP
BJJUBiAmDp4BsUgta0FUYib8+PwZFUgrZQExJZuNxyI8rYQtn42nFSE8MUtoVXMTk8RO8qS8Urh7
erMylUgvaxX2I5ntb2xGMSKSchEUzVrULNDGpOUKywpLLVbsay4L8tGJrMWdKrwJKzYlE4+fsIsn
LJld+BVsXcyts/mSC6oREpMEv/BERGVWCfsZk1aAiORcBEbEIzSpQAjkqu+Bm4D0yk6ERUbBj1Ua
mRUdSC2qQ1h8qrBv4amlwgXHFcX2zz8sjh2ffHYsWtmxSYOHNzs23JQol0cikd4VN+P8EcCguHxW
13DDzM25iNi1HRhXAF8WWP2YWVCXb1QOotIrhGApOm9+g2AEvCOyFOth17lYubTSVrgHJCA/vxA9
3d144uYLD1bHuXqF4qV3CIaHhxAVzeoQtg28DhRbRhKr0/3Y9vhzQ8OGeR3PJfTesjpc0YtbJ+xr
INuWu4+90NHRpazpgZ4eCa7dfITH3pFCXcnvBVAtQ7EchXgMEO4zYMtUHUtePo1eBDT7eZ8B4IrJ
qUZ9m0Q4IcaY+Syt60BEZiXyK1swOjom9BAIXf48eOaVwcs3GN5B4fAOS0VGZTsCQiNYKzqctcgj
mQFoEgJ6YFQiXrz0RmACC74xsXD3DhO62aMzy+EX4I+nL/yFCzEsNgEvA6IQGpsCD98Q5jCr4en1
Eq4vAxGamC8YAN7KFTMAXsFJiGbT3bwCEcRa3pFseXz8hW8oQpmB8PQJZKaiiq0vAE/cfVgZpSFh
JiUqnm2ffzRS2EWoOg68RyIkIhKPnr5AQHQmMwLp8FRbVji76OMy8oV98/YLgFdIojD+7LkrfCIz
EJueA3fepcaMhI8/+zw4lgX7OLh6BiKWtQL8/f3w1DOAGYNkPHd/idCUMrYt7Jgq18/3KyQ8Aj5R
WcyUtCAgJBQv/MKZ4UiGm6cvW38lohKS4O4VgOCYNLzw8oN/bD7i0rLIAJBIH6APMQCpxS2sbktD
eGQCa4FnIikl6y0lJKbjpV8kWw5PGfKeufHL+HAD4MEMQFZWDqoqK3HjoQ+rw2oQnFyO2w+9IOnu
RGh4rGA6JmsAeGs+t6oL9z3C4eruDUlPNySSHlZfeePSbXfk1Hazcrw8GYA5x0QGQOjiZydGFmvl
t3T2CgaAB/yc8mYU1bShWTmNm4Pi2nY2DzvhmAF48YoF1vRCvPAOQmxmMQuOIaxVyoKfT5gQrMMT
0uAbEgsPTw/hphOh+/5lAAt4hazF3o4IZgh4vimTrdfDwwOegTFCq1oIiskFzGAEIIwFu3QWkPl2
qgyAhy8zGCxI8kAZERvPAiwPwLls2b4ISsgTAri39yu4se0IjklhJ7cXAmLZxREUAn/m5jPKFcGe
m5So+CR4BsSwedQMAFtucHgkXgYnI7umC76+PnD1DhWW5eHpxYJ8JuKzeFd9LF75sM98QoUW+Uu2
vdG5LPjm5MPjVSii0/PYsQlBcmk7a8m3IzA0jF3EOQgMDhVa91nV3QgKCYMvWx6vhFTrVxkA3upI
LaiAh5c/Mw5NyKzsRERcPF4FJ8AnIBihaRVCD0FiZi5eMFMUzSol/pcMAIn0fn2IAUgrbcPTl+Eo
yMtDZ0cb2lpb3lJ3Vzu8fIIRklQi9Ca+u4yPMwBJSaloaKhnhj5AyNO7s7rSLyBMWHdAUIQQ3Cdr
ANJY3eIVmgaXB+4oLy9DHtu3nOwcVFaW494jD7gHJQplyADMQV4bALULgX+5maxl39LVi1He7FeD
B/8emRxjyun8X/50gGAAcpkBeOmHOBaYgsMi8Pipm+BQk7Ly4O4bgfjMQiG/lFDUiuDQULwMSUJ6
eTsSc8tZy95HCMQRsbFsejIymdF44ekJ36gMRKcVIiKlgJ3QlfDyC0ZkRrWQghAuWnYBJWQVwO2F
L1tvMwuI7QgIDsGr8DSksaCenF8NH9Yi9wlLhV9gAAvgCYhJL0Zkcj47eavhG8SCeGIxu+CVrW2e
AsgtgZuHF8JYMBVSALx7vagBwRHRwvOumRVt8PXzg2dQHGIyFMuKzyll2+uNMLZtscmpcGPmgKc3
PNh+KQxAAWudhyAmk23rS3/hGGRWtMI3IAhBiQWCAfCPzUU6W3ZQaDj8orPeMgDcgCgMQDbSiqqE
FEVUdh2yKjsQEhEFn/BUtqxABCQUIZO5+dgUZor8ohGTynsAwpkBUBgmEokkrg81AE+YAUhKSGAt
83KUlZa8pdrqCtaK9mGNldIPNgBi9xGk8xSAXzyio2LQ1FiPZqamhlqmOjZeJ4z7+AYJwT2VGQCx
ZXADwFMSgkngPbS8ji7gf98Mp7H95Hf7u9x3RV1tFYoKC2FrfxXnLtxCPjMCjfU1uHvvOWss5bJ9
bxbuWeDi9zGplpHK6kYyAFqK8y0Xr4rWAaG1ygMd71bPKG3CkNqd/+rUt0pQUN2GyqZuYbykrgPp
JYobz1ILK5hL9WeBuAUpOYV46uqJ+EIWhDNzWDCKYCdhDV56eeNVUIwiuLMgF80C1SvmZF/6BiI8
tRyJGdl45uqBsJRiIYfu6R0In5Bo+IYnsyBcB2//EERn1bALpEnYXi4+HBwWDlfW2ucGwc07jAXY
FsSlZQrpBy+/QATF5yMxu5Atzx/eITFsmXFCl38Aa23zizWjjG2/anks6PN1u7/0YfOGwJNtW2hy
EcJj41nLPEsIugmZ+XjJluXDluXNlsWdcEBQEF74hsPb149dvJHM3LTBjxkFDzYcl5HHjk0IUspa
WCCPZMYgCK8CQuEZECXcqxAQGCLk4bKrO4VA7x+bI/RKqLYpgy0rNDKSGYNsYf2RcYnMBLB9CQpn
LfwQxBewyiYzDx6ePux4suW/CkBERhUS07OFHoBUNr9qWSQS6V2lsaAVl12N4PgCNi5uAHiKkL8B
7+GzV3jq5vuOnrj64Kknux6Fp33enV9hAFjDgwVmYT0TGAAe1MNYYH74zFt0PVxP3AMQm8UaQzyg
iywjiW2Df3QuC955Qit9IgMQzurae49f4hkzLhev3oerf6xgCpzvuuGZmzdu3X0mNEjSWD0lZgB4
40joZWB/VceS11fpBVVkAGY73ABUdwyyANiCTCbetZ5bpWjlc3WPE5/W0tWHYhb4u3vlrGyrcOFk
lvP5m4Qb3NJZMOXjaSUN7G8rMtjf5IIaoeWcVlQj3EyXUsRvMGQXHRuPSWPBOa+aBbY2ZLH5knJK
mJusRnZVB1LyytnnhexEY63dCmYsmIng26hYH5diOJu1ppOyS1jrvoiZETbOlpVeXIfY9AJ2wfFu
8TY2rR2p7KTkN9zxt1XxFngqW96b7Vcsj5sBvu704lph/risEmGf0tjyuNvlZbPYstIKqxXLyq0W
lp9Z2sACfZGwr/wmvUx2EWSweeIyi4WbKVPYdB7U+bYmZhUjJrPk9TjfDn7hZLHhNHZseI/Em21i
YsPCdOX6+b4k55YJ+8udOZ9P2Cbl/vHWTHZVOzNn/IKtfXtZJBLpHWWxa5Hfwa8IzOIGgH/Ob/CL
zakVGiIx2W8rmgVkfpMgD4yi8ysNAA/MIQmFbD3iBiApjz9F1MjqljrEsGXGsmWri0/jy+JPAIjO
z8W2NSA2X+hp4PWBmAHgL3jj9xrx9fCbifnjxTxdyuuUBPZZeBqbllXF6mu2nWwZExmAgJg81nBk
dbHyWOZUdSKT1e3KMEPMVrgBqO0aFoIvD5oq8eAoJiHQCMFUUUZ9Hh6Ucqs7kKMcz2HDwnQWiPh0
1bTcmk7hbw6bnsMCbW5N1+vPufjnb8p3Io99nlPd/nr+HGZQVGXfiK+Dl2XLZssVyvL1CsvufF1O
sf4361Nth+pzdb3eNr5M5bh62XeWpVyfsMzX05T7yz5TTRO2le+j+rbyeVTD49aj0rvrf3sZimnj
jif7TP3YkkgkcfHriD9xE5Kg7AFgAU5MbwfScRK62lnwHzfPa7HPeQogMC4PoYmsscLW884y1MQD
PN8m4a+6lOt5r/LrhBcJqXoaXj9qLCa2HfzRQ749imk8sPPWPJ/Op6mmvyveixDEjAaPDapjmVfb
jeySWjIAs52bzAA0SMaEQMKDJ4lEIs1H5dd2sWDXiHAWmPNrWACrYMZa02It43QWTANZwAxPLhHW
yxsEomUnI7bMrLJWIfjznoacSt54mEDjPuO9n29P5w0g1bByutp4Hk9bxhUIDQ3VsSxslCKntJ4M
wGyHG4DmXqCwrue1Ckikea1u0rxUDwteXaxlXoyI5FJEpGhekSllCIkvREJOLSLTyhGeVCJaThMK
TShCLE9TZFQJw8J0vl+aFFtmGDtekanlKKyXvI4hpc19yCtrIAMw2+EGoKUP4L8IqFIpc2+ljZJZ
KtX2kUgkkmZVxlpDJQ0S1qrtQD5r2U6FCpjJKG+RCesT+1xjYi1xvj9lTb1vTXtL6tNUw2LlJpJy
uXwdJWx/itix4zGkvFWO/IomMgCzHX4PwFsGoLEX3ZI+9HT3oPsjxN8aNR2SSKRzRlJp79SrVzYt
6pX1zRnJ+vqnXH39A9Oi/gH5nNGAfHDKJR8cwiDX0FRrWNDQ8NRqOtYzPDKC0dFRNHcNoKBOzQCU
kwGY9YgZAIm0D9KeHkg+QlKJZFrUK5XOGcl6e6dcfTLZtKi/r2/OaKC/f8rF37s+HRqUy+eMhgYH
p1z8FbvToZGR4Tmj0VH+qvhRtHSTAdA6xAxADzMAPKj3fIQkLDhPh6QscM4V9bIAPdWSseA8Hepj
gXOuqJ8F6KnWAAvO0yE5C5xzRYMsQE+1hljrfDo0zFvOc0QjI8wAjJEB0EqmygDwADd+miakHjxV
w9qq8cF6KiQWrKdCYoFUWyUWsDUtsWA9FRILpNoqsYCtaYkF66mQWCDVVpEB0GI+1QB0d3djcPjN
a4JHhuSs8pRjZHiQBWop+gf63wneHyq+/N4+xU9TqpBJFfcAqIInr9x4N/oQ24YhOVsXG+aVt3qA
ne0SC9ialliwngqND6LaLLGArWmND9RTJbFAqq0SC9ialliwngqJBVJtFRkALeZTDUB/fx9iAp/D
7txZ2J2xg2dwIkqLE+AdmoCm8nScPOSIdvkQC9LiQf59kvUPoLk6H1cc7XH27FnYX3FBbQtbp4wH
NRmG+ttx7cw55Dd2IjHCC/wnfbkJ6OjoYEZAe3oGxAK2piUWrKdCYoFUWyUWsDUtsWA9FRILpNoq
sYCtaYkF66mQWCDVVpEB0GI+yQCwII3hflhuXwxDGwc8eXAPoXEZqKnNF15xW50ZjPXL9qBlaAzy
AbmyDQ/ImWng84sFfXWx2ZDqcwc//LgKj93c8PC5F+pbuoS7WRX0w0JXD3GlLSjOjUNeZRvaimNw
8Iwj+O0osl7tuFdALGBrWmLBeiokFki1VWIBW9MSC9ZTIbFAqq0SC9ialliwngqJBVJtFRkALeZT
DcDogAQnzXYjte5NgM9PiEJIRA7qCyKgu24/uti0ttpsnD1kCRObE8itasbgB6QGBkeBxFf3YG1z
XVju2IjiUZaGolQcszaDvdMF6G82QEZ9B1KDg5FdUIkbJwzwz7/7M6498YG0Xy7cAS8WdGeTxAK2
piUWrKdCYoFUWyUWsDUtsWA9FRILpNoqsYCtaYkF66mQWCDVVpEB0GI+1QCMDffDxnAVdI0Pwv6s
HRIKahByxx67zZzRVpMIvY0W6Ja2wMRQBy4eofB/fhmbd1mhTTbMgvP7bxDkBiA3/Cn+9Ls/QldP
D5anb6K7uxl7Ni/HladeiPB7gL99vhglUhnsDfRw3T0JKb7XsHD1ZqQVViqe5xYJuLNNYgFb0xIL
1lMhsUCqrRIL2JqWWLCeCokFUm2VWMDWtMSC9VRILJBqq8gAaDGfbACG+mCzdx1MTjniyaMHyK1o
QvhDJ5gfuYfWqgTs3HYM+dlh+Oavn+HEufM4eeQAVm4xRHm7TMjliwV+lbgBSPa5j71mp9Ha1YW2
LhmK4rxgYHQEitsO+3Fsz15ktXTgisleuPjkoDUvAHpmRygFME5iwXoqJBZItVViAVvTEgvWUyGx
QKqtEgvYmpZYsJ4KiQVSbRUZAC3mk1MAcgmO7t2G0LxmISRz/G6cxf6Dd9BaGQfd9ZaoqkzH6p+X
ICKzFOXF+cjKzUcXa7XzF/qIBX6VuAFIeHkHJlYXhOUOs/OrITcMK5evQ6VkBP216fjx88XI65Li
0t5duPUqCw3pnlihtw+yYW4AxAPubJNYwNa0xIL1VEgskGqrxAK2piUWrKdCYoFUWyUWsDUtsWA9
FRILpNoqMgBazKcagJEBKS4cM0NwegWGBmQYHhtD+BNn1tp/jraaVJjssoGMtcf97zli60Yd7Npt
iJtPA9HPLjLpLzwZIB8ZYy3+l/j+m2+w3cAA2/VNUNTYhhc3bLF83ToctrGA7iYjlPVI4XLsMB75
Z0HeWYUdKxbiiMMtSAeG6B4ApcSC9VRILJBqq8QCtqYlFqynQmKBVFslFrA1LbFgPRUSC6TaKjIA
WswnGQClOjra0dXdLQzzwN3d1YXOzi5hXv5IXo+0FyPDQ2iqrURZeQ0kQm5ePOi/q2401NWirKwM
5eWVaO+WCu8YqKuuREN7J/pkUsGIdHd1sm3ogaxfDmlHK6pr6yBlgU8s4M42iQVsTUssWE+FxAKp
tkosYGtaYsF6KiQWSLVVYgFb0xIL1lMhsUCqrSIDoMVMxgDwQCuRKIZ50ObjPOjwFwHxoKAI5GxY
qFT5S3rGB/n3iAXIvtcVpmpeKRseEN49L+uTKd6nz5atau3zH1nh73IfH2hnq8YH66nQ+EA9VRIL
pNqq8cF6KiQWrKdCYoFUWyUWsDUtsWA9FRILpNoqMgBazGQMgLpEg/gUSCyQaqvEAramJRasp0Ji
gVRbJRawNS2xYD0VEguk2iqxgK1piQXrqZBYINVWkQHQYsgAzJzEAramJRasp0JigVRbJRawNS2x
ADcVEgty2iqxQKppiQW4qRAPmnNF/KeAmQMgA6CNvGMAmDp7+HP64oF+piVmCkgTS8x4kN4vMSNF
mnmJGU9tlZjx1GYN9PehsUOGwnpFDCEDoCWIGYD2Lh5oxQMwiUSavPiPaZFIc0WSnm7UtUrIAGgb
ZABIJBKJNBlJWbwgA6CFkAEgcXUJj3B2zkvxFozYMSGRSB8mMgBaymQNgFjemaQ94jlvHgTb29vf
6dabD+LGp7W1VfTcJpFIHyYyAFrKZAwADyA8cLS0tAiVKEn71NbWhoaGBuGRsfkKf2kVNwNi5ziJ
RPplkQHQUibbA9DU1CSYAF6JzoR465UHMr4dfFisDGli8WPW3NwsPJomhpwZA/6Qz9uMCj+6xOGP
mg0NDyvHPg65fNx8Y8Ovl8sZGx1RPss+qPwRqKmBHwcyACTSp4sMgJYyWQPAW/+qYYm0F6PKmnp0
eEg4KXp6xLueVeLz9Q0MYnhQrliGSJn3SdWFzU0AH+bT+HL4q4H5s6nv3QZhm2XCs6wfsq1cfNnS
XnbA1JAP9AnT+9g6P3U/PkV8PQODQxiS9wvDXINDw5D3yz54G/gx4wZuvAEYkTTizCEjrFi1CuvX
rcYD3zhheldNJtasXgO/mGQcN9XDgWMncdfVCx9jAVors7B7w1r8vHQZbnvGC9NKkwOwYtkyLFm8
GTF5deiry8CK7xZgw4YN0N9/GF1DQjGBB5fO4VVcsXJsBJdPHEZSWYdy/OMhA0AiTU5kALQUTRgA
XnnyQDrQ24lX7ndhb28P76gk9LNgJB1Xvru7R2gx9vVKhMDPW3mF6TEIjGbl+wfeKvsh4kGMV+Dc
APBhPq23bwBNFTl46uqDbjb8zkuN+PayIM5fYNHdVAUvHx80dfYqTcD7xYN/R2MlHt64ivNsPy9f
vouckjoWRkZRnBWHgMhEZgQ+cD/YdvDl8d9L4MOiZd4j/vxtXloiEjOLlM/jypAWF4ns4mr0yXpF
5xkvfsx4GuBtAzCIY7vXwcDmBtrZ55UFMVjy9V8RklUFdwcL7LR2RnroIyxero/axhZ0seUoGEZt
ba2aGRhFbU0N+sa5gwTfe7j5OBRyaRF+XrQZzZ2t0Fn5I/xzO1CdEoJ7PjHIC32GTToHUVBQigG1
4M85a74Ht/0zlWPDsNBdj9B8hQGoq61BZ/cbgybtakZtc5tiZGRI6NHobOvEkFq3BhkAEmlyIgOg
pWimB0CK0UEpzlrsxoZdZrhy2QnLFn+LY1fdMcyC7IiysuW9AqPDffB8/BDFTVJkR/kjMC4fLZW5
CI9PY2UV5Tijw4NCpTww+CZ6DLKWtlT2JlANKFu64w0Ab/k/czDH//lf/xXhuXVs23gLWfp6O8bG
WKVfkw+XR16Q9XYhKDgYnX0jbJ1yYZ1DbEMGWDDtl6siz5jwI0bcvPQPjaEkzgN/+t0XsLvgCLvT
x7BgwY/wjs9HMzMd4fGpGFb2gvAfL5IxA6Kir1eK7h7JW9vRWpkDl4cv0c/XqbY+fkENDL7pEFcd
j352PHgvAx/m5W6dNIXZuSfCMA+GJ/dshOPTCD7La/qFH07qFUpwhB4DNq6iu7OdmYc3x7WvPhWL
flwCZdgUiHh4HrqG1tix8gv8/otl2Lp2Af7xV3/BXZc7OOJwGX2SFhzYuQIrVq3Gym3mKK+tx5Uz
ZthtaAhdIxNkVKgvjSPD82vHsMfKEZ3NBVj23fc4YnMUZocuoZ8dn3iPi/jDVwuwcc1qmJy8wY6P
cjbGBWsTPAjOUY4N48gefSQUN8DljDl0d+wSeg1SyltQlOSDbTv1sXO3Hq56RqGpIBxf/eUP2LP/
HFoGVEeDDACJNFmRAdBSNGIApCyY9LVg3eIfcO5BkFCp9tTl44m7N2tpDSPQ8xYOHrSCe2Q6ehpz
8Id//AfoWJ7Bjp8/w28XGSAlLRmJGfnIT43CndtXccjSFM/9EzDKImR+nB8OmprihK0dQpIK0NFQ
jLO2h2BpdQzxmSXMBPS/ZQAkvf1sU4pgaXkED25dgLHNJSHwDcl74ed2BSYmJvBnwdr/zlH83d//
Cu5h8UhMjEdYkC98IlIxNDSMcO9niM0uR0VuJKytD8Lh1iO0seXKmAnoHxxFXqQr9PadEvaTk/Di
MlbsOISKsgLEpOYgKyEIjufs8eh5CBrq83H6uBWOX7iMyjYJi1cyvHp2SdiO4KRCeF23xN/9z18j
JLcWFdlhMDczxZlr9yFhzd7EUA84nb8EB9tz7HhECq8qzY4LhIdfBDMnPMUxivv2h3D4kpswzPYS
9mb6uP0qGe112ThpY41Dh08hq6QBQwNduH/DHgcPHUZETjn6Omtx19kR509fRmphDYaZwVAhKY9m
Bm4lpMpxTiI7drsPOSPg+TU4PotHZ2Eo9h65id7GTBgeOg7X6+ehZ3ZJKBsR5I17TqfwH7/5AkeO
HcWyb/4E/cO3hM9e01sPa2MDbDU+gpyMGCz7YhG8Q6Nw2doQOw9dx8ggM3e9zDyNybDlpx/xMrlG
OSNgb2GMhyH5yrExHGVBPia3BJbrl8LokD2e+3mjtr0Z2xd8hjX6Jjhkvhv/8cel8HS7g1VbdSF/
E/sFyACQSJMTGQAtRVMpgH75MKrzE2C4fRPWr16DnYamKG/pRvKr2/j6ux9xzs4WX335DR6+8IHu
8sU47vwcJ/auxyazi/B0OY0D5+/C86oV/uXL5XBxvoRvvl+NuMRYbFz6E27cfwTdpZ/hgNMjXNi3
GYvX7sLlK3Zw8QoV3hGubgBYAx0xbk7Ysu8EyvLisWjBzyiTjCL22QV8u3AF7t+7i7Ubt+Oa0xks
XLQWkVGB0DHYBW+3+1jDWq488GxbtxLuPgFYv+h7HDp5FuuX/A27j91kbc0x1iofRX6UG7buPAQJ
a7XL+ofQWZEEna0WeHTXHqZn7+CB3U78aeFqxMfGYse6JdhldRz7tv2MDXvPIPDZFSxYspZtx22s
3ayPqxdPYdGyjQhj27H2xwW4evshdq9fiRPXPHHBYgW+Xa2PoFfPsGzVJrT2DeP47rWwfxzG4j3v
LRjFPWYAjl72EIZ5a/iCxS48CYyB1fqFWKt3ABcv2cI3IRuujofww4qtOHvCCp/9bQVCQ3zwp3//
bzh33Q2VdS3sOHJDoWS4G7orFuCad7pifKwHu1d+i3uhuQi+78DWH4O2vCDssb4GSUMmjI+exP0L
p7H/5COheFl+Bu5dOILvFusgICgE1+1t4PTAX/iMkx0XhqwKRZe91Yb1uPHADYa79MH7SqT5gVi/
xQI5qYkobVT0UuxZsxpeydXCMOemtQFMzj1VjPTXYOm3S5DV0IeGyhJEhvrBcNtqnHa8Bf1VS2F3
0wNBAW4wtzwJf49b0DM9qJhPDTIAJNLkRAZAS9FID4BEio7mGqRnFwgVqqy7C8G3z2Clzn6csdyD
vy5YBTPWst20YhkevAzB2cNWSKjsgd8tO1z1SEFmgDMOXnwAN+fjOP0gmC1hEDo7tsLO7jR2mzkK
y4x/4QRLxweoyomFlakRDh+3xBOvCPQOyNGpMgC8J2JMjqOGq/HlgmXYtHkj/viv/4Sb3nG4aGaA
i67JwrIkPV3Ii/fFLrOzkHVWYPM2fTR2dsLKyAi3bl3DgaOXkBHhin/7pz/B1NwMO7dtwY79tugZ
GoF8SNEDsM3QhoVbBRXxbli13QoBHjdhzfbj/gUz2D4KBdqz8fv/+a/YY2KGvbt3wMDQDLs2bcFt
n2xhvh62HVnRL2Fy5DKSQx5j2/6LwvTO/CDo6xnD5vAuXHkRK0w7bbYbN+8/geHOPShr70d/r4RN
HcP90+Ywt30slOEc37EZt7xTUJjgB3PjvThsY43QmAQYrVqInzfowdR0P1YuXosH929jm8F2dDPD
1Nvd8VYKgFOfG8WM3DLo7tiBLeuXwPjYJeEOfc+rJwUD0MoMgCFrqUsaMmBgfgwdjeXYtnYBtm7b
jh+ZaUnPzcNRYx0YmRzA6rWb4ZdeplgwIy30IRb9tAj6OluwZpc1uvoH4ed8GktWbsTiBUvgmVCM
nOinWLRoGTZvWAH9Qw5CWkBFS3ESVi36AXps2zYuWYyjFx9iUC7DcdNdMDlwAFvWrMTjwBQk+DJT
p7sd+3ftwIHLj1EQ746tew8ol/IGMgAk0uREBkBL0YQB4DfUDXRWY9Pir2BodwvJyam4f+4gdPaf
gvejq1i+fhfi42Oxl1XEYRn5sNZZgzN3A/DkvBVrqV+A1z1bmJ+/i2dOB2F1lbVmR9pYi/dnPH3h
gdWLVsA7IBK71i+DxYV7iPD1wiv/SFw8ZoDff70Znawh3KN8CqB/cAQVSd5YukoHLcrUe3HUUyxc
qYuH189hyWo9hIUGQ89gL/x8PbBowRpERwdj9aaNaGQN4Oin5/B//u//Fc9iStFdkYAlPyzBq7BY
OB03w7ErzzA0MoKBoTEURD3Hdz+sRVhcPEKDXuHnBX/DtZcJiHtxEfvO3MbtM7th5vgMI9I6dkwW
wdk9GG437GB1/hbcnU9hydpdCAsJgN5OY/h5u2LJT5sQGPQSP/+wCK8CI3Bsjw4sztyFndUGnLjj
LexHfswL/PZ//D0OObkKKQ1+7OUjY8gKfIDPvvgOXiGxCHxyA19+9SOSi2rw6slDBITEwGbfOizT
scJ1O2vomdkhPsoXO5gRCQt6gWUrl6Kme1S4B0D0McAhKZITE5FXXKGcwMwTK9sp6cMIC7gtbd0Y
HR5AU3OL8NnIQBuSWPk2qfJehhGpMF7RoLpJ8A2d9RVITErGmzsRgMKsdOSX1SvHgLaaEiQlZwp9
G+MZlnYKy84prFROAeR97Uhk04rK+E2ZCmorspGYnCsMj8klaGxpFYbVIQNAIk1OZAC0FE2lAPpY
S7y5NAOHrEygo6MD04NnUdbEKv6hXjy4fhxbt27FiStPIBmUI+rZLezZdxKpCZEw3mGK+48ewCs0
HgkhHnAPTcbgQAcuOTmiuFmCFP8n2HfgEPQ2LoG10xPkJwVgh/5W7NxjivCUAsgH3twDMDg0hMQg
d9x66ofhkWFIpTIMSlrg5GCPnMo6PHE+gs2bN+PKkwD0Sjpga7wPDpfv4M7jh2jsGUR3TTasrW1Q
1c4CHJs/IfgpdNl27zE9hcLGNvTLeoXHC5vLM2GspyPs5w79/XjkGSa0jrNjfPDENxKRvo/wLCCG
GYZRFGeEYc/OzdA1OID44lqMDnbjlqOlsB3OriFsO1phY7gHLp7RSIl8ji1btmDfETu09PTB/9lV
eEWmCTclQt6MpX/7M16mVLNlKB475I8tDsoH4P/0NvQ2b2XbY4iAqFSMjQ4hxNMF27fpwnCfFVIK
6zAgacJZG2PobNXFHe9YdNQX4NIVJzT38B6UCQzAPIEMAIk0OZEB0FI0ZQC4ZMwEqMMDZrdE+vrd
ABgdER7Jkw+zcDk2gn6h/JiQx+eBnD8WyO/053fb81m66wtx1fECklKSYLBuCa64RQqLUTHEgh/f
BpUB4MOy/gGMDCnumO/pYZL0Cs/5y3rffkeBhG0XHx1iZYeZceC/ZsV7Mji9bN/5NgyqPZbQz+YX
lskk6ZUppyoYHVHMz83BoLxfeHpgkO0PL//mzn7eQpUJ26NaKr+zX0hbMHh5+dCbu/5lvRLhCQge
4KU9nXh52xa7zY+jSz4qXGxvvgOJ8KSFiuEhxRMC6svi7wVQ3+ZRts/cHKnef/DuY4DzCzIAJNLk
RAZAS5mMAeA33Qn3ACiHNSr+u+zdHUhLikNMTAwSUrPQzYKWVPp2Of4iG5UBUL0IaC5JygxCT1cr
kmJjUVbbgn7BRIiX/RTxY0YGoGNqzmESaQ5Ivc6fSGQAtJRPNQCqH1FpbGwUAgivRDWrdrR3dKJX
xl9wo3jJTVdnB9rb3y3Lt4MbkfHT54b4a5Y7IWPHQCrpnpLXLvNjx3th5iv8TZJTcw6TSNopXs/w
epX//RATQAZAS/kUA8BPCH5i8NYj70bmwYMPq3ejvm9YNf4p5Sca/tjy83VYNT5+em9vryCZTPbW
sPq4usaX0+Zh1bkrdlxmw7Bq/H3Tf2lYNf6hZWh4csOq8fHDH1JGNawa/9Aymhrmf/lvcAwPDwvG
WDXtfSIDoKVMxgCouo15CzItLQ0FBQUoKioSpMnhwsJCFBcXv54+0bBYebFh/veXpk80/LHl+V8+
jybKq6ar9lN9WH3/JyozUXn+ly8/Pz//9To/dZgv65emiw3z7RArr9o+/lds+EPK/NIwPy58nVxi
wx9bRmxYtb7xwx9SRjXM/07FMF/H+OmqfRMrIzasXl41zP+KDX9IGfXhjy3P//J5PrY83x/VMJ+u
OhYTDX9Ief53Kob5OsYP8235pTITlefDfDr/m5mZiYoKxZM/vDeADMAcZjIGgHfNc+rq6lBT8+ZN
bQRBEIR2wut3bgQ4ZADmOJowAPw+ADIABEEQ2g+/v4v3BnDIAMxxNGEA6uvrUVVVJQwTBEEQ2gs3
ACUlJcIwGYA5jiYMQENDAxkAgiCIOQB/KobfG8AhAzDHoRQAQRAEoYJSAPOIae8BGGjF2VN2KO9Q
Pnc+2ovb50/A1MQEpqZH8Mwr8vWb8tprcnHS5gBMTEzhEZ2mnEoQBEFMFZQCmEdMtwHICn6Ef/y7
/4Gzj4IUE3pKseTbhXjg5Q9/fy/s3vwzLB3dMNzXgrXLlsHF0x/hYf5YufhvuO2bqpiHIAiCmBIo
BTCPmMoUAH+RBNfYmOrHAPphZ3MEaZmp2Ge0D+38Nfk9Jdi+fT+6FQWAvgqsWquD6rpqbFixHNfd
g9Hc2YuulirkF/PfBnBAcdswW1QDrjvfRlxUEGyOWWG3/mac4b8kyMhP8MC27Zux0+QYKpsVv0Q3
Ojr6entIJBKJpBCvG9WhFMA8Yqp6APhLgviJw9+0xk8yTldJNBb8uALhERFYv+BruISWAmP12KZj
hPrXr6KXYffarchsZUNNBThmeRBb163Ctm1GqOrsx52Te3HxZToqYh5iz9HrCHvugD8u2YakhCQs
/elnhMZEYcNPi+AXk4J7Dja48ChAWOrQ0JDwxjfV299IJBKJxBpXLODzN7qqoBTAPGKqDAD/jAdd
ddyvHcL3K3Wwd+9e7N66Emv2nMHwSCt26Jm8/l344eYMLF29GdlFRQiNz1JOBQIvW2Od6RX01KbC
yvok7I4dRlBuK2LdHHDyniLI7zPZhStXnbBd76gwzhH7/XeCIAhCATcBqkYah1IA84ipSgHwz9R/
YEbeXYHVy5ajSjELox+rf/oBAdGxWLdwAeyd7+DOnRtYs2Qx7B+Foa+7CisXfAHj0w5wuXsXuzev
h+PjcGHOI1t+wB9/2in8Br/PDWuYXHgqTN+4cQV84zNgvGExbByuwGjLWpy55yd8RhAEQbzLeANA
KYB5xFT2AKgbgN7mMvgFRyjHFGQlhCMltxABz11ge+oUbE9fRERCvvJTZho6a3Hz2iWcYp95hr55
CuClkxlMzj8WhivzU5CQUyYMh4UGoLEXGOgshoP9KVx/9AqDb6e3CIIgCDXEDAClAOYJmjAAYm8C
HG8ANEWMz20s/XkNCptUSQOCIAjiU6EUwDxmulIAmiIrPgSxGYoWP0EQBDE5KAUwj5muFABBEAQx
+xAzAKWlpcIwGYA5DhkAgiCI+QulAOYx2pYCIAiCIDQHpQDmMdp2EyBBEAShOSgFMI+ZKQMgk8lw
//59XL16FdevXxfVpUuXEBcXp5yDIAiC0DSUApjHzFQKoKysDJs3b4a/vz8CAgJExQ2AlZWVcg5g
ZEiOtpZmwXDUNzRC9QsDH8PYyDA62lqFZbR0vP4FAvT1spO4b0A59gZpZxMr26Ac0wzyvv53tr2t
tfnj9mdsFAMDcowqZ+L7NdAvV4xMgpZGdmwbW5Rjn8ooqzS6METvYCCIWQ+lAOYxM3UTID/B+At+
3kd5eTlOnjypHAMCb5/FF9/+iPXr12P96qXYpG+Ftr43J+6HUBjhis8//0ZYxrrVq3Dk7DUMsECV
FPYCgUlvXkLECXO/jdXrVrKyq7HGwApl7Yr9nRSDbVj+/Z/gHPDmlw1D753B6s0GyC2tQ2v36x9F
eD/SGhwwPYIGZfGW3Ejs32GDdy3MhzHa34njpruxYtU6rF+zEmZWTuj6yGOL0UFUVtaygX48enQP
DZI37xcnCGJ2QimAecxMpQD4m6ZsbGyUY+Lk5OS8ZQDunT2Km77ZyjHAbPUPeB5VAkl3O3rl7AQe
G0Jzazv6+/sgkXajPD8HpVVvt2ZjXa/D/MxDYXhQ0o79m5bAySMW/TJFD0BfrwT1ddUoz43F19/9
iIw2oSieOB7B1afBaGyow7Cy1d3e2oLWjk52AXWjKCsDNU2KXx7kFGanIqekWjn2hpSAx9i1ezt2
m58WXmXc39OIjX9biNueMbA/sAP7Tt8XegJkHfVISUlBt7JR39XVgfLSYjR1SBQTJBXQ092LGqUn
acwIxJblxsIyu9tqhXlbOmSKDzGM9NQU5Fc2CmN97Ng01teguLxSGOfcP7cPW80uoJ8vYLQfp0x2
4kFINruwu1BbXY7qpg72wQhS2XJL6tqFedgBR0l2OlJSM4Q3LvaURWHR4nVIqWpCV3eXsC28N4Cv
u7CmWRjrZevu7mpDZmoauvvIIBDETEMpgHnMTKUAPsUAuF88hlXb9uPKlSu4ccMZJibmKG+R4rKt
CV6l1QMDVVi/6wBSU6Pw3ddfwGD7Tnz73WJE5NYplwDEe9yE1TnFa4Q5RVHPsM/2DnyeXcTDoGS4
Oh3Alz+tgMtTd9y/ehwrV27EqbMXEZ6Sx0qP4oKVPp5GMXc8UINde63g7/sUX3z5DXZt18P3Szai
rK0TL64dxfJ1m7Dip+9xyTVEsSKBQZy2OoCqrj5cObIHkWUdaC6MxK//5z9jjc4+LP3mD/hqnSmy
0mNgvEMf5ubmMDA9jtrmJuzatBArt+5AWLrCmUNSiV07TFCrNABNmcHYqXMUdeU52LpyFczMzLDL
6hTaOtpw46QV9uw3h76+Lnxi8hD0+Az+/LcfcO7afcXMkMF8iw4ym97+8aYhVinYW+ng25/X46HH
C1w6cRj72DZt26aH0NRiJAXew04DQ5jv04eJ7Q3EBtzGv/3bb3D92UscOmaFSnYs+PFap6OHJQt/
wouwfAQ8Po2/fL0EO7auxyp9S3QOfFTigyAIDUMpgHnMTKUAPsUAeFw6huVbjODg4IDNy3/GSZcg
Ybrdkd3wzmCt2+F6rN1pjphoX6zfaSJ8dtfBAqbOPsIwhxsAS3UDEP2cGQAXvHrigHv+8bhtbwqX
kBzlp0BzZT5uXHXE5lU/4BJrpden+8Pi3ANkhT7BiateKEl0x0YzW6Hs6cP7cOb6bRisM4CUT+ht
QnTKm180HGjMwh9+9W/YsccQ3/7l37D12F1huo3uHmQ1DiHwriNeJBTjMTMHf/1+DQ4cOIDvPv8t
rj14DhPT3ShXNv4FJOXYpW+OFmUjurMgGru3HkdNWQZ0l62DrcNNBEUmoTw1EL/577+F6QEL7Nz8
M9bssobLtVM4/1TdmHADoIus5rcNAP+d8GPm2+GX34XOdG/889//EeYWB6CzeiHWG59CSW4Sjhw0
hwXbtn/6+mdU11fDwuI0hkb7YWltjpfPH2HrFsU9HNKiMBgYmePyxeOwuRssTFuzfi1iq4QjRRDE
DEEpgHmMtqUAbnhnKkaGmqCjq4v2gVHYWujhUXwt+hoT8c1qPcRE+cL4qCIo37K3hsXNN78IyFMA
FmcVBmCkrxvmW3/G7YB0+D+0wx2fWLg4WsItsRqDLfkw2G6IBuVPDkQ9OoZV5ufY0BDsDplBz2A/
susHUBDqArPzt4Uypw6b4fzt+9i5Rgf1bNd7avPwMiRW+Izj6nSItZSdERcbi6QoHyxZtgatfXIc
2aSHuNIuuDva4EFgJh6fNoSOySkkJyfjtOUBBIaEsQC+D1XqBmC4CwYrlsIvq14YDb53DFuM7NEv
6URWeiZiwnyx4K9Lcf/uPSz5YTHC45Lg/fAK7C8/xYMbJ3HlRbQwn4q7dkbYbukExTc2iLMWRngV
l4eLp/YjtKQH9Qlu+OrbpYhJTIbrDQc43XiMA9s349LTYESHPMfvv1+N/JJc7NlhBalcggNWpvD1
dMOGtbvAq5b6RE8Y7LWG89XTuOXPf9hpEOs3b0Vs5Zu0CUEQ0w+lAOYx2pQCcL16Fs6eCcoxbggO
wi2+BFkhT/G3bxZj+5af8YOOBdKTw3DwzAWhzCMWcE4+ChWGOQVhz/Dnv3wt3AS4dvVKHLW7xUI6
8OqeHZ4EJ+OJ80l4xHP3O4LHV09h0eLFQtll67YgpUiRQw+9dQTfrDQWhrNCHuDw5QfCsP0JKzxl
2xPhcQVLfl6BRQsX4F6AYntH+9tgvH07clvetLIvH96NW95huGRujYSKXmR738AXf9uErJx0GO9Y
Az09PWzbZ4PaxjpYHzZHtboBYCSzdf/04yJh+35athrpNZ3oqEiH7oYN0N9hAN3d1qhracezK1ZY
s2kb1q1fB//YAvg+cWDrffvxyhFZGw7v24Hlwk2AK2BochaSgWE4nbFAUDbvXZHhyklDbNDRw9r1
mxGZXgLfO6ewYr0OjA318MXy7WiW9mDvz4twxPYGbM7YoK6nH3fOGGHRirX48acVbJ4aeD86hzvM
cAFy7DQ0QnIN9QAQxExCKYB5jKZSANXVb9/w9ksGgJ9gp0+fVo6JU1lZiRMnTijHWMgY6MfA4JsT
dXhIju5exW3wrXU16OjuhXxoCENDg+jrV0zn8/TJ3wTd0eFBNDfWC8uub1bdzMbL9bF5h5V/39yc
1tVWJ5RV3a/G13n/PGvJesYrxgfl6BtQ3KnX3yfDgPLZt5b6ajS0vXnMcGyYbWv3263d0aEBdLFj
OdDXjyHhzsJRNLJjKWTFh/uE9ar2tlcme/3Inzp9XW1COZnaE4ADvR3CNLnaPXa11VVo6lLcFCjv
Z9s5+HZ3v4r6mkpU1ih6FTh9bJ8Gh98sqLqqEu29b1ZWV1OFlvYuyNl3zTevv7cLzS0dwvFXPQXI
193CzABHsW7FXvF9GhbbKYIgpg0xA8AbaBwyAHOcmUoB8PKrV6/GxYsXcfnyZVHxG9mOHDminGN2
EO1+BWs2GqO9nwIXQRDaD6UA5jEzlQIYYi31pKQkhISEICwsTFT8s/HGYqbhLX6CIIi5AqUA5jGa
SgF8bA8AQRAEMfOIGQB6CmCeMFMpAIIgCGLmoRTAPGamUgAEQRDEzEMpgHkMpQAIgiDmL5QCmMdQ
CoAgCGL+IpYCoB6AeQKlAAiCIOYvlAKYx2gqBSD2IiD+qB9BEAQxe6EUwDxmqlIAAwMDwonDTy4S
iUQizT5JpVKhnuY//KWCngKYR0xVCoDDTyoSiUQizV6Njb39VlMyAPMITaUAxvcAEARBENoHpQDm
EVOVAiAIgiC0D3oKYB4xlSkAgiAIQrugpwDmEZpKAYx/CoAgCILQPigFMI+gFABBEAShgm4CnEdo
KgXwIT0AWdEBCInPU44BSREhqGyRKscmprUsHS5PfJRjgLS5Ak72Z3HixAlcvOiC0vpO5SdARW4M
Tp88gfNO11HdQz/dSxAE8TFQCmAeMZ0pAOcD6/Cf/vNvUCtVPHZiqbMGnom/3HNw5/hu/D//8Gdk
1nUL4zlB9/DXb1bCxcUFzpftsfDHJUgo7URDbjAWLV2H+0+f4tql4/h2yVqUd715wQVBEATxfigF
MI+YyhTA+OdMHzqexMqVq3HA9oYwfspoG4Jz29DXWY5j1nux54A1curetOY5/S0FOHL6IgJf3IHV
+QfCtIyA+zA9cUcY5sS7OWKHzS0URHngm2V6KKhqFqZnJ0UiIy0Rtx56CON1eXF44R2M6NBXuORo
iz1GxkjIaxQ+C391HXv27MENtxCMCFPoPQYkEmnua/x7AKgHYB6hqRTA+KcAVG8C5G+aUr1m8vpJ
a7iGpsDWeCteJRbg+jFThGeWwEZ/DU5ceQxXFwcsWr0H7QNvTsiwB3bQt7qA3JQQfP/dSnSMAoWh
j2BkfVlZgp2kBRFYv/GAMBzoeh36ujuw6udVcLrvhdHBdmxatQJV0mHcOcECvEckju1ZinVmjvC4
chIrDI4gOfQFfly0Br7+Adi2VQcR+Q3Csvr7+4XtF3uDFolEImm7JnoTIBmAecJUpQBkMtk7vwVw
/YQF7gYVor8hB3p627BzhyGCw4Ohv3UvVB31hmuXI7GmXzEyNgBzvWVYuWkbtunp4cvf/QfuhZWi
JvEFTI7fUpRhpHtfwyYTO1QUZqFlQDFtsLMVO5YuxKOYCgTePYsrtx7ioKk52mVDOGlpgLgadsJ3
ZmOziRkcrA/gjEuUYka2zvYemWKYIAhijsONwPjfAigpKRGGyQDMcaYqBcA/G/9rgBcs98DxWZww
HHb/GDs5/lcklDfi5K61OOLggofXbbFk7V50yBU9AMXRz7BK11QY5tQmuWHReiMkhbpj4RId+Pr6
wvWxC3749geE5TUhK+Am/vztUjzy8kfQK0+sX7EKobmtGO4qxFf/8vfYf+6ZsBzTnWvhm9uNkcoo
/LB1NxKCPfDTopXweOmFzRs3v+4BIAiCmOuMNwDUAzCPmKoUgJgBSAj1Q2KestyYFNcdL6G8cxQD
PdWwtTHF/kM2KGySKD5nZEV7wy8mSznGGOuF67OnyMnNwgkLc+zfvx9HjtizZb4xH6lhnjA13Y/9
pkcQnlamnArsXPM9XBMV6w7ydUdJywBGu6pw1/WlMC0u0AXGxsa45xWFN51hBEEQcxsyAPOYqUoB
iBmAGWG0D0+vHMK2vUfRq7q7jyAIghAQSwHQUwDzhOlMAcwII714cuc6sqvefrqAIAiCEDcA1AMw
T5jOFABBEAQxuxBLAdCbAOcJcz4FQBAEQUwIpQDmMXM+BUAQBEFMCKUA5jHTmQIYGRkRXhA0WzT+
PQUEQRDzDUoBzGOmMwXA3zrF5+WfzbT4i4r4iU4QBDGfoRTAPGY6UwD8RFN/5eRMw090vh/cCEy3
+Lr5xcXFh8XKTKf4cZgN2/GpmqnvcTZI2787TWsmr+sP0fh37880Yj0AlAKYJ0xnCmD8iaaitaEK
iYmJqGhuV07RPP3SLrR2KH5NUIUqCPO/0y1+UbW2tqKlpUUYFiszXeIXfFNT04xvx2TEt5/vh9hn
c1n8/NX2707T4seCH5OZurYnEt8ufr3zVOhsglIA85jpTAGIGQDfexexcPkq6OnpYd3aVbC/7Ynh
KTDIsS+csN/uze8HcNQvzL4Bvq1jwoksts+akioNojqGbW1twjD/jG9Hv5zflzAKybj5unskGGLH
TtYrYcOKsrJ+OYYGFT+6pF72Y8Xn5xUT3w4+LB/ivTRjbBu6Fds0qPjOxh8b/lkf24b+PhkG2HYP
9PWyaarPeiBXzicwNopeqWLb1ZehKamMVA/b5h5pL0bVzqEheb/yM/F5f1Fs3l5ZPwblA8I4/w7f
KaMuiRQjahswMjz4zvepKfHzV/276+1T/o6GwBj6eqWQsm0fHhoU9kNsGR8qvvyBwSHI+2XCMBc/
Bzky/t3y9csUP8bRJ+M/MqM2v/BZP+QD/cI5M8j+9rNrTj7QJ8ynvp7Jih8Lfkz4sVFN49fPCPtK
RobeXC+Ka1FRXqq8BhVl2bkrH2TXWi+Ghtg19wvnrWo5Yp+pi6+HX++z3QDw40YpgHnCdKcA1E+0
1sJwLFy8GmVtyh/f6W/E6RN2aOaLHZEi0Ncd/jHJwkfS9gYUFWYjwMcDOeWKn/vFUDf8XrkjKD5N
GO1sqkRqQgJS0woh7WmHv7s7vIPjwbci0fMS9tneFMqpUBkAObvIcyI8YGh+Gp39w+hV7TvbT76v
b/ZdMf6mMn97XL2salj4XCn1z7jGG4DB4RGkBz/DXstz6JYPs31QlmcBbVDaBpebV5BZ3sICrpRV
xMPIjH6FO25+7DgPvbUO9eEPGecXuCKISNmy5PC4eQa7LOzQPTCMQXZs4r3vYutOE9S09wkVu2p+
/v2Gez+Cb3QagjzvIyipgAVJXqH3YHhkFLkJATDcvQNbt27FuVvP0CWTC5Wp+vrVh1XjimE2XfVX
pIwg5TjXawMg6YVc1oVnt+yxectW7Nxvhuj8SsEEqM+rmu/t75gPK6arpvG/3JQVp4bixqMX6GPD
fL3CcoR53h7m6x8b7serx9ewdcsWdtz2wD00kZ1javOpLVs1PNG63y4zfp63DQAPsJ0NZbA9Zioc
c0vbC6jr7ENtThSuP3CFjH2f6oHufcse/xnfPm4i/N1d8Coqk33PLJiz7z8r0gObdXejuJGdv2y8
Lj8Oupu3IC6/jgX5vtfL4QabH8N7LwKQEesPt6BYxAQ8x4uwFBZk5WrreXc71KeP/1whxbj6528b
ABb8h2S4fNwS192jMDo8pJyuXJb6MNNQvxTPH95AUlYhHt9zRnZlm2BuVctS/54m+s4UZd+Mq757
bTEAlAKYJ8xkCiDg+ikcsn0iDA+xSjstJRWlZVWQybphf3AXdptbYY/eWpy7F4BUf2f8428/g/l+
Y3z7w0ZU1jfA3soARgesYaC7Gk5PI+F72xL//scv8cwjCC7XbGFqdRg6qxbB7n4gMkMfwOSsWA9A
j/C6YAfLHfin//gcXglFbGMGhMp0dJS5f7YfI6zC6O2VsVYdG5exv2wf+Pgwu5CF8dERoaXV18/m
YwGOtwAH+lnlx1oGIywQ8lbOoLDfclw7Y4NnIRmsEpKPMwBS4a2FZ0x08S+/+xL+qWUYHexnLboB
RYXR344dOqvgl1Gn2HhG2ONz0LW0E4ZHWKDuZevjZmaAtdD6mSngrSwZ26ZBthwZaxkOseAu/GUV
rkzG9ksISoqWnMoAAMM4vmsx/tP/+j+QVtnFxodwaOvX+E//998jr4m39lirku0zNyC896G6ogTt
HZ04YbIJF91j2bGUs89GUJrsg6+//I5V+L5IiI/Dfp3VMDp2QzBjo2x/eIXaNyBn5wNrafX3C8eY
t6T40xmK1mIfa4FJ2fay/Wef8fOJByA+fYiNv/4e2HnKW2cKA9AjtPx9bp/CgtW7kZWfD+8nl/C3
hctR0MRN5qjQW8GPEW/F8pbxyAhblvAds+1gy+af8+PRr/wu5UMjbL3DaG2sRnldM7LCPWBtq9iP
AXZ8+br5NvMKkA/zc8H96jH8bclGhETHICLwFZYt+B53/VLYHLw3QPE9DbLl8vOCt6i5OZH2vr1u
qbBufozlrKWsaDHz48UDLz8mw+za4sfptQFgJhHDvbDUX4s9x52Rn5cD2wPboHPgArIjXbHJ+DD7
5ti3yfeXHVdu7AbY+oTWuHxAmJ+fZ33sGuUtc/7d8nNnmJ0rEmZqVNftpaM7cfKuPzsNhoXlBd0/
xSt53A1UmHCv69bC+NPIQmFczo4tXwefv6W+CrUtHfC8cQQWjg9xz8EcJ9m1zRG+f3YdDLHrpY9t
15DyHOlm56RceGpHLhxjoTdD+V0pzhnWSleeD/x76uvl19LbBoAbn6biRCz54vdYomuCtv4xdm3L
4HTyCIIzqhD94hbsb79SbAdb72B/L8pKS9DZWIFtW1YjuriDnTrsu2DHiV/3r78n3ms41AVb64MI
Sa9gc4++ddwU56pqW/n3LkGrFhgASgHMI2YyBRD18DyMj9wQhmVNRbAw3o8//fVbPH3pie9+/Wvs
2muM3ds2YOVWK7x4chlmFxRmwXiPLm49eoiv/u3XMNpnDIOta7HewAa3naxhc0vx4z6Bz6/DcL85
dq5bjK0HnZAW/BimIgZA2idHfW4ErE46ITXyBXZbngW/PCWt5ThqtgXLli2FjdNTdoJ34ILNTiz7
+WeYnnRGZ3cnbtiZsvHl2G5xCs3dElyxs0RYdj26K1Jw+qIzCjLjsXfPdtYiWoOthidRUZqFv/7D
/4c/rtqH9l5WgXd1vDYAMtbir84IwkHb60gOfQZD6wtCBdvZUACL7euxcc1GfPbtj8iolSDK7RLW
rViPxQu+gRXbthjv29iwdj0cr3kgOcEHO3boYLvRXsQV1aG+IAGGu7Ziw5rVuPIkAI1VhTDfux2b
N6zGiYv3IOnn3dNqBmBMjnNH9+OvPyzBLa9YyFsLsGPTSixftxG51a2473gcutv1sG2HMbIqmhHx
6i68IpJx+YQRrnslsBqUf+dDsDXaBLuHYfwwKxiRMXNXg/LsCOisXw1jU3ukZyVi3/Y1wjG84hGJ
lrJkHDp+AlJ2jgS5XseTgDgEPb+CLaw1u3rxTzh/+yW62hpx+tAe6G7ZAJMj59hxZwGRVfoKA9CN
YeYAQp9exXfLNuJFYAxq6upRVJiLDkkfovzuYZueLnYYmyG1vBV97eWw2LsRy5Yug+PDQET73oPD
nefCOXrV0RbRqdk4Y6ULPZ39uHnzJh6+8IKd8Sr8t7//PY6eOI6bzxTB66b9MbiFZQgVez9b5sal
SxFbzoylEmlrHeoa29g+OSm+p+vuSIh0w5qVi/Hzhi2IKapHgs8tnHdxY+sewuULp5CYXQgHm33Q
2bwZK5asQFByGWpZ63r3zi1Yv3oNrjzyYeZhEN3qBoAd49NmBthsZI3o5Cw0NtSitLIGuVEeWPjT
AmzX2YCN+gfR2i1FsOtN6G/Zii1b9PEquhAlqX7YuG4NDh6+iqzcROzfqwedHfp4GprMgpkMN04Y
s/VuxtdffIarntzoDQlmy+/BRXz+7QIccrjNztcBHDPdiQULv8er2HzEvroPffbd8XW8CM9BRWYY
nJ/5IODxBdhcd8XLWyexYOkqbF29FEft72FwZBget05h6bKf2fVsivKWbjw8fwR3fJORGnAPh1mZ
no5a2FjtwfZtW3HhibdwXV47awldnS3QN7JEWWO3YBzUDcAY++/plVN4FpSIaydN8CSyFJLaNPzm
7/5f/LB1L7Ys+j3+5+dr8MLjPnQ2rsfJ45dx9eYVpGTlwcJgJdZu1sGaZcvgE1+CRP+77DxUnCM3
rjnCw+MJ/uW//f+w2sIJdRVZ7LjpQ0dfD0/DUtDTWgMby53Q2bIeB447ok0qR1dH+6w3APy4UQpg
njCTKYCBthKsWvYjnrOLhbd0O6qL8LevP8cDL19sXrwUPrFpiPJywbEL9+H/1BGWl54K8+3Q38gq
Y0+s+2kpQhIyEOLmjJNXnuGhkzkOOXux1nI1vvrTHxCaUYiXjtbYYuGAJHbhGp68Jsyvgp/oPNv9
1N4MP23YA9dHV/D733yB4m45HpwwxIY9J1FSlIMTp21ZUDyANTqmKC4thu3pkzh76jDWrd+FktJy
HDbYhJMsmJruXIZncVXoKQzF+l2mSAzzwG+/+gFp2UXYsWoRnF9F4CyrIM/cDWDHYRAdaj0AnHun
jbBkizFc7znid7/7GlXMJFy3NoARa9GVF8Zh5cqV8PbzwZqfVyG5sATONvo44PAE988YYKXhYTRX
5WLhn36H3VYnYKyzDAvW7cX1U+b48tvVeOLxGAGJ6fBxPonf/v4HPHB7gie+AeiS8q7xtw3AScu9
2Gd1CCcv3ES031NYHDyM3fpbkcku6Mc3zuDo6XNY+e1vcfDqC7heOwy7e964ccZEaQD4PQw9MGOB
7kV0MVveCKKYSdDdpgfrSw+RFPgAf/7qGxRVN8BKdzWOXnyG4px4/LxoDR4/voWVG9aBhTI8dDCF
7V1vXD+6DbrMLJTlJmDN8rW4c/My/vJvf4bz48e49+IFGtulQstKZQB4LwAnIcQdB5ihXL5oCazs
bqCuLAPf/ObXMD1mC/3V32OZrgUuHjWGvoUjSvLTcOz0eTic2AuDw/bC/MY7N+BFcDRWL/gV7gdn
IcHrOvSszyGGnY+b95xCEQuYa7bsRWdbjfCz02nV3az1N4T2ykRs/GkrqmVjGB7ogfPZg9DbYYCH
QUlwOaWH5bus0VCWjpULFsInLg8hT5ywRtcKty9ZYsfhC2zNYzDasQ5+0cnYvORz3HSPQTQzDpsM
DuDi4b34esF6PPV4hBdhMUJPAD+HFd8duy57B5j36sXzO45sGfpYtWQp7vnGoSzpJT5bsAypWYUw
WPkjLr2IQbz/A1ifOAWjzYuxbOdRdp0547Mff0Z1UyN2L/8OP+vsw6mDe/DrPy/C7esXsW6LEUrL
S2C8ZREcnkW8NgBet+ywzdgSh4+eQHJiFKwOHoLJ7s1wZQE/zve+sI69m5di8XYrJIc8w87DDswI
XYGNsxtcL1th4+4jKMvPxMblK3DN+RpWL1uH7MIy9r3vwzYzR7RWZWDD0m/w9ZL1SGOG89ahHfjr
wrU4d/oY/v1ff49b9+7ju//4LeycXeDy/AnK6jvQL3tjACS9fRiTNWHDj1/hxNVHOGLADKfecXaY
h2CquxG3fRPx7NIhmNk/Y9/FSXyxZC1qm9pgbriJmZZkmGz5CZceBiPF5zb7vk3Z92QFfWvFObJ3
xwZmnlgZZkY8IpNhsWERu36NcOqQEf79Tz/i4Z0r+NOvPsetJ49x3/MlWrpk6NQSA0ApgHnCTN8E
WJEeCT39zVizZg309+zDjl37kcEq07TQR1i3cTVWr9FBUFYpssOf4hJrwXJOHLNAUlU3c+MuWLth
Ldas1UVUfhUi3C/iimsoC0JyONuaYsOmTcyNb2aVjQfy431g7+IhzK+iq0eKoZ567Ni4BIbmh3Hk
2DGs+eFLnH/gjTNGeiygZQrlJF2NOKS3EaduBgvj/b3tsGetkIMXFMtL8XCCkclRmO7bjIA8Fgiq
YrDF6ABig9yx8+BpocxpKz1cfhkB5+OWeBKez6YMseCvMAC8W3Oouxbb1i3CPosjOHrMBiu++5Lt
rx9OGe+CW7wivWJhaoQbzpexbTerwBjJL6/DyuEe7l8wwekHwRhpSsOff/UHnLpwBedtj8HQ5Dgq
6hvw4vFtnD5tBiOzU6hqbIEvCyDn7A9D35C1mJp60KcMoCoDcNRYH5cev4LjcTPW+jHAq8BAGG7f
iJjEVBjpbcG5Ky4w110FK2bIXrBWnONjf3a89ysNgFxocd06sQd7Tt0RtrOvtwuRHs743cI1CPR6
CN19lmzqMLatXI24CsX9H8dYy/bMOTts3blLGHe9bIGz917h5llz3A9XdEce2LwCT0IykBDsBYdL
ttDR24Okgnoh1ywYAHZuyuV98H56BwklrcI8gAxbly7Bcbuz+PYvX+Hc5SuwO34YR0+egcG6DXjG
WoOctrYmuJzbj31nFL1EBww3wzMoAju3rURBB5Ab7IJdNpeQEeoGw0MKI3nMdB+OHz0GixOXFb1G
rBU+3NuCHesW42G4ogu8o6UOF623YaXZeTx2ssCJu4EYqI7H8lV7FD873VuObRu24ewZS5jb3xXm
Md29Ef4R8di/zwBV/J66ngKsW7YWOVX8u7yFU6wVu9fCDs2Sgde9N9JeGaTtNbhz6zbalfGltzAc
X327Bt5ej2B4WJEqOnPIgBlQN2Ym9uGg3UX21xhrDY8h5MV17GAGhx+vnz//E4wPn8Hli2dhvN8S
R82NcdhRca7fsjPDuUdBrw3AyxsnYWR7E89vn8fq1evg4u4HW7OteBYQCwdrI1idccSlw/uxeudB
JAa7Yv+pKwh6fhk215/j8eXDuOSZKCz3vNkObNPdhn3WV4XxxlQvrFyrOBf2LfotfrXAQBjmQXat
/gFcveKEPdu2wzs6B1kJIXB0Os9M5jb4xRYIKS6VARhkxyIn/DG+W7gINseO4tgRS3z21x9Q1NSJ
sweMEFrQgpD79jj/JI4FeUfsPMJNGHDIZBtehsbDYv8O5PHXhQzXQH8j+55sLWB29rZQxnTXRoSm
5+PYfmNmyAuhu+BLGFnbsuN2Dnq6u9m0akT5ecDh4ilWDxkivaQZ0p4uSgEQs4eZNgAqeB71Nbzv
m/9hwUS4If098Fw6v7tXDJ47fB/9bOFRrpewmrVOVDRl+WHBUtb6e3obC1mlccLmMJasN4C35xMs
Xvg9jp84gR+Xb4Sr+3Os/fF7nDh5Ggu+/REvorJw87ghVmzah33bluGLtUaswnuO9XsshOUeNFwL
hxeRcGEt+kVrzdAk6UNPV6dgAIbY9oc9Po91O48IZTk1yZ74YcUWPL7tiJ8Wb8Lxgwfwd7/6E+Iy
s7Fz1WKYsQp60Re/wx67h7hrtwtmjk8wNtgNyx2bceD0BZw4sAdHLt9HgNtdWB9jFdwJUyxcrgd3
t6ewZKbkquNRfPbFEmTVdGNAJn1jADCIA/psWz1T4O9shv/+h5/R0V6FDSuWwC/QHwu//gzOLveg
+/PXMLZ/hOdXD8GOtdQvHTV4fQ8A783paSzEpuU/YI/lIThevIh9LHj/6ofNCHrpguVb9IXg9/ic
OZas3ILjh0zww2pDFBbnYM33f8PBY6fw5R//GWdYy+vh2b342yo9nDxiylrtxggL88cB00O45eyI
z//8DXyTK4R7JQQDwCoqnkMOfWSPP33xHY7YOcD28EGs2bQbOQWFbL824KjDFVgbbYctM3nRHlfx
LWv1njhqiWVb9iHA+wm+/3IhTp44jH/+9W/gFxGLzau+RWr9KDL9nLHV8iyK4nzw2//4Bgn59cgM
uI3/8n//HXySylmAUDwhMDg8iuwIV3z33bewOWOHC/b2WPz5b7Hx8HXcPWsIk/OPWNlumGxaAgMT
a+zeugqGJ1yQFe2Orz5n6z5+CP/I1h2Zmgf9Vd9Az/wEjHRWweSsM3ye3cah4w44y1rHX/+4FXUS
OQsoyt4bbj4GJbDbvxFfrdTFeQcHHDDQhfGJ60gNefL6PDy0bxNsrt3DrtXf4bDDddgYb8VCHUsE
uzphzS5eZgQ32LmyZZ81rtvbQM/yDLJSQrDk24WwsbHFr//p72H/LIpdnIp7ANycrLHB2hn12d74
L//lvyOvqQsHty3G/ZdB2LHybzh0/hqOG+vg+00miA98DIPDDvB7dB5WTo/x/IIZfv23FTh14hAW
rtFDanoKdJd+J3z/qxb9hAuPg/H8yiHsO+gIR2tDmJ27j4gXt7Bqoz5uO1/Chh37EBYdicNmFsz4
OOO7v36OG57MhI4OKwwAOx8w3MfM6kpce5Uq7D/nspUuDjDjfNFcH5v22Qs3vX63yABOdsbQOXBS
KGO6ax08I1Jg8PPnWL37IEwNNsDguDOyYl/gm89+YNt8GP/4q39HTEE1jmxehl3WTrhx7jC2Glnh
+vnj0LM4iahwP5ibHsXN6+fxlz//DaGZNazx0E0pAGL2MJMpgJmG36STmRCJOObi5f39wh3h/dJO
BPn7or5DgpQod9jbn0dSHt+3MWQl+rBxe4SnKFp3+enhwrhXZBIzKiPorC+D8+ULePziFaIS01Fb
UYSIuCThWCTHhSOjpA6NRRlwvnIHlS3d6FYagP6BfmE7EjKLhJsH+U2E/ZJ2BPr7oaGtA/6ud3HF
+S58goLQ1N2P+qJUXHBwhNsLT6TmliA/IxaJmQXCTUndbVWscrTHpRvP0dw7gK6mcty7fQkOF66g
oLIJvV2NePrwOs6fv8DmLWMmSfGInMIA8Lc09iIpRrGtLVUFiIxOQ5+sA6FBAWhlpiU9kh8DBzx9
9ZLNX4rinBRkFJQhOzUW2SU1rCx/FLBbuFte2l6Nhy7XhGPoz4JpYnImyopzERoVAwk79oMDPfB2
uwN7Ryfk1TSzinEYOXGBOO90Dd6BQSivacQlm53YaXECN67eQW51G+R9XfB5cV9YZnh8JgaUj+ap
DIDwuNfQIPKSI4TvxuGyC4pq2zDKjEFbQzGuO9nj2l1PtLFjMzrcj6jAJ7BnxyKzpAEjLIgH8GPt
8hABYRGoqKpGZFggOxdkaCjPRWRiGmQ9HXh26yZic+vRXhiKpas3o1HG2s3K60XxBMQIqgqTcPGC
Peyv3kRMYjLSs4uQlxGHhAzF99TVUoGb1+xx9cEzYVuGB3rh99wFV10eITAiGg1VRdDbuhy2LEjf
cnFDe/8QOhpK4HLLkX2X11BQ0SDc7PkmBSBhJkCG4X4Jgr3dhH2/88QH3WxdrdUFCI99cx5mltah
jp9D5+1xz8MN4YkZqCzOZmUShZtE5bJOvHjmzI6LMwpqWllLf0T43s87XsVLb2/k8O+Z30DIlleS
nYywxGz09TQjNDACPew6SogIQDE75rVFKXBUriMsIU24HmJTslBemIlkdjzK89Pw+IEL29bLSCmq
FV6QU1OSCgc2z2OfUMjlMvh4uKOsVYb+9kq4uXlBKh9EdNAz4fuPy6nEICsTGegq7O+rwBjhBjx+
M6HKAPR2dyAowB/V7HrjT6DwxyQbynIQFJmAyrx03HR+hPKKMjy6eRf+wUGIS80U9isxNgKl1fVI
jgpgZvMKLjk/QWNPH4bZ+oTrkZ0j/qFhwnJLUyJx49ZzdMkkeOV6kx236yioa0c/u2683Pj+OSAq
KZftj1y43ikFQMwaNGEA+FMAk+0BmAl4VxevMPjdva9PchZ8+QUqE+7UVnQt8C5mXrHLeX8iY1j5
XPmAXLEvo8pnrHlXPmeMmYHhQcVdwPzOdV6W33UtZ8G1V+256TZ2DHmFwNfLHzV763l15Xb09rK/
yh4Ofvc8v+tdxu8+ZvAKk99Jzufld4nzefnd5ArGhLI8KKjgAYMvV/UiMn5HOZ+HSxVE1LdVyu82
H2b7xoIqD2r8IuctXM7YqOLpBn5nupyZljfvAVBuv3JblKsSjgO/o72PVcD8Rjf+Od8W3o3M4Xek
83n5Xfccvq/sX9y6cBSuUTxlwu8o549isW1R9grxO62F5/7Z+lQGgA8Ld+YPvvmdh37ldvEnOxSM
Kp8e4HedK6YIz7az+RTHekwwI8Kd5cP8mCu+W/6d8m3myJi5sTmwAzfdw4UAKeyzUnw5ivdKKBhi
14Hw3Lva9/RmW9j3xM4Fvi3KIysck+GuGhw6ZIVSZX++8F2+/m4V3yVfjroBENbPto8/ginAtovP
J2z7W+eh7PU5xFfG90t4skBZht/1/+Z7URw7ufKg8zd5qr4rLr6fw4PMhLF5+BMQPCXBH2flj4u+
PgbKdfB95tea8GQKOw786QAVimuMv1dCOQ87/hLhvBtlgVTK9p0/lcOX34Mh5YtChtg8fJ9V5+To
yJtHLQUDwI4NP6783OVPB/BrmK+Dv7uAnzv83OXHmz8FwuF10xAL0rwMP07czPJ9UcDKKb8n1TnC
z1E+TfGejFF2ffD3P/DPFMdNePxQOa54mqJHKwwApQDmEbMlBTAT8BOdi5/g0y1+HHllwN8GyIfF
ykyXeEXZ3Nw849shJt4r8yHbxbdfqPBFPtO0+PZ0tLWgvrFZCB7czIiVm6yEoC4yXV38/J2t391M
iR8Lfkxm6tqeSHy7+PWuDT0AJSUlwjAZgDnOfE4B9PNuf+X+cKm/pe99w6px9enjpV5GvZz6dL5u
fnFNVGY6h1Xb8b4y0z3Mxc+Z8dPGl+fildb7yqgPq4+rS2ye8eXVp/MeAvXx8WUmNyxV7vv7y3PN
lnNoKodV4+rTx4+rl+HH5H1lZmKYi28Xr3e4VL9KKjauGlbXRGU+ZJjXx7y+4aZofB0sZgAoBTBP
mKkUAHfBfB5uHrjq6uomHFaNv6+M+rB6+fHDvLdi/DD//GOGucZP53/Vh9XLqIbVp09UfrqG+V/1
6Vxi5VXT1cvzv+rTZ3qYi5+DfNqHlufD6uX5X/XpquHx5WfLMP87URmu8WX4X/Xp2jbMNX46/6ua
rj78IWVmYpj/5eO1tbWvp6mGufiwqpxqWFVm/PSPGebi9TZPGfIeCG4M1BlvALhJoBTAPGGmUgBZ
WVmCVCcon3+iYf6WQU0O87/zdZiLHwvVdNWwalxsWL3Mh5ZXjasP879iwx9SZi4Pq47pRGVU4+PL
q09/3/D44ytWhg+rxj/2+6Dv793vTzWuGlYvoxoeX2Z8edX4+8qrl1ENq0/nf3kwz8nJEepdXm/z
HgF1xHoAKAUwT5ipFADvYuJ3xRIEQRBTBw/4qhb9hxoASgHME2YqBVBQUCAshyAIgpg6eD3L61vO
hxgASgHMI2YqBUAGgCAIYurhNx9+bA8AvQhonjCTKQB+YhIEQRBTB6+vCwsVLy/7UANAKYB5AvUA
EARBzF14PUspAEIUMgDzD/44UENjM+rqG1Hf0EQikWaT2HVZV9fwVlCeDJ+SAqCnAOYJlAKYf/Cn
Lyoqa9DXz19Awl8YQiKRZov4dVlVXcfqWf7D2JOH19eUAiBEmY09AMWJQdi31wiGhoaC3AIiERzo
hZLmj7sg4l4+wCPPKOXYMHzuP0ZRneL34ucz3ADwHgCCIGYnzS1twi88agJez1IKgBBlNhqAZw6H
oGt+DlFRUUyRKK6sRWNDLXr635yk4xlpL4OdvTPU13jbagv+l//rNyjr5O8bGMG+RSvgk1Kv+HAe
ww0A72okCGJ20tTcqjEDQCkAYkJmYwrA7bItztzxE8rzX9TjuD+/h/L6Jjx2PoPde03g8coX545b
Ycf2rbj7KhpR7mfx//5//4Br3glCec6jS+dgsGsnjA7ZC+NHNuoiprAdOVGeMNTfhV079iAouQKS
hjwcO2qF3dt1YXneGfdv2GLNug1IqezESG8LzvLPdu/EI/8UtpQxPHC4htLWt1+nqU2QASCI2Y2m
DQClAAhRZmMPgP/N0/jNn7/GmjVrsGbTdtS0duHwAQPEZxdCf8NCuMakwdvpKL75bgOeuL7Aq7A4
1OZHYf2GnShrf9PFf+P0EbyIysGNE3vhGp4Ahz17EZ3fisTQZ7C1O4fTljvwtY458pL98ccfliM5
PRPLvvgtzj4MwMubx2HheA93bczw48qdOH/eFn/87W8QmFmP5roG9A8qf+dTCyEDQBCzG00aAF7P
UgqAEEUTBkDTbwJ0vWwLh8fhyjHOMA5bGSIhMw+HrPejQQ6MDPTg5eO7cDh3GuYWTmiqzoGJua2y
vIKbpw7iXkgRxnqqoK+zCWt+0kFKfg3unrfBMduzOHfMFF9tMEFClBcs7W8I89iZGiKnjV2Aqf44
duYyDmxdje37D8PBwQF7t+siJOPt/dRGyAAQxOyGUgDEtDBTKQB+Qk6UAnh47jBO3w1WjnGGYbJX
B9FpOdhntA3VfWNIC/XEiXPXcP+OPb76dhOKSouw/LO/sZZ+tnIewMnaGE4eScJwwksHdjL+X0gu
rML+tQvhcM8Vdx2s8Kuf9BEb7o6d1nZCuYP6mxBfNYiyiKcwtrmJ4OeXsHX3Abi5PoS+vik7sWWI
CwhFs2RIKK+NkAEgiNkNpQCIaWGmUgD8hJyoB6A8LxPZpQ3KMc4oUpPj0NzeiWT2V8oWIe9tx6M7
V3D+vAMyyxTBLMjtAdz9U4VhTmFGCgqrWXNeQA4/z5doZZvcXp0JB3t7PHzmhqC4DLQ0ViExI1co
lR4fg5beUUiaKhCfpnDNwZ6PYM/Kp5XxO+fHEObpi4but/dNmyADQBCzG0oBENPCbEwBEFMLGQCC
mN1QCoCYFmZjCoCYWsgAEMTsRpPvAfiUFAAZgHnCTKUAqAdg5uAGoLK6Vvh+SCTS7FNNbT16JJpp
IPF6llIAhCiaSgHU1NQIwyrIAMxe+G8B8N8BqK1rEP6SSKRZJHZdVtfUYWjoTVCeDJQCICaEUgAE
QRBzF0oBEBMyUymA9z0FQBAEQWgGXs9SCoAQhVIABEEQcxdKARATQikAgiCIuQuvr+lFQIQolAIg
CIKYu/B6llIAhCgzZQAoBUAQBDH1UAqAmBBKARAEQcxd6CkAYkKoB4AgCGLuwutZSgEQomjCANBT
AARBELMTSgEQE0IpAIIgiLnLp6QA6CmAecJMpQDoKQCCIIiph9ezlAIgRKEUwPyD/xYA/x0A/oMj
/L3jJBJp9ohfm9XV/LcAhpRX7OSgFAAxIZQCmH/wXwOsev1rgEMkEmmWqaa2QWO/BkgGgJgQSgHM
P7gBqG9oUo4RBDHbaG5pg0TaqxybHLyepRQAIQqlAOYfZAAIYnbT1NyqMQPwKTcBUg/APGE2pgDK
ctKRVVKvHPtERvvg7+GBxh7F+vra6xARHI83p/n8hQwAQcxuNG0AKAVAiDIbUwAPzx3GqTtByrEP
Iz8+DH6xim4ugZE2fPb//G/YYu0ijDan+2PNjzuh2OL5DRkAgpjdaNIA8HqWUgCEKLMxBeB62RYO
j8OVY6wxL5fC485lWFpaws7xAQbYIhpLUmFtZYUD1qdRUV8Hy41/xW8+X43SVmWIl9XBbPdurNq4
EQGZ9RisSsD2dQcgH5HD++F1YVm25++gb3AMWfH+uHb5EvabWCI8OQWOJy1w8sp9YTFdtTk4etAS
B884ol02Akl1Dp499hc+01bIABDE7IZ6AIhpYTamAMYbgL62cpw/fRjnzp3DsoXf4LpvBE5uXYmd
lmdw585NROcUwuX0Xmw2PM2CtPLRGWkV9u8/jrSUCGzfY4HS7EQYbrFmF1UznM4eEZa1atFXcPJO
xO1T+vjR4AieXT2O//j953B3d8eGtSsRFJ+EvcuXwuzYWVgbrceqHQfR092CnGzFxaGtkAEgiNkN
GQBiWpiNKYDnTra48iJROQb01OThkNk+WFlZYsVPX+PQ3WA0FMXjmKUVjh46xgJ1GaI8buPisxjl
HAxpNXbqm4BbjIDb57Blsx7MjezQ3lyFE5b72bKssGbptzhyxxf3rx7Fq6w2drZnwcT4mDD7nXO2
cLpyDQv+8BmsrK1gdcAEWwxMMRduWyQDQBCzG0oBENOCplIAmvwxoGcOh7DZ+CQCAwMRGBKBwAcO
WLhkE2JiYqGzagH22N+Hr4crgiJjcGznGmwzd0ac502s2GyB5i7lyS2pwKb1O1DNR4cl2PDF/8Af
FpoiJ8YTC35YLSzLYN1C7LvkjlsOZngYVYbBqmjo6ZkLs581348HL0Ngrrca97yC4Xn3PI6ccUGf
pA15OaVCGW2FDABBzG6oB4CYFmZjCqAkKQQm+42xd+9e7DU9iNLaBjy/cQb7jM3hcNEJkVnlKEoO
gNHefThocx4N0n7IW4phYXIAmRVdioXIO+Hu5oVOuWK0Kj0Ul264Y2xUjqfOdti3z4Qt6xLC0oqR
GheAzMoOjHRV4eXLQKF8lL83Chpk6GnKhbmxEfYfsUVNey96qnLw9JGfUEZb4QagobFZOUYQxGxD
k+8BIANATMhMpgAmMgDE1MINQEVlNfuO+kkk0ixUZXUtpQCIqUdTKQB6EZD2wH8LoLGpGfX1jcy8
NZFIpFkknp6rY9fm8PCI8oqdHNQDQEzIbEwBEARBEJqB17P0JkBCFEoBEARBzF0oBUBMiKZSAJp8
CoAgCILQDJQCICaEUgAEQRBzFzIAxITMZAqAegAIgiCmFl7PUgqAEEVTKQB6CoAgCGL2QTcBEhNC
KQCCIIi5C6UAiAnRVArgYw0APQVAEAQx9VAKgJgQSgEQBEHMXSgFQEwIpQAIgiDmLpQCICZEUykA
ehEQQRDE7INSAMSEUAqAIAhi7vIpKYDi4mJhmAzAHIdSAARBEHMXSgEQE0IpAIIgiLkLpQCICaEU
wPxjdHQUlVW1qK6pQ01tPYlEmk2qqUd5RTXk4+rPT+VTUgDUAzBPoBTA/EMulwsVDTcCJBJp9qm+
oQk9Es3Uj5QCICZEUykAehGQ9sANAK9gCIKYnTQ1t0Ii7VWOTQ5KARATQimA+QcZAIKY3WjSAFAK
gJiQWZkCGO5HV1Y+RjCGsd42VFx2QN6Jk8g/Y4fWrDKhyEBFFhpiUoTh9zImR3NYEPp7hpQTPgB5
F6ofPkK/dFQYHawrQUNADNuauQEZAIKY3WjaAFAKgBBlplIAExuAITQ+cUbYgsUo84vHYG0GEjYZ
oCEwCI3ebkjZugHVYRkY6W6BtLZROc/7kCLTbA/aa98+6d+LrBbh//FPyLjoIYxK472QbHCMDABB
ENMCpQCIaWE2pgDaQt2RvGsP6mMLMdyYhawT15WfsOBVEIYU63OQleWiMT4DQ231KDpjgwwTczRl
VrDWegGKHOyQbWmOfKcHGBmUI+/kQfQ0SdD86hGyD5gj99QlyFpbUfv8AXo72faMSVBx/yH6ZYpt
G+0sR86ho0gzM0FzYTMGC6OQbnEBowMSVN24yAyFOQovP8CQfAStwW4oPH8eGRZH0RgZicJjpii4
+UxYTm9ODFuOBfLOO2NAOoj+4lRUe4YLn80kZAAIYnYz0ykAehHQPGH29QCwACwfxNjYMEbZ/PKy
ZGQevfSm9d1VxsYd0RLijvy7z1DrfBbxemao9fREc2oeumPdEblGFx2Z2cg334GyZ94oumiL7tpW
1D+/hdJrV5G5cxNy73ih/sEFlPpmYiA/GGmHHTCqXMloezGyT16GpCAZGUfOojs1GlmHnDDc04Ty
6xdRevUKEtatQHVkNkptjZB56Rmanl1GxPJNaEuMR/r+fWiOT0DKunUocLqO3P3bkWRxFkO9Xeir
b1WsZAYhA0AQsxtKARDTwmw0AOrISxKQddJZOQb0Z/oh9ZgTupIDkOv8BMOSDlTdvo5CuzMoexCI
jmh3FD3xF8p2hz9A7nlHFDmdR0dhKUrOnWZm4AKyjbYj/dwTjHSUocDxOsqdL6E+UXFvAWe0vQSZ
lrbCcNOz60jS34lcu7voq8pD7tGjKHa8gORN61H2MgYVt+zQVjeI4Yp45Jy5IcxTfukSKu67IG75
WpRcvYoiu+PItr0MxR0FMw8ZAIKY3VAKgJgWZmMKQJ3B8iTEr9VF7QtP1D69h+StOmhMq4Q06QWy
nW6jLSwAFa6vUHPrLBJ2n0RHvC/iNrPynh5I1d+BxugU5NsdQWNEGJI2b0FjSDgKD+5EgsVlYfnl
tqaINTjKtksYFRhtLUSq0WEM8h6B4V4kL/0zYvc5ojPWCwnb96I5Igopm1eh+FkYSi8dRmNBJwby
QpBubS/MX3DkMBqikpF30AiVnn6ovHIWJQ/8MNRai44sRdfaTEIGgCBmN5QCIKaF2d4DMNbXgeq7
N1Dk4ICiS1fQWaYIXPLaIrTllmCoox7l1xxRyFry0jYZpMneSLU4iBInR9RFZAhl2xKiMSgfRVec
HwrsHVHt4YmWVIUjbnG7grzb3sKwirH+TrREJ2FE2WTvK0pDfWgSGxpGk+d9FDldR42nN3oqG9Cd
nQRZ5wBGOmrRmqhYX0dCvPAEwUhHBUoczqL0gQeGh0Yhr8pHY/gHPLkwxXAD0NDYrBwjCGK20dLa
TikAYuqZKQMwVS8C6gi6i+yrT5Vj76cr1g9J+kboadbMhaYt8O+lrLxKeNOYhEQizTrxVwFTCoCY
cmZ7CuBjGWytRU9FrXLs/fSkxaAtTeF05xutbe1oampBc3MriUSaRWpqVlyXI6ouyEnC61lKARCi
aMIA0G8BEARBzE4oBUBMCBkAgiCIuQuvrykFQIgy11IABEEQxBt4Q4tSAIQoM3UTIPUAEARBTD2f
kgIoLS0VhskAzHHIABAEQcxdKAVATAilAAiCIOYuvJ6lFAAhCvUAEARBzF0oBUBMCBkAgiCIuQuv
rykFQIhCKQCCIIi5C69nKQVAiDJTPQBT9SpggiAI4g2UAiAmRBMGgF4ERBAEMTvh9TWlAAhRKAVA
EAQxd+H1LKUACFHoJkCCIIi5C6UAiAkhA0AQBDF34fU1pQAIUSgFQBAEMXfh9SylAAhRqAdgfsJd
fltbG4lEmoXi9evo6Kjyap0cn5ICoJ8DnidowgDQUwDaBf8OMjIyhFYBiUSaXeJ1Y1paGmQymfKK
nRy8vqYUACEKpQDmH0NDQ0JFw3tuuHkjkUizR7w+5fWjJg0Av945H9oDQCmAecJMpQD4CUk9ADMD
NwC8gqmrq0NtbS2JRJpF4iYgPz9fYwbgU1IA9BTAPGE2pgAkne3o6Hlz8g/1daOsqhpjynFicpAB
IJFmVrzOVL/+VK1/1bAmDQCvrykFQIgyG1MArpdt4fA4XDnG5msqhZu3PzRzSwxBBoBEmjnx645f
fyoTwHtQq6urhW53lRHQtAGgFAAhymxMATx3OoXzj8KUY8BwvwTVdfXCcFttIdzc3FBQ0yaMS1or
4e7ujtjsCmG8obYc+dnp8HD3RHP3kDAtJy0a7m7uKKpqEcYHuhvY5+6ISFVcFM1lBcjJe3v75zJk
AEikmVNLSwv8/Pxw584doR7l9eeVK1cQFxeH5uZmjRsASgEQEzIbUwDjewBackOgb3kc9SVpWLds
CaytrbB4nQ6i4uJhuk0HR44exab16+EXl4eLh7fi84VbYL5XB1usLiAt3Ac/LViOE6dsYG1/DY21
ZTDfthUH2Tw6G9finl8SKpKjEBSWoVzb3IcMAIk0s+Im4Pnz57h9+zauXbsmGAI+jX82FT0A/Hrn
fIgBoBTAPGK2pgAcn0Ypx1irvyAcFnbncOfUcZx2DhGmdbfX49lFG/z6d9/B2NgYW1YvgoXtVZw7
bYGX6byl34GfdQ2RnpEEkx27cOqsE3xDkpHiexf/9i9/FebZtn4ZNhmfFJY3nyADQCLNrPi1x5/3
f/r0KXx8fIRAq/qMUgDEtKGpFADPYanzSwaAn5ATGYCnF2xg4/xK+FwilaIhOwh7j9vC5+4VbN97
Rti2R/dv4ZaTHZav2YLMvDzcO38c993CcP6UMbwzGtkGlGPJRgOkFJYhMTEd8RFe+Ox3P+HxfRcs
/3k1UrPz8PzqGTjcfIWRoUHI5Yp0wXyADACJNDvU2tr6uuWv0lSkAFQB/UMNAKUA5gmzMQUQ53ET
3/2wCKtWrcKqTfoIC/OHww0XjAxKcM56D5u+EgbW59At7cWDi5ZYs2EjNurvR3FdBx7dOovIwlZg
oA4HTjogPSMR+ps2YPOWLThi74I+dvK737TBqnUbsX7bbmRUtCI32BOPXd/0OMx1yACQSLNXlAIg
po3ZmALgjAwPCSfqwIAco+Oe/xt/AsvHjb/L2HvnGWHbNDw8ohyb+6gMAK9ouAkgkUizR7xHlV+f
ZACIKWcmUwAT9QAQUws3AFlZWSgrKyORSLNM5eXlwqu6eX2pCSgFQEzIbEwBEFPL2NiY0NLgpo33
3JBIpNkjfl1yqQflyfApPQB0E+A8YbamAAiCIIjJ87EGgJ4CmEdQCoAgCGLuwutZVU7/Qw0A/Rzw
PIFSAARBEHOXj+0BoJsA5xGaSgF8bA8ApQAIgiCmno81AJQCmEdQCoAgCGLu8ikpAHoKYJ5AKQCC
IIi5y8f2ANBTAPMITaUA6CkAgiCI2QcZAGJCKAVAEAQxd/mUFAA9BTBPoBQAQRDE3IV6AIgJoRQA
QRDE3IUMADEhM5kCIANAEAQxtfCeVlVA/xADQE8BzCMoBUAQBDF3+ZQeANU9A2QA5jiUAiAIgpi7
kAEgJoRSAARBEHMXSgEQE0IpAIIgiLnLx/YA0KuA5xGzKQUgl8uF7ie+bH7ikUgkEuld8TqSB+qx
sTFl7TkxH2sA6CmAecRMpQDEDEBkZCRu376Nly9fwsPDg0QikUgiev78OSIiIjAyMqKsPSeGUgDE
hMymFEBQUBBycnKEMjKZjEQikUgi4vUrr4c/xAB8Sg8A3QQ4T5hNKYCQkBBkZWWhv79fdL0kEolE
UogHajIAxKSYqRSA2FMAZABIJBLpw/ShBoD3tKoC+ocYAEoBzCNmUwqADACJRCJ9mD6mB4A3uDgf
agDoJsB5AqUASCQSSftEKQBi0lAKgEQikbRPU5kCoJ8DnidQCoBEIpG0T5QCICbNTPUAUAqARCKR
Pl2UAiAmjTakAHhPgdizsKSpFT/u6t8DiaTt0pa6hNeVYtuvrqlMAdBTAPOE2Z4C4OviNxlWVlYK
6yBNj/jxbmlpEY6/+nc/FeLr4OdGb6+URJq0xM4xLl7fNDc3z/q6hG8fb1T90rVHKQBi0mjCAEzl
UwB8Hv52wLy8PME0kKZe/OLPzs4WhnlrRP2717RU51JtXT3q6hpQV08ifZr4OVTf0DhhwOLnMq93
cnNzhXN8/Hk/W5Sfny/Ug7/UA0cpAGLSzPYUAL8I+MnLDQbvaSBNvfj3WVFRIdwJPNUGQCbrRWlZ
Baqqa9HQ2MTWTSJ9mhobm1ngKkVTc4to8OT1Dw/8vJXNz3Gxc382qLa2VjABvH4cvw/qohQAMWlm
ewpAZQD48vmFQZp61dXVoaysbFoMAO+yraisZpWMwgzwc4RE+hQNDPSzuqgRjU3N7zUA3Nzyc1zs
3J8N4o0pTRoAvhxKARCiaCoFMFVPAXyKAeC9BQ2sNdAj4TnBXnS0tYiWmw7xbWlp6xC2g4tfKE0N
9cJ0sfJTpZqaWvaddaClqeEX1z0TBqCjo/O95xyJ9EviBrK2tl6jBqCGqaWt/c2128iu3do64Vpq
qK8TPhebbzKaCgNAKQBClJlKAUyVAVAF3KqCdJw9dRTW1tZ4HhCFdnYi19VqNugK62ptfW9QbWlp
QoyfB44fO4KDBw/C5rQjcstq0cwqErHyU6M6tDTWwdvLA1FpeWzdDSJl3ogMAEkbpWkDwAN9BwuG
scEvhWv32Gl7ZJfUo7O5Gi9fuiOnuEowAWLzTkaaNgD8WFAKgBBlrqUAGpvbUJYViZ+/+x77D57E
pQtnsezHL3Hy8nO0d3YwI9ClqBy6uSGoRWt7J1tPN5vWizYWrIWWcqeyTFeHsMw2VkbYZxbsO7p4
WSkkPV3o7mrHy0d34R2Zjq7ONnR2K7a3s6MVtYIhqGMXRjuO79yIJZt2w8nJCaYGG7HWwAK1LWx+
ZXmJpBv1dbVoamkTxqVSidBL0NCkyGXy8ebmJiFINrByzczgdLazddQ1CJVAAzv+Xap1C9N5xdXN
trEHLXy+bn6cZdDfuhpnHoeip5OVUTtm40UGgKSN0rQBaGfXls+9C/jLX3/AqfMXccLSEN99vx4Z
uZnQ2bwCfkmlrI7oVFyj7NxtZGagvqEJPcI1q6wH6phhYHUGP7e58f6Qnr+Z7gGgFMA8Yq6lALq7
O3HGfDP2OzwU1sUvj87qPLzwfIV2diL7Pr8JQ0ND2F59zMxAOzyf3cbZ0yehr2+AV+Fp6JV2sqB+
TShz7qYru4jb4PHoBqytreDyzAP3Lp+HkZERjtndRlVFDhb/8Z/xxyW7UNlQh3tOtsJ8d1+EsePT
xranjhmNZhzfb4iHofmKnWzPw4Lly5BcVIUHTnYwZMs6ZHMJlY1tyIgNwD42vnvvASTklKM0Kw4H
9hvBYLcpgiOicOvaVeTXtiLyxUO2LYFoqy/EpYuOKKqqhrP9Meht347bHmFoa6jA7esOsLC0Qkh8
Kh5ePcXWY4hvvl+I66/i0N3x/pQIGQCSNkqTBqCuvhFttQXYvOIHuMcUYmRIjkFZN54/ckFkTDT2
7NyMyLwG5Mb7wWiPIcxtzqG0rg3FWbE4YmrM6ghD3HMLQ1NNMW5ePc+uRUsExGaglRlysfWpi1IA
xLQxt1IAzG23V2H/6o14GZkPWU8HQrwe4YjNSTz0jUC01wN8+edvceLsWfz09WcswD/HPp0fsUTn
IG7YW+KHLcYIdH+Arz77HqfO2mHBV5/B0cUdhlt+gO4BW4QHe+Gw5X6cOn0G37L5zz54AWu9Ndh9
4jru2h3Ct9+vxNkzR/H5n/+Mh4EpbFta2D604ex+PSxZrwdbW1vs2PwzdljYorIsF0csjHCCLWvh
N5/B9r4bzFb+iA07LeFwzg4+MbE4unUFlm7Yg4sO9nD184Ppjk14HJgAiw2f4fPVpkgNf4512/bC
ma17xfrdeOF6Fz9+vRiuL73w03d/gq3zE1w/aYVV63bBw+0ePvvDn3HNO4EMAGlOSpMGoL6xBRWZ
Ydi2YgcKGxU9b9U1tegbGEZ/UzH0DHThFxyCVV99A+NDp7BtzQ/YZHwSEcFu2L/fBKes9+N33y5F
REw4vvvq9zhx6S5yCkvRyOpKsfWpi1IAxLQxUykAfiHyE1MdTfQA9HS14eiedTh1z58tcRTpCRFw
Om2JLzbuwCUbS/zu8x9hamaCbZvW4PjZy7Aw3w2f1BpIy+OxUt8Ix0334I9fLYGpqQl01q/GqfNX
cICVCctrQkNePIzYhW9iZobvv/wjjtx5ibv2J/A0NAknt63A9z9vgonJPqz9eTGuPAlAZ0c724c2
2O3Xx5rtxrh44Tycbj1GXVs3SjNiYLxrO/abmePHv/0FhucfIjfOB+ZGe2BqbIqnL6OQkxQEaxMj
mJnuxwP3KHg+dMBOo304xEyImeUh7DPajVvP3WGxcROehikc/m3bPTC2OAgjtv2t/UM4rq+DG15p
wmcH9u+Aw/NwMgCkOSnN9gA0obkiExuXL0Z4Xj36pWx+STdiIkOQmhwPY5M9uHPdCb//599jr4kJ
durpYruRBdwe34eenh7M9+3Cv/5lAdy9X2Ln3r2obh9A6wfcgMs1FT0A9BQAIcpcSwE0t3YgI8od
33z5PS7dfiIs84z5VvzrTxvh5/EQS5cth39YBCx26eH+c9aq3rMeT8Lz0ZAViG9Wb8fTe9ewbMVq
BIWHw8xAD088ArB313r4ptcg6OYxfPn9WsTGRWP5gs+w//Jz3D5mDH3zC7h5xhzr9PYiIswX+pt1
4RObK9xTIOlpgTUzDZfcYtkeDgk5w84eCfxuncQX3yxHdFws1i/5GpsPOsD1wV24+wTAXGcZft5g
Dtdnj9n6fWBruhV/XbgHtVU5+M1/+y846OyLoLvH8X/81/9AZm0n7h7fg2UbdsHf2xVLWavj0bOn
2KSzCUUtMjw5dwDL1xrCz+sR/vVf/gUXX8TSPQCkOSlN3wPQ2dWBO2cP4MuF6+Hm5YsnN+zx5ecL
EZWUjB16G/HSNwAbli3AHY9AXD51AKccbsFs68/Yc/Qywjxd8A+/+Sueerpjk+5W5Fa1C/cIiK1n
vCgFQEwbcysFoHhsh9/xnx7hiz0G27FNVwenz1/A1TtP0dDWiZcPLmKrjg4sz1xFHdvux/euIzqz
DPXFqTjrdJOdxO1wu2MvlDl0/ibbtzo8cLmO+JwKtNYWwe7wfuhs3wHrI0fhFpaC7GgvbN9mgqyi
Ulw/dxA6bL6L916gsblFqGTaWhvh8cAF3hGpaGWGgG8jzy821hTjvI0ZdHX1hWU9C4hGmNd9tl5d
7Da2RmphJeIDnmM7W57eLlOEJOVC2tmEq/YnEJJagtLUYBy3dUB1cxfaGsvhcNwCW7dswfVnIWir
K8a1G84oqm5Ba30Z7CwNob/LEAePnEQwW05rc+M7x01dZABI2ihNGwB+k21HWzOe3b6ILey61Ntl
hKCYHHS3VOPmjSvIrWxBWoQHdLZsxU6zQ8gsrUd+chB2bdfFXhNzHDrtiLjEeNx2uYOS6ibUf8g6
mWZDCoBf+xwyAHOcuZYC4OJ38je3tgnbycVP4K4OflMeNwddiguru1O4INvaOtDEgjy/2Ls62lHH
n/Hld9DzMqy1LgTx9g7m3tmyWeDuZq131bFpbWKBvLmVbWO3kNvrFI6bRLkcRVcf7/JrbWt/+1FB
9pe/ulSxLMVFznsLmpn54ON8+fyOYf5UgGJcItw8xHOQnWxf+COE9fw9B91dqKupFpbVpfxeVHce
8wtX2AbVeoTP+XJ/+R0E020Ayiuq2HfUw86ZXqESJ5E+RXJ5Pzt3G4Q3SmrEAHDxa6lTUWfw66et
tVmoX4T3APAnclTXLFs+r0d4fcDH+fok7PrkvaO8rvyYR5ApBUBMG3OtB4A0eU2vAehFZWU1ikvK
hJ4AEmkyKigoRisz/xozADMgSgEQ0wYZANJ4TacBUIlXNLxVxdM3JNIniZ0/nUJrXfwcm68GgNeh
lAIgRNGWFADvtubrIU29uKHjleR0GgB+TvFzjkSarMTOLy6VAeB1FT/Hxc792SBuAjRtACgFQIgy
23sA+Dz854D5T3jyeUhTL15Z8O+BtxqmywCQSFMtfi7z85v/1DU/x8ef97NF/KfP+TbywC22HypR
CoCYNJowAFP5GCAv09zMb7z58JtoSJMXP95tbYqbENW/exJJW8XP5dbW1llfl/Dta2pq+sVrj1IA
xKSZqRQAPyE/JAXAxcvxeUnTq19qgZBI2iZtqUs+5NqjFAAxaWZ7CoBEIpFI74pSAMSkme0pABKJ
RCK9K0oBEJNGG1IAJBKJRHpblAIgJg2lAEgkEkn7RCkAYtKQASCRSCTtE6UAiElDKQASiUTSPlEK
gJg0M9UDwE9I6gEgcfHzgP8oUC+rqEgkklQI2mLXirooBUBMGk0YAHoKgPSp4udAR3uH8KtrdSQS
SVBDQ+MvBl5KARCThlIApJkU/xnX0rIK1LBKr6W1jUQiMRWXlKOxSfxnjVX6mB4ASgEQomhVCkDa
C0kvuyDYCSmR9aGXLV+QfOC92zuVkrD9FLZJ5DPSL4t3/ZdXVGFIrQIiiPkO/0lj3gugKQNAKQBC
FK1IAfCA39cPSU8nujq60TvQj866KjQkxKMuJhr1KVno6ZNDIlWbZxokkbLjUF2FjqZWYVisDOn9
UhmA/nGVEkHMZ5qaWjRmACgFQEyINqQAJL0ydDXVoMjRAWl2TmhvakfZTTtE/LweGVaWSNi6CRlO
DyAZGIJ0QA7Z2Bh6hwcV80tlkI2OQjYyrNgniRS9I2x8dIQttxdS+aAwnRsM6UAfm0ci9CrwfZQO
DArLkvbxX8Tj43L0DrF1yHoh6R8E37u80weR/zIO/WyYT+dmRX3bSe8XGQCCeBdNG4CPTQGQAZgn
zFQK4GN6ACQyNt5YikSdFQhZtBnN1S0ovnoWRUFZ4Kf/gLwR8QZ6aKpj21WYgdInT1AdkcQMAQvk
nU2oeuWBcu8gdHZIIe3tRE3AK5R5+qGdXWCNaano6pahs7oMzYUVLNj3oCE5AV2SPrTlJqPkyTM0
VzSgd0CK5rws1IQGo6WmGe1F6ajy80Oa6V4UBiajLS8TzaW1bFuZCVDbdtL7RQaAIN5FkwaA17OU
AiBE0VQKgP+EpTqaNAA9rFxPZysa01NRn5qCnr4BlFyxRZrdDTSlp6PiyTXE77NEW201ck5ZI+vM
GSRu00FJeCKKzx1GgrEVMo8cRHlUMsqvn0WcwX5kHz+CYi9fZB02R1V6FUov7EeUwXF0NxYg0dAU
VUHeSNDVReaxQ4jdbIjG/AIk669E4sEzKHd7jOSdO5FtewoRPyxCaVQWGkL9UZteAmk/70VQ23bS
e0UGgCDehVIAxLSgDSkAQRLWepfL0TsoRx9r95dcOYmIZeuRdsAMqVbH0FDCWumSVhRdd0DGkUOI
W70U6ddcUev7CMnGFii4/ZAF8QrUBT5FspEJ8pzvoiGnHNWeN5F99Tby7KyQaGWLojvXkP/QFXkn
DqHQN0PYrvJbp5HpcBnpJ46gYwjMLNgg92m08Fn+mUPIexELfkn19ssoBfCRIgNAEO9CKQBiWpip
FMBkXgQkwyAK7Y+jwCsRcjYfz9PzLWkMfoyoDTvRUlyCbIudSD59Ey1F+WjKyUPBKVPEbD+MpuJC
NGbmovT6CUSuN0d7XSnilv2AjGtuqPG+h+BvlqC+vBmljoeRdu4uMxVdbFl7kX//CdKOWqGtZwTl
zqeRdoZ91tWG5O0bkf8qkQV/Kbo7u5hREd9mkrjIABDEu1AKgJgWtCIFME69I3KU3XNGiT8LvMNy
YRq/T6C7oRSZlruRuGcfEncZIP9ZAKo8XBC/bRuSdu9FRXQGav2eImG7LpJ27kGhZzj6RoeQbbkH
JeH56C6NRfyO/WiXjqKnqQQZ5rsQs34D0k/fQnd7PXIunEVLcz8kzWVIN9RDwu5diNPdger0IlQ/
f4DK2Fz0yt+/7aS3RQaAIN6FUgDEtKA1KYDxYtvw1jg7SbkJkMqk6GxpUTw2yJYvlQ+gu61FeHyQ
pxCE8Y42dLV3CukEfne/pE+meJZfIn19E5+kbwDSfhk6m1sgZfvx+ll/vh7+mUyCrrYOVkaxrd0d
7ehmF87r7SF9kMgAEMS7kAEgpgVtTAEI4gZgvAkQprMgzi8atc8l/AVCahcSH1Yf5/Mouu6ZGXhr
Ohtn2/y6W199far18Of/+edq6yN9uLgBKCuvxODQkPIsIAiipbmVNawaNGIAeD1LKQBCFG1MAZDm
jmTsnKioqBJeB1xdU0cikaprUVBYgpaWVuoBIKYWrU0BkOaU2tramdpIJBJTR0fne+tgLjIAxKTR
2hQAaU6JnwskEumNxK4TdVEKgJg0lAIgkUgk7RP1ABCThlIAJBKJpH0iA0BMGkoBkEgkkvaJUgDE
pNFUCmAqfwyIRCKRSG+LegCISUMpABKJRNI+kQEgJg2lAEgkEkn7RCkAYtJoKgVATwGQSCTS9Il6
AIhJQykA0kyLnwcyWa9wfpBIpF7hDZm8nhW7XlT6GAPAe1w5ZACIt5jJFAAZABI/B5qbW1BeUYnK
ymoSad6rQvmXB+L3mQBKARCThlIApJkUb/mXlJajta2dmYFeEmnei/94WUVFNWtY0a8BElMMpQBI
MynVzwEPDr19rhDEfKalpY0MADH1zGQK4KN6ANhJKOmVKX6vX3lC8vHe4RHI2DIl/Gd5x88jKjYv
c9i9Q0PolcvfWt6HSQLp4BBk7MLj6pXzbf2Y+TUkiRRS+YD4Z1oklQHoH1cpEcR8pqmpRWMGgNez
lAIgRNGKFAAP/v0s2HW0oqO5A70DfZAODELS2YRq/1eo8AtCZxczA/2yXw7m/Hf8e9pQFx2O2sRE
tFTUQMpNgFjZd8R/pKMLTSnxqPT2RsVLL9RnFTFDMMg+m0YTwPahp6MFTbn5zK3z8XGfa5HIABDE
u2jSAFAPADEh2pACkMj60NVQhbzTx5F8+Aya69rQU5ePpO06SD5wEOmW+xGvZ47GymZmDPohGx1D
H8YgZcGlR8qMAWvt82myEfaXrafG1RlxO01Q5uONuqxC9tmoojUv9AoMsmE+PgRp3wBbDruAVMZC
yoxHZxUS1q9CkulBZB07gthNm1AWmfF6Hby80CvAykvlQ8K4bEhhELhpEcaHmXlh+9Q7KBfK9Q4N
Q9LLzAVbnzCNBXjZGDuGY6NCz4akl5VV9XSwYyiso60Q8Tv2obW1j5UbYabm7e9IW0QGgCDehQwA
MS1oKgXwsQbgY54C4AGwp6kcyTvWIWzFdjRXt6HAzgRZd3zQz+bjp3P5g2soC8tA30gfKj0eIf/2
I7SzE7KnuRp1CbEof/oI5YHxLFA2IGn1YiQfc0ZLWRHa6hrRWpCJSl9vVAYGoyEjFRUez1HmH422
0hwU3rqJptI6ZgaYCWAGQNJchJQDNuhiAZr9j+awB0g46siCvgyV7k+Rf+0m6jOKIWP73pweg4LL
V1AREstMxADaClJRcO0KygOi0FZWgNqEVDbfABriYtHW1I3OylzUxKcx49KJ8icuKHzgis7ufnTV
laEmNBDl3v7oYhdkpfsTFN+6gjhDK7TU1qMmMIxVBtL3fmezVWQACOJdKAVATAtakQJg5Xo6W9Fc
kI+m/Hx0tdciY58ZGio70NvHc/g9Qou5H8MoPHcQifutkW1jgUTTs2hICkT49wuQff4i4rdsRYlf
MFK3rkCS9SXkOR5F4asoFF8wQ+Q2Y1S+eo7o1UuRfuo84jesRPx+S2QeNEKC5Wn0yFkru7cf0vYK
JBnsROEzL9SEBCLdeBvy3MPRkhqCNOvDyD1zHLE796M+KR4Ja9ciy+ESsuwd0ZidhqTN65BxxhHZ
9hdQFfASySaH0Nlaj8ivfoeisDxU3juLDKf7KLQ/hGSrE8i03IdUG2Yowp4jfOkyFLt7Ic/WBsmW
x5BjY4aI9YZoY+ar8qUfOsgAEMScgXoAiGlBG1IAgvhNb+zElfIuenknC7y7UZ3XgL6xYWFad0cb
2ktSkbB1N9h5iFG2vCzrfci9fhVpZy+Bb0nptVPIexGB0qsOKIsoQpXbRRS+jEDx1eMoja/AgJQF
d3MLcFtSzqblucawi6UWyfsPsWPSD4mMGYDOaiRuWY9k80PIOHQIhU9eQTo8hpb0KGQctkLmYQsW
rNegOiUXxZdtkW5ji6JHnmivr0XJdXukHT6BQpfnaG+oQ+65E8i/fQcpe3ci1/kOss/ZoTIsGIn6
puhi2zDMLE3agX3Ic76CzJvPIEc3ErfvQ7sckPfXINHITEgB8F4QbQz+XGQACOJdyAAQ04KmUgDT
+SKgXnbSVz2+gBj9A2gqq0Z7eS6St+uiNCQGGfv0UegVjfa8OCTo70OZ+0OknLQX8uZFrGWd6xaC
ojNHUfQqDRWPziLfIxRFlw6hKCQXvU25SDQzQ9cQUOJ4BPluUZC2sGmGVmjvVhgAngJIMrJAu3RM
SD3w+wf6WGjO2r8NaY6P0Z4Ti6jlq1EWkoC62Hg0ZyYidvEi5N57hfrEBDTnpSNp7TJkP4xAQ8gj
BH3+A2oy8pG1dz2i99qhp7MZSVs2oCwyEy0J/kjcY4nS57eRduE2+ockSNHfjtLwbDSFPkH4qu3M
ALCKoL6BXaTix2q2iwwAQbwLpQCIaUErUgDjJelF7wA7ye5fRYLediTs0EfBQx/WEh9Be24MUvbo
IXarPspCs9FRnIA8lyfCDXSVz11Yyz8FlU/uoTK2EHVBT1ERmYpKDxdUppRC2lqG3OvX0TUwjGo3
F5SHZ0DaxqY53UJHd59wL4KkrQp5l66jtanr9cXJeyCaWbBO3rkdqZYWSLE6gfrMHOTbWiNhuz4y
zl5FW1UlCi8cZ9urh7QjdmiuZxdWRSorf5QZjjGU37FHjssroTXfnOiPpB26iNu2C9XJ5WhJD0b+
Ey/h5sSmOD8kbt2CFLP9SDt1Be215Si8fBvtHfwFIh/6KOTsERkAgngXTfcAfOyrgIuLi4VhMgBz
HK1JAbwldkIyE8Dv3OeP8PE76mUjw8Jn/E773gHWUu/rF+6ol7B1CDfwsZOYl5OwgPP6L3+vgGpc
CJ4SVrZPWL6qzJtpqnUrx9WPD1s2Xy9/WkBY75DaXf58/ew48Hl62V9he5hhkPJ7F4T3EfC7/tl2
9w+wZbDl8mUNDrFxtn42rXdwgM3Ty/ZTsQ/CvGw9wn6yz4T1s2W+2T7tEjcApWUV6GPf+djYGIlE
YmpoaGL1aoPGDAClAAhRtDEF8JbYtgh63zTV8Pi/LJi//VfsM/VpE4yrT1dJmKYaV5UZ/7lyHvW/
6tPfKifymepz9XJaJm4AamrqUFxSJvQEkEikKhawS9HG6lhe14pdN1yUAiAmjVamAEhzSlItTF2Q
SFMpXje+L/hzTWUKgHoA5gnamQIgkUik+S1KARCTRlMpgKl8ERCJRCKR3halAIhJQykAEolE0j5R
CoCYNJQCIJFIJO0TpQCISUMpABKJRNI+UQqAmDSUAiCRSCTtE6UAiElDKQASiUTSPlEKgJg0lAIg
kUgk7ROlAIhJQykAEolE0j5RCoCYNDPVA0ApABKJRPp0UQqAmDSUAiCRSCTtE6UAiElDKQASiUTS
Pn2MAfjYFAD9HPA8QRMGgJ4CIJFIpOkVpQCISUMGgEQikbRPlAIgJg2lAEgkEkn79DE9AJQCIESh
mwBJJBJJ+0QpAGLSzJQBoBQAiUQifbooBUBMGkoBkEgkkvbpYwwApQAIUagHgEQikbRPlAIgJg0Z
ABKJRNI+UQqAmDSUAiCRSCTtE6UAiElDPQAkEomkfaIUADFpNGEA6EVAJBKJNL2iFAAxaSgFQCKR
SNonSgEQk4ZSACQSiaR9ohQAMWlmygDQmwBJJBLp00UpAGLSUAqARCKRtE+UAiAmDd0ESCKRSNqn
qUwBlJaWCsNkAOY4ZABIJBJJ+0QpAGLSUAqARCKRtE+UAiAmDd0ESCKRSNonSgEQk2Y2pQD8/f2R
np4uzMtPOhKJRCKJi9fBlAIgJsVsSgFUVlaiqalJMAb8MxKJRCK9K1U9PDo6qqw9J4aX+xgDQCmA
ecRsSgEQBEEQmoVSAMSEzKYUAEEQBKFZPrYHgFIA84jZlAIgCIIgNAuvZ+kpAEIUTaUAqqurhWEV
v2QA+AlJBoAgCGJqoRQAMSGUAiAIgpi78PqaUgCEKJQCIAiCmLvwepZSAIQomkoB0FMABEEQsw9K
ARATQikAgiCIuQuvrykFQIgym1MAQ0NDqKurEwwGaXaotrYWLS0tym9o/uGWK4FjTBcuxJFIk5ND
bBdup3ajb+iXX+YzGT7WAFAKYB6hqRTApzwF8Es9APzE468GLisrQ0lJCWkWiFcMOTk5GBsbU35L
84fBEeB3lytg7VmCk35lOO5LIn26zviX4R/PF6OobUh5hk0Nn5IC4Nc6hwzAHGc2pwD4urhz5QaD
9wSQZof4dzcfDUAfO3VXPaxGU30N+trqIG0lkT5dI511WP+oHHktU2sAPrYHgFIA84jZnALg68rP
z3/d9UyaHZqvBqCfnbrLH1SjqLwaDXXix4ZE+lC1N9Zi1YNy5LdOvQGgpwAIUWZzCoCv66MMAGud
vjOukvr02SaxbRSmqX02/vMPkdh846epxseXe4/IAGjeAKh6V8Q++1Qplin+2Xip1q3pbVBJtX9v
JF7uUzR+m9XXoz5d/fP3jU+XpssAfEoKgJ4CmCfM9hTAhxqAusbG16qtqUF9axtTM2qr2XAbG25u
EqaLzTtp8cqmseGtaXU8bVH/voqFbUt9Axo6O1gFxMbrG9HALrY6YXqjYntr61Df0sKWP37eX5Jy
GW2tbJgtg+0/X0ZdUwtbHlsu/4wfG/aZcLxElzGxyABoygCw76muXqhwG/m5woY7uzqFZdeIlv8I
sXOyubkFLU38PKoRltfAvut6tp46dt41svNTbL7GxibU/0JAVC1H7DMxqdbdoLyONRVwea9jQ0Mj
Wlta2bLrhPE6dgybmlg9wMvwY8uCFz+2NTWq+eoUnyu/P0V5foxUn0+fprMH4GNTANQDME+YEykA
djFXZaYg+5YLStJyWHDrQGVCCOJ36SF6y0bEGVujNLOYBVUW7IRgzSoAVQXGl80kBHBeKfDKiY8L
AfzNeoVx9UqTVRxC8ORlaqpQVVyqGBaWWYdq5qBrKqvfLE9YvlrFxyrh+qYaZDueZtu4mWkL0m8+
QV2HBHWV+Ug01EXmMx/2+TEkWB9Fxq07qCxj296gWO+bbePT2Dibrlo2H6+tKETaUTNErVmLlEt3
UdfWjZq8ZCQYbEXk2s3IfhGOupoCJLLxaN1tiNlphOK0IrZN4oFBXWQANGQAeMBva8Idx5NYvOgn
/P/bO+/vKI587d9/4/6w5z3v+3rv3vvu7rWP9+y1sY1tTM5JBAkkkshBBAEi2eRsE43BgAGDsclB
gInKOUujUZqcowICkxbzvFUtxpbRgIQSmpnnOedzurqnpjpVVz3V3+6Z/oK41ftglEZN1BWLqG/y
2lI6M2nkxDmXHZ5VOddm0en5zpVM/37+Zbm1XhtiJ4/Akh3HUCtMheywqyrKoTWYYNBpUF6pUe7c
WUQZNR4XjnyzHVcT0vHlxuW4mqlGtcepdJKys/Zdf3JqE+uuKC+DVi87W7HMt40iLTt6WZ6c/90g
mIWpcePQhiX45LNe6N+/H/r27YtdJ+JRIzoaZRvEOmRH7PteQzmW52U3PP/TYDoa7aPA6alG1tVj
6DVoBAp0driF0dUVJiOs16fo23+AWE8fLFixCVqLSzEBZrMNdm0hlsWuQIbaoORXZ17HwunLUS7y
2G2/b4Nv2+W8zyzJbZTbK2m8Ha2FBoB642qvEEBH/BCQXFezBkA2Di47inetQfzf3kH65u9E51eA
pFHDkf99PIx6LUr2rEfi9KUwuuuECbBCV1QkOmAx0hGGoGFkYIC+tAxmMWIyGQ1KZ20oU4vviote
NgguFwwVaujLKpW02e4Qy83QFReL0XUt9JlXkDw9FlqtaGRkx+62IGflIuQduQzb3VrRgOtEXhXM
YqRitjY0LlavR2zzKiRGx0JTrIYuPw0p4cOQ+8NNVJ7/FgkR81CV/jMSBo2GOi1frFtsj2jA5Mhd
X1Istls0zGJ7lXlVMQwavUjL7RcNs8uNqhunkLV2u5jXInXCcJQm5SN3yWRk7joljEAKcrZ8A03a
z0gKn4ny9EzoxP7/waC8AhqA9jEAnppanNm3Ct16hiEpuxgVqhxEDuyN1QfO49HDX8Q5LUdRcSlc
ohG2iHppEZ1vuVqFCo0JDrsZGq1WMQHSEGg0VdCLzl2Wa3d6oUqNx6ihPdB/TDTKLDWor7Zi1ewp
+OrEDZzfvwHRi7bAJuqy7Oxkh15cooLNUIFpk8Nw8mYONBUVcLo9wiQaoNOLa0LUDYMo323XYv6k
KOwU9bS+/i5MukoUFhXDLuqcyylMg6jrhYVFSl21i+0yik70bq0Ty6ZGYe3+87CZ9SgT1355RaVi
YjWV5dAYzHCJ67JIfs/mVNIGeYz0onMU11x1tRdqVQkMZmEInhsEuZ93a1z4as18/PPDD7Dl8GU8
ePAAxXd+Qv9B45GhqkBpUS5mjuyFaSt2wCs6MYu45h2abIQNHoPbRXpRbo3IfwoDPgxDuaseTqu+
YdtNVuWugEcYo9LiIpRW6kTarYQ5pdlXq8uU/Wp8LlsDQwDUG1cwhAAsomOtvHkROZs2Qn07C+Wn
9yFt+VbYHjxs6MCdNuhKSmHUlCI7djruhI1E4sS50JZpkb9+ARIjpyBh8GDkHroIXdplJEaMRUpU
JBIiZ0KrsaLiwjGkTpuKlKkzUHT6pmjk1MicMxl3hg9DmhhhFO5Yifi//B1531+Fte4ujOoM3Pn0
bdwaHys68QSkTRknRt3DxUh+s2jEpHkQ22RUIXXSRFSUmGAToy1LTT30qReRPGUeMuZE4dp7nyE5
agyu/v1/kL1lB7LEvuk0RhRsWqKUlRA1DZWF5Sg9vFNsl9i2GfNQejNTMQRKqEMJKYjjcuU0UqbP
RFVerjACo5Cxeh0yln4uGl47dClncaNnbyRPiEDKgtXQaeWdj1cfawkNQHsYAAtqvGbMGzsUx67n
40F9NZyiEzXqK6ESHU76te/Rt1cv9P70Y8xfc1Cc6yT07vEB+g4ciO7d++LshQuImRGNbK0XRbdO
InJmHPQOYRTEdtXU1WDv2kU4Fp+GfV/Mxdfn01Ctz8L7//En/KPvWIwe+E/8r798jIPffYNhg3pi
4oy5WLh4AS7eSkHcjOHo3nswen36AeK2HkXylaNi/dvwWBiSjV8sw8otm/DeW39C9/BYpCVew8Sx
4YiMCMOyrYdQVZqLqRGjEBE+CqMmz0OxrsEE1NW6sEZcLzOXbcXli+dw5uJVWPTlmDt5OHoPGo5D
x08gdlo4+vTriz7Dpij7vypmnBjFD8ZH3T/DrEXzMaD3xxgmrg2dzasce4vdJer0DcyOWYnCzJuY
FD0HlrrHUCWcxujIGBi8tfDW3IMh7yp6D49AqdkjRvMOYQByMG5UFBKK9aJzq0ZJ4lmM6j8ZReoS
zIocjYiIMRg5cTbKzXac2LUWI0dFYKTYx4tJxbh8bAs+/OQTzFi8Gnqbp811gHcAqDeuoAgBSJS4
tgtWsd2qb7Ygc/23sN4TIxQ5IrY74XgiGoe9a5E0dy2sv9xH0eY4ZKz/CpmLpoqO+yaMOVeQMHkB
1OeP4E7UTJgcbmEWZiJn33dIHjZQdJDLkbVoBm6NGIusFUuRvmqX6GDtKD5yGOpLp5A6bzn0snOX
dyTE8txVS1B0KUGMumci+5tzsNU6kBEdgbyT12ETF5ipKhcpE2aIUZxDjOzMYhtF459/CynRS1H6
03dInb8VhooMJI+PEeYlF2mxC1Dy/WEkRs2B0SUu0Is/ofDAbtz+pJfo1DcifVIYbo2eBoNoIJVb
t07RQLlNyP88FnfGzUB5SgJShg4V+3MMRTvWIXGCKLdKB21BoThuNmTPj0bWzh9grfH6P76NoAFo
BwMgRrPVLg1mjxiNi2ll8IpzIO9GeWvv4WGtEeE9e2DPmRTUWksxdtBA7NizAz0GD0OJpQ7ndy9G
5IxF2BAXgz2nE3Fw7Rys2PGD6GjFuRPXQY2tAoO6vY1xs5Zg7IBu6D52Pv717DHWzI1Wyrx6aAvm
rjmE7J8PoXdYFFw1d7EiZjwOnbuOmCnDseHYTbg1mRjavw82b16DaUtW49nTJ1g4MwobjpzD2vmz
8MONVCwc2guf9A/H8iVz8Ne//g0bt2xF/249sGbb1zh68gxKtUYlNHG3zoMNs8ej22cDMWlCFCbP
jkWZuhCjhvdGfI4GR9fMw5joVah/+ADb5k/AgpWbMWXCMOy6kIFLe5bh437jhLGpwOihw3ApswJu
hzh2d+txZudy/PXdT7Bm1SL8n7fewpkMA/QZFzBq3FxoHKLDF9eURZWIgSOjkK9zwC4NQFUWIkZN
RIpadMAeL8pSLyFi8AwkJVzCZ+9+iFWb9+D42SvIuH0O7/zpL5g6fykmhvVG96GTsGPTYkTFboBL
3hnxd05fk65qAPgWQAipvUIAHfF3wHJdLTYAEtH5yo5Pm3QaCWOjoNW54RDbYMi9jdyd+1Cw+Quk
r/0WblF2+ckdSIv7HFmrl0CdpRENRQKSZ8WJzvcQ0oUxcDx5gry1ccj+ag+SRgxF7jfHUHL4a2St
2YDM+XOQvecsXPgV2uxMVFw/IwzA5zCKUYdsGKw1DuSsWALVzXTkzJ+GwkuZ8Ih15i2fhuwDZ4QB
EKMYtw1ZCycje/852MUFaX9wD4UbFyFt3QFUxX+P1AXbYNRlIzlyPnTqAmTELUHhvl1ImbMWdlGW
sVIF1dFduNVvCIpOnkXhzo3IWLUFBosTZocd2tQ7KEvIVtZbsj0OacvWIzN2HsrVbrjqdUiKGA/V
1TvQ5JWK/QAK1y9ExubDYtuFOXnxuL4ADUD7hABqa6uxaWE4Ji3dgQeP/4WnTx7gux1rsffIEUT2
G4zLOfKa+gVzIodh1bq1iI6JhWy6s8/vQlj0IuQlX8XM6dMxQ4zgU1UmOISRdFXXIenMXjGyHoE9
e/Zi745N+PCjHsioNGHz/Bk4cr0INw5vwaLNJ1GUcAyR81fiiTDHKxdMwKGzP2Px7HG4lGMSqzVj
wpjhWL1mBSYuWa/s/+yJI7Hl+CWsnjsbF1NyMHNQd0xauBrHjx7AtPETcO52JlJv/YzDB3agZ7e+
OH0zHx63E3Xielg5exr2nc8Afn0srvt7cGnzEDkhHEXWOuxeMBmzVx1Q1nFudxyi58Zi4YLpuF3q
QNKJ7Zi7ZBse/+LE1IgoXEgrhdvpQJ3LgBkRQzDv883Yu3cvZkUMxqTlu2HIv4GxExfB8/iZaGue
4PTOpeg3bpYw5XWiHbHCY1VjbJ9+OJPacEs87ewO9B0QDaPbjYRrV/Ddt7sxoOdI7Ny6FR+8+x52
HfoeuzZ9jkXLt2DH5qVYuecE6uuav0ZaQmeGAHwdeksNAEMAIaJgCAH8ETECd9tR9OUXuDNqHDKW
xiJxZBhyD16AsSwLyeHDkDpnDhKGj0dZUhayls+CKrkM5uJbSJqxBKWnDiJVNCqyU85dEYPcY1eg
2r8WyTPnImPeTGRuOghdzh1RzmikzpqOhAkzUZmZisR+/ZD33WVYPG5Yaz2iM1+MhPGLRHmHkDg6
TOSdhsTx86ApN8Jss4hO2gVDYQpSxo1FyuwYpE2fjKRJc6EzelB5ej9S5m2BUYzCkiLEstI8pMbM
QVVBMTJmjEfKzNli30ZDdS0ReWvEdxcuRdq0KcKknBLrF6MTpxvaxAtIHDYcaQvmifVPRFlmKSrO
HURCWLgwFRHI+vI4tCnxIs9IpM2ZhjuR01BZrOVDgK9QexsAq90JoyoTYQP6YPiY8YieMBaffToM
ySUGnN27Ah/06IOo0UMRNmElctOv4h/v/BfGT47GJx90x9c/JeBfD72Y0u89hM3Zipp60QCLul/j
tWPB+OHYfuI28Exea0/x5cIIzN6wH0fWLUD3vlNx9sge/PPdvti+ZTUmL1qJh48eYXlMJL67cBvz
I3uiW69BGDu8HybGbIG6IBE9/vE+Jk+OxJ//48/YeSEZu+ZHofeIBfjpuy8xeMhwxMZMQ8SUxbh+
7SLGjwlH3NIY9Ph0EC6nqOCRnbU0ADOnYNux66j1CoNqscGhyUPEuDAkq52oyoxH/0/fw4Qpk9H9
w0G4mZSJOdPDcaXAhNtHN2PqvPW4f9eKSWPGCQOgVtqFjEuHMGjEZDjuP8Wjx09hV93GZz3748rV
S/j47XfEcZqKiePHonevobiaVgy38taLSbnt/4MwGe9/9Blmz5qJj97/B/aeu4OK7JsIHzUGcXEL
8FmPwYhPyME6cdzCp8wR+zQEW/ZfxOEdSxG77bDYn+bvkrWErhwCkNe4FA1AkCtoQgCNkU/ret3Q
pNxCyfHjqMzIVzpG+ayAQYymS06cQGVOCaweJ7Q5WdCLBt2kr4ImOw/6MhU0+YVKnF6XnwNtaZVi
KMrjz0F18RpMVof4ngf6wixRzg/QquTnohFLuIFyYShM4nvyCX9jRTHUF6/AKPLrMhNR/MMp6CoN
DW8iyAcPnz+sZ9ZXQH36R6jOXYbR7FAe5DOoi6HJKRJ5tNBk5MCo14ltE2VbnTDpyqD68QQq0vNg
8daIRl8L9Zkfob6RrDxkqOy/KFu+BqkvEtso9r+qUK28EiifD6i6KQzNhatiO+V+iDz56Q37odaI
4yOfH2h0HF8CDUD7GAB5zdiFWXNatDhz8hiOHjsBtc4iOiunMnJOuHYBx77/ETpnHUoSfkRY1CSc
OnMOV+5kwOXxik7RhSXTxuHbSxmo8TS81mkx6pB0R3RoepPyPIDFaoO2rAh3UjKgqSzB6dMXUCZG
d1cuCIOYnI6cgkLl+s3PzYSqvBJF+VmIv3AK3588C53FAa+4RrLvXMOJH08jNSMLxeVaJdZ/6tRF
WF0epN2OF9t9HCqtMB8ib8rtKzhy5BhSc1VwKc+jCKNjNSNf1N+i0krldT25nWaxnRmZ6ajUGuGW
t+KLMnH06FEkie/VinIyM9JQoTOJdRUiO0dsoygjKyMT5eLYy9f4SnIzkJaVL7a94RU++QR/WnIi
CopVuHX5HI6Jso4dP4kynVXZB3mslWMu1u0VbUPKjXixnUeE2ciDt9oLhzC+6QnXxLKjSM4qgleM
gh1mLX46fgyn4m/BJa610sIc5BbJXyZ9zfboJdAAUG9cQRUCeAHZIcp36xveqRfLZKcrGoyGZQ0d
sdnhECMS0SgJ0yDzyVfoLPK9YJlXPu2vXOyiYXXLmLroYGXD//wz5b19+XqfKEf53QHfbw3Iz2U5
ooNV3r93OEVeMTKXZb3Ywcq3BsSxlJ2xsh2+78rtk+uVnbJZPvEvG3hRtnwNzLdPcl3K98W8fAOg
cbkC3zZaRIOp5JXlie1U1uV3PxoayeagAWgfA+BDvjniESNT+bS7fM2uobMyK7FmucztqUbuzRMY
P2sh3PWPUS3On8dlwab5ERg6bqHyTIjs7BvKM8Mpn4XxPS0vyrKKOu8S9UWaAa+oh/LNAY+YOkWd
coi6rhgRWUfFuuVUxsarlXwN78/LhxPl9+RT/nL7rMI8yk5UhrvkZ7LDaNju3+edvvop8sjldrEu
X57ftlOUJ7dbrt8m6qH8nuv5mzmO559ZrHY4RFm+ZVZxLcj8cp+cimF9vg55vMR+y1f23KI+y7Kq
xVSus2F9jRHrdjdsZ4NJafidBIcwY75tl+uQ58Ur5r3K72k0bKNDXCcN5+fFMl8fhgCoN67gCwGQ
joYGoH0NQHMor+DpqlBSqlbMoGLkLEZkpaWirKph9Ovve6Rrw4cAqTeuoAwBkA6FBqBzDYBE+cU6
GV5qtMw3qm5J2IZ0PbpyCIAGIEQUCCGA9vrlLdJ25Gg0lA3AkCMGyJ9rvus0o9pBSOt55DFjpPw3
wE4IAchrVqqldwAYAggRdeUQgKx4+fn50Ol00Gg0pItQXFwckgbg0VPg3V1a7LpeiUOJGnxLSBv4
PlmD/7e9HKW8A0C9KbVXCOB17wC0JATw6NEjVFVVKQaAdA2kAZB3AkJV25KrEXPRiZh4FyFt47IL
cdfdqHv46/Pa1TGiAaBeqq4cAqAoiqLaJoYAqJeqK4cAKIqiqLZJttdywCXVUgPAOwAhovYKAXTE
WwAURVFU2yTb2dcNAfjuGNAABLkYAqAoigpetSYEUFFRoaRpAIJcDAFQFEUFr173DgBDACEkhgAo
iqKCV69rABgCCCExBEBRFBW84lsA1EvFEABFUVTwSrbXfAuA8iuGACiKooJXsp1lCIDyK4YAKIqi
glcMAVAvFUMAFEVRwSvZXjMEQPkVQwAURVHBK9nOMgRA+dWbCgHQAFAURXW8GAKgXiqGACiKooJX
r3sHgCGAEFJ7hQBacwfA932KoiiqY3T//n2GACj/elMhgJKSEuX/5WUFk2XJaXNp33xr8r8qX0vz
MN22tG/+ZXkazzfO33g5052b9s2/LE9jGuf3zTP9ZtMSk8kElUqltLtyniEA6je9qRCArFiyUmo0
GuWPJ2SFk2k59ZduSZ62puU6Xjd/VVXVb2m5XM6/Ki2nzS3vqLRcn790c3l8++xL+/I3PhbNpV83
v5zK77xOntbkb7z/cvnL0v7yd1Rarq+lad++vWp5c2k59ZduSZ62puU6WppH7p9My6m/5S9Ly2lz
y9szLdfRXNqX37efL0vLaXPLX5b25ZdTeZdWqqUGgCGAEFFnhwB+/fXX53MURVFUZ6olBoAhgBBS
Z4YA5EN/snL5K5MQQkjHYrfb8ejRo+ctcoMYAghhdWYI4OnTp8ryBw8eEEII6WRk5//iXViGAEJY
nXkHgKIoiupaYggghNWRBuDJkyfP5yiKoqiuKH93AOSDg1I0AEGujgoByHdP5eeyYhFCCOmayDZd
Tn1iCCCE1FF3AGSFkg/9SXdJCCGk6/Ls2bPnLTdDACGljjIAFEVRVOCJIYAQUkeFACiKoqjAE0MA
ISTeAaAoiqJ8YggghEQDQFEURfnEEEAIiSEAiqIoyieGAEJIvANAURRF+cQQQAiJBoCiKIryiSGA
EBJDABRFUZRPDAGEkHgHgKIoivKJIYAQUnsYAJvNRgNAURQVBGIIIITEEABFURTlE0MAISSGACiK
oiifGAIIIbWXAZB3ASiKoqjAlmzXGQIIEbWXAUhLS1MqjaSqqkqZyttIlZWVv6Xlcjn/qnRL8stp
R6TlOvylfXl8+/aq/DLPi/nltLn06+ZvTVqu43XyyLTcl8bLffv2Yrpxfn95Gi9vz7Rcx6vScrua
yy/zvCotpx2Rlut4nTwvy+9b3ng//S1/Vfpl5XREWq6jubQvv28/X8zTeP8b5/G3/GXp180vp/I7
7ZG/8fIX0433Xy5vLt04f3ukZVvOOwAhovYwAPKvJOVyuUwiK42E6ddL++ZflqcxjfP75l+Vft38
TLdP+kV8n8lpS77PdMemffONl79I4zyN8wVz2ic5TwMQxGoPA0BRFEUFn2Q7TwMQxGqtAZAPirhc
rt9cIyGEkOBBdv6yjffXB7wIDUCAqjUGQCJNwL1798SJv6ukCSGEdH1km91SlDa+vt5vH9AYGoAA
VWvvALjdHpRXVEGj0UGjJYQQ0vXRvxYVlRpYrbZmTQANQICqNQbg3r16mExmGM023HvwBHfvPSKE
ENKFqf9FTEVHXl1Tg5qa2maRsX+H06UYAXknwF9f4IMGIEDVWgNgNltgd3rw6Clw/9GvhBBCujAP
nzzD/V9+adFDfRJ5p9fj8UKnN9IABKvaYgBsDjce/ksYgIdPCSGEdGEePBZGgAaAaiwaAEIICX5o
AKgmogEghJDg51UGwF8HTwMQAqIBIISQ4MefAZCdvMRkMilP+st0489oAIJcNACEEBL8+DMAsmMv
LS3F9evXld//b9zR0wCEgGgACCEk+HnRANy/f1/5E6CUlBTlD92Sk5OVPwPydfY0ACEgGgBCCAl+
XjQA8pa//FdBp9OJBw8ewG63Q6PR0ACEkmgACCEk+HnZMwC+X/njMwAhKBoAQggJfvwZgFdBAxAC
ogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEII
CX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaA
aiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEg
hJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5o
AKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDghwaAaiIaAEIICX5oAKgmogEghJDgx58BkJ18
47a98TwNQAiIBoAQQoIffwbA4/Ggvr5e6ewbOnzPbyaABiAERANACCHBz4sG4P79+yguLkZ5eTke
PnwItVqNkpISZbn8nAYgBEQDQAghwc+LBkCO/G02G5KTk5Gbm6tMHQ6Hslx+TgMQAqIBIISQ4Mdf
CECO9qUJSE1NVTp/3+hfQgMQAqIBIISQ4MefAZD4Rvy+qQ8agBAQDQAhhAQ/LzMAEtnZ+1tGAxDk
ogEghJDg51UGwB80ACGgthgAh8sLUadExXpGCCGkC/NIDNYePHyotOGyc2+Oe/X1qK6upgEIZrXW
AJiEAdDqTaiuuwdvTT0hhJAuTHWtmHqr4XK54XJ7msUtMFtsqNLo/vBwoD9oAAJUrTEA0h3KiqTV
6aHTGYRDJIQQ0vUxQv8aaLV6OJ2uJg8IvggNQICqNQZAIk3A/fv3lFtDhBBCgg/ZxjfX+UtoAAJU
rTUAhBBCiIQGIEBFA9BwN4O8Hv6OI+k4/J2DYMTfvpOuDw1AgCrUDYB8JUY+6UpaTk1Njd9jSToO
f+chGGnpK2qka0EDEKAKVQMgRxuysSkoKFD+EEP+CQZpGfn5+aioqFBihP6OLWk/ZD2V9bOoqMjv
uQg2ZN3yer28GxBg0AAEqELZAMiGRjasFosFZrOZtAB5rHQ6nfLPYTQAHY80qdIA+DsXwYbValX2
1eVy0QAEGDQAAapQNwC+xtVkMpEWII+VVqtFWVkZDUAnIA2AHBn7OxfBhjSXcl9pAAIPGoAAFQ1A
+xkA+euIdrtd+Xctf5+3Bw0jJcvv86LRtAoa5+lIaAA6l84wALK+ynrrw+LnepD1THbQLy5vT2gA
AhcagAAVDUDbDYDRaFT+F8HrsiE3JwcFxWp4a2pEQ+o/v3+MopG1wuV0wCTK85/HDKNBD41Wp6Tl
dut1OtEhi/k27kNLoQHoXDraAJgFFWWlyMvNVf4TXlJRpfvDNSHTVZVlUJdXwu5wwmG3KXW+cTnt
AQ1A4EIDEKCiAWi7AbA5XNCVZCIybAj6DByCfn16YfGqr2FyukRj6YBDNJo2MWq3WG1wu91w2KxK
AypHVS4x73a7lPinQVOOtMw82MQoTN5NkHmdDvtv67G7vMi6dgLTYtbC4qmGt7YGp79cgwWLd8JT
V6v8YpdSlkUYBVH+H9cnR3p2ZVvsYsTX2gacBqBz6UgDYLE5YKvMxbDu76NXvwEY0L8/+vcfiB+u
ZIjro1apR9KU1tbdxfWzh3Dw9FUYhBHILS5TTIC/MtsCDUDgQgMQoKIBaKMBEB11rdeK+VEDMHXZ
Hrira2CrysO44cNw8lYujNoKpKcmoUBdBbO+HPGXLyOnpBLVYt1mgxY3r8bjyrU7cHrrcevEdnzS
ZxRytDZ4HEZcjb+MxMwCeDwe5a6Aw12NtAsHMWrCYli8Naiur8X3a2IxcepG3H/yAFmpdxB/5Roq
tUa4xXcMVaqG9amqUO1xQl2qQmZGKtKz8xXD4Xd/moEGoHPpWAPghD7/FsJGT4W25hEe/nIf9+rv
wm4xICU5CVVGO1xWPVJS01AqzrfBpMeWhRMxauoqmISRlAbBX7mthQYgcKEBCFDRALTNAFisDphK
UxA+eAwKzdVw2SxiBC9GVmIU7zCUYWJYD/QYFIZvDhxAzJQJmD57NoaNisSdrGJ8uzUO4eOmYPyI
wYjdcgAHNs7E/37rbzh47io2Lp6NcdEzMXLkCOz/6Ybo0MVIXhiA9EuHET4lrsEAiFHaifVLMXfJ
Htw5cwg9ew/B5MjRiFm3Gxp1PqaPG/18fVFIzinCkmlD0K1nf+w5dk6U5/W7P81BA9C5dLQBMJem
YsDHPbBk9QasX7cO67ftgsZkx94vZmHq0i3Ys24+Zn2+GycPbMSKrTswJ+wD/OfbvZBcooHL0b53
AWgAAhcagAAVDUDbDYBRlSQMQDiKLDVwWs3KrXeX6GBd+hKEjx6IxAoXLn65FP/3L+9j3oL56P3B
O4heth23449jxvRpmDx2EP7aPxLZSdcwbeEmZN/8EW/9+39h2twYhA34GB8PnQiTuw4ubzVSLxzE
ODECc9bdRbUYrZ3e/DliFn+Nmz/txcD+I7H5qz24npqLIxsW4c//2U1ZX68P3sbMZRsRM2s8jl7P
xy91XoYAAoSONgAWdRr6fdQdcxcvx7K4OCxbvRGFlRY8uufE9H7v4K33R8P9CDjxVSyW7T6Oywe/
wtJtx8W5r1XCSv7KbS00AIELDUCAigagHUIAHgtmR/TF3HWHUVd/D15TKaLHR+DCjTuYER2OtCo3
fty8AB/2HYXrt29j3ZL52Lp9B8b074e9J+Px3bY4vN03EgnXTiMyeiXSr/+Af/7jI5y+egv7Nq1E
TNxWWNxe2J0elKacR89PByBX78LjX2oQGzUAsZuOw6grxfWfb+LwzpX4+JOx2LJqAT4bOEZZ35qF
c7B7/3HEzInCj3eK4HW2fuRGA9C5dEYIYHT4TFhEG/Ds6RM8fvRQCR9ZK/MQMfATvN9jGAoNNfhx
91LE7TqGUzvXYt6ag6gXBsBfmW2BBiBwoQEIUNEAtP0hQLvLA21hKsYMHYABw0ZiUP8+mB27HU67
HrOmR+FmgRFObQFmRA7EqPBx6DdkLG6n52FdTAQGh4UjImwQuo2YAbUqGz3++11sPXAeX66ejgHD
x6D/gAHY/9NNeDxuxWx4XDZ89Xm06OR7YtjA3hgwOgrldi+uHNuBvgMGY9zoYYhesAGaKhVmRw36
bX3JmQWIWzAZpxIK4aEBCBg6+iFAe1UuBn/4HvoNGoqhQ4Zg8ODBOHLhZ6yPicQX+87j1g9fYcz0
FTi0dy3WHPgJ2ZcO4e9/64b4NBXcrt8fUG0PaAACFxqAABUNQNsMgPyuRqOBurwKFaWFuHjhPOJ/
voVKrQ6lJYVQq0uhNxhhd7hgM+uRnJSEUo1RrNsDi5iXD1sVFKtQUVkFi9WKksJcFJRUwut2IFV8
lltSAa/s/H237M1WVHtcyMtIRWJSMgwWF5wOm/K2QEFOOpKSU2Gy2pW3C6wmXcP6tCalvLIyNbR6
g9jmpvvRUmgAOpeONADyLZTy8jIk3b4p6u0FXHhOgqgzGemZsNhdcDksKMjNhUqc70qNFjarCTlZ
WVBXaEWH3Tbj/CI0AIELDUCAigagbQbA4XAgOzsbe/bsxt6vv8aBAwdwYP9+Mb8H+/Z9A71eLxrN
htfwLBarkl++EtjwGuDzeZtN0PBUvl0+QCh/6Edsk/xMvrL34jrlZ3bxmfxceRJbicWKZcorhw6l
YVZeA/zD+kywirL8/cjL60AD0Ll0pAGQdePSpcvYv1/UWVlvn7Nv3z7k5OQ0/CaFrGt2u/LWiPKD
U8/rZXt3/hIagMCFBiBARQPQNgMgO1rZOMr37V9ENmRtKbsrQgPQuXSkAZB1V3bu/uqurNOtfVC0
tdAABC40AAEqGoC2PwMQStAAdC4daQC6GjQAgQsNQIAq1A2A/Dtgg8Gg3KonzSOPVWVlJUpLS2kA
OgFpAAoLC/2ei2BD3nGQ+0oDEHjQAASoQtkAyMZVdmQqlUqZkpYh/0JZ3gWgAeh4ZD2Vd1vkyNjf
uQg25H5WV1fTAAQYNAABqlA1AD5kJ1ZfX09agb/jSdqfUKqjNJWBCQ1AgCrUDQAhhJC2QQMQoKIB
IIQQ0hZoAAJUNACEEELaAg1AgIoGgBBCSFugAQhQ0QAQQghpCzQAASoaAEIIIW2BBiBARQNACCGk
LdAABKhoAAghhLQFGoAAlT8DUF1bh3v1DSeVEEIIeRX3RX9hoQEIPPkzAEZxIi3uu4qjI4QQQl6F
7C+09nqUPe9DaAACRP4MgHRxhBBCSEvxdf40AAEkfwaAEEIIaS00AAGib749fM77BMoJI4QQQtqK
oeYZyo0eGoCuri3bvrpu8dQrbo0QQghpK7LzL1BpaAAoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiuqC
+rd/+//Eqic8nMJl7wAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion
$MainForm_Load={
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1

	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $False
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	$comboboxO365Licenses.Enabled = $False
	
	$groupboxNoAdSync.Enabled = $false
	$tabcontrolUserProperties.Enabled = $false
	
	$radiobuttonDisableMFA.Checked = $true
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
	$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
	$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateActiveDirector.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
			$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			Try
			{
				add-logs -text 'LOG: Converting password to SecureString'
				add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
				$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
				#Get disable account boolean
				add-logs -text 'LOG: Checking if account is disabled or enabled'
				$disabledaccount = ($checkboxAccountIsDisabled.checked)
				#If account should be disabled
				If ($disabledaccount -eq $true)
				{
					add-logs -text 'LOG: Account is disabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
				}
				Else
				{
					add-logs -text 'LOG: Account is enabled'
					add-logs -text 'LOG: Creating user'
					New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
					$User = Get-ADUser -Filter * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
					add-logs -text "LOG: User has been created"
					
					$Proxys = @()
					add-logs -text "LOG: Getting user proxy addresses to set"
					$Proxys += $textboxproxyaddress.Lines
					If ($Proxys -ne $Null)
					{
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding proxy addresses"
							add-logs -text "LOG: Getting user proxy addresses to set"
							add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
							Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
						}
					}
					Else
					{
						add-logs -text "LOG: No proxys were found to add"
					}
					add-logs -text "LOG: Done with Proxys"
					
					#Find if user should be added to any groups
					add-logs -text 'LOG: Getting checked groups'
					$groups = $checkedlistboxGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
							Add-ADGroupMember -Identity $Group -Members $User
						}
					}
					Else
					{
						add-logs -text 'LOG: No Groups checked'
					}
					Add-Logs -text 'LOG: Done with Groups'
				}
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
		}
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		add-logs -text 'LOG: Checking all required parameters for data...'
		If (($checkboxO365PasswordNeverExpires.Checked -eq $true) -and ($checkboxo365usermustchangepassword.Checked -eq $true))
		{
			add-logs -text 'WARN: You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoMessage = 'You have selected "Password never Expires". and "User must change password at next logon". They will be unable to change their password'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: All required parameters are valid'
			
			add-logs -text 'LOG: Checking enabled status of user'
			If ($checkboxBlockCred.Checked -eq $true)
			{
				add-logs -text 'LOG: User is Disabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 65
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $User to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done!'
				}
			}
			Else
			{
				add-logs -text 'LOG: User is Enabled'
				add-logs -text 'LOG: Creating user'
				If (($comboboxO365Licenses.SelectedItem -ne $null) -and ($comboboxO365countrycode.SelectedItem -eq $null))
				{
					add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
					$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				Else
				{
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -LicenseAssignment $comboboxO365Licenses.SelectedItem -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					
					#Find if user should be added to any Security groups
					add-logs -text 'LOG: Getting checked Security groups'
					$groups = $checkedlistboxO365SecurityGroups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Security Groups found'
						foreach ($group in $groups)
						{
							add-logs -text "LOG: Adding $User to $Group"
							$GroupGuid = ((get-msolgroup | where-object { $_.displayname -eq $Group }).ObjectID).GUID
							$UserGUID = (($User).ObjectID).GUID
							add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
							Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
						}
					}
					Else
					{
						add-logs -text 'LOG: No Security Groups checked'
					}
					Add-Logs -text 'LOG: Done with Security Groups'
					
					#Check user licenses, if licensed create and wait for mailbox
					Add-Logs -text 'LOG: Checking if license was applied to the user'
					If ($comboboxO365Licenses.SelectedItem -ne $Null)
					{
						Add-Logs -text 'LOG: License is applied to the new user'
						Add-Logs -text 'LOG: Pausing for 60 seconds for mailbox to be created'
						Start-Sleep -Seconds 65
						Add-Logs -text 'LOG: Done'
						
						#Find if user should be added to any mail groups
						add-logs -text 'LOG: Getting checked mail groups'
						$groups = $checkedlistboxDISTROo365groups.CheckedItems
						If ($groups -ne $null)
						{
							add-logs -text 'LOG: Mail Groups found'
							$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
							foreach ($group in $groups)
							{
								add-logs -text "LOG: Adding $User to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $User"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
						Else
						{
							add-logs -text 'LOG: No Mail Groups checked'
						}
						Add-Logs -text 'LOG: Done with Mail Groups'
						
						Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
						#Hide from GAL
						If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
						{
							Add-Logs -text 'LOG: Hide from global address list is set to True'
							Add-Logs -text 'LOG: Hiding mailbox from global address list'
							$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
							If ($null -ne $mailbox)
							{
								Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
							}
							Else
							{
								Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
								$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
								$InfoTitle = "Warning"
								Show-MessageBox_psf
							}
						}
						Else
						{
							Add-Logs -text 'LOG: Hide from global address list is set to False'
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No license is being added for the new user'
						Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
						Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
						Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
					}
					Add-Logs -text 'LOG: Done!'
				}
			}
		}
	}
	ElseIf (($checkboxCreateActiveDirector.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
}




$labelFirstName_Click={
	
}



$textboxDisplayName_TextChanged = {
	If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelDisplayName.Text = "Display Name:"
		$labelDisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelDisplayName.Text = "*Display Name:"
		$labelDisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)   )
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxLastName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.Text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.Text + "." + " " + $textboxLastName.Text
	}
	
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxLastName.Text
	}
	Else
	{
		$textboxDisplayName.Text = $textboxFirstName.text + " " + $textboxInitials.text + "." + $textboxLastName.Text
	}
	
}

$button1_Click={
	Write-Host (($textboxInitials.text | Measure-Object -Character).Characters)
	
}

$buttonGeneratePassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxpassword.Text = $textboxPasswordGen.Text
	$textboxConfirmPassword.text = $textboxPasswordGen.Text
	
}

$textboxConfirmPassword_TextChanged = {
	If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelConfirmPassword.Text = "Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Black'
	}
	ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelConfirmPassword.Text = "*Confirm Password:"
		$labelConfirmPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			
			
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateActiveDirector.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		#$buttonO365Genpassword.Enabled = $false
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = ($textboxUserLogonName.text) + ($comboboxDomains.Text)
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged={
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userconfirmpassword.Text = "Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Black'
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userconfirmpassword.Text = "*Confirm Password:"
		$labelO365userconfirmpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonDisableMFA.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1'
		$Modules = Get-ChildItem $Env:LOCALAPPDATA\Apps\2.0\*\CreateExoPSSession.ps1 -Recurse | Select-Object -ExpandProperty Target -First 1
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		Connect-EXOPSSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		add-logs -text 'LOG: Connected to Office 365!'
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Black'
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		
		#We only want licenses that have at least one to assign to a user
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Enabling Licenses combobox'
		add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		$comboboxO365Licenses.Enabled = $True
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId
		add-logs -text 'LOG: Done'
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user Full Access Permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	add-logs -text 'LOG: Generating random password'
	add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
	$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
	$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
	$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
	add-logs -text 'LOG: Done'

	
}


$checkboxRunDirSyncAfterUserC_CheckedChanged={
	If ($checkboxRunDirSyncAfterUserC.Checked -eq $True)
	{
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365Initials.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		$textboxo365pobox.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
	}
	elseif ($checkboxRunDirSyncAfterUserC.Checked -eq $false)
	{
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365Initials.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		$textboxo365pobox.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
	}
}

$buttonExit_Click={
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.Text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
		
	}
}

$textboxO365FirstName_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.Text + "." + " " + $textboxO365LastName.Text
	}
	
}

$textboxO365Initials_TextChanged={
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged={
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click={
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged={
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		Import-Module ADSync -ErrorAction SilentlyContinue
		$ADSyncModule = Get-Module | Where-Object { $_.Name -eq "ADSync" } -ErrorAction SilentlyContinue
		If ($null -ne $ADSyncModule)
		{
			add-logs -text 'LOG: DirSync found, enabling DirSync option'
			$checkboxRunDirSyncAfterUserC.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found. Enabling manual user creation'
			$groupboxNoAdSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Disabling Office 365 manual user creation'
		$groupboxNoAdSync.Enabled = $false
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateActiveDirector_CheckedChanged={
	If (($checkboxCreateActiveDirector.Checked -eq $true) )
	{
		add-logs -text 'LOG: Enabling AD User creation'
		$tabcontrolUserProperties.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Getting Active Directory Groups'
		add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
		$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
		If ($null -eq $Groups)
		{
			add-logs -text 'WARN: No Active Directory Groups were found'
			$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
			Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting NetBIOS Name'
		add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
		$Netbiosname = (Get-ADDomain).NetBIOSName
		If ($null -eq $Netbiosname)
		{
			add-logs -text 'WARN: No NetBIOS Name was found'
			$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$textboxUPNDomain.Text = $Netbiosname + "\"
			add-logs -text 'LOG: Done'
		}
		
		add-logs -text 'LOG: Getting UPN Suffixes'
		add-logs -text 'CMD: $Forest = Get-ADForest'
		$Forest = Get-ADForest
		If ($null -eq $Forest)
		{
			add-logs -text 'WARN: No Active Directory Forest was found'
			$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			$UPNs = @()
			add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
			$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
			If ($extraUPNs -ne $Null)
			{
				foreach ($extraUPN in $extraUPNs)
				{
					$UPNs += "@" + $extraUPN
				}
			}
			add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
			$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
			Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
		}
		add-logs -text 'LOG: Done'
		
		$comboboxDomains.SelectedIndex = 0
		
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false	
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	add-logs -text 'LOG: Done'
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Black'
	}
	ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
		$labelUserLogonNameUPN.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}




$maskedtextboxpassword_TextChanged = {
	If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelPassword.Text = "Password:"
		$labelPassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelPassword.Text = "*Password:"
		$labelPassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$labelpasswordconfirmmessage.ForeColor = 'Red'
			$labelpasswordconfirmmessage.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelpasswordconfirmmessage.ForeColor = 'Green'
			$labelpasswordconfirmmessage.Text = "Passwords match!"
			If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}





$resetFormToolStripMenuItem_Click = {
	
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	add-logs -text 'LOG: Resetting forms on General Page'
	#General page
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	$textboxDescription.Text = ""
	$textboxoffice.Text = ""
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Account Page'
	#Account page
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Address Page'
	#Address page
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	$textboxcity.Text = ""
	$textboxstate.Text = ""
	$textboxzipcode.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Groups Page'
	#Groups page
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Organization Page'
	#Organization page
	$textboxjobtitle.Text = ""
	$textboxDepartment.Text = ""
	$textboxCompany.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Profile Page'
	#Profile page
	$textboxprofilepath.Text = ""
	$textboxlogonscript.Text = ""
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	add-logs -text 'LOG: Resetting forms on Attributes Page'
	#Attributes page
	$textboxproxyaddress.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	
}

$linklabelBradWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHubProject_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged= {
	If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365DisplayName.Text = "Display Name:"
		$labelO365DisplayName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365DisplayName.Text = "*Display Name:"
		$labelO365DisplayName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
	
}

$textboxO365UPN_TextChanged= {
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365UserPrincipalName.Text = "UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Black'
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
		$labelO365UserPrincipalName.ForeColor = 'Firebrick'
	}
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $false
	}
}


$maskedtextboxo365password_TextChanged={
	If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
	{
		$labelO365userpassword.Text = "Password:"
		$labelO365userpassword.ForeColor = 'Black'
	}
	ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
	{
		$labelO365userpassword.Text = "*Password:"
		$labelO365userpassword.ForeColor = 'Firebrick'
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			$labelo365password.ForeColor = 'Red'
			$labelo365password.Text = "Passwords do not match!"
			$buttonCreateUser.Enabled = $false
		}
		Else
		{
			$labelo365password.ForeColor = 'Green'
			$labelo365password.Text = "Passwords match!"
			
			If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}	
}


$comboboxO365Licenses_SelectedIndexChanged={
	If ($comboboxO365Licenses.SelectedIndex -eq $null)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$labelO365Groups.Text = "Please select Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select Shared Mailboxes you want your user to have Full Access Permissions on"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
	}
	
}


$comboboxO365countrycode_SelectedIndexChanged={
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
	}
	Else
	{
		$labelCountryCode.Text = "Country Code"
		$labelCountryCode.ForeColor = 'Black'
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>